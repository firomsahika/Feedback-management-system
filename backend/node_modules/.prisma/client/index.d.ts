
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Class
 * 
 */
export type Class = $Result.DefaultSelection<Prisma.$ClassPayload>
/**
 * Model StudentClass
 * 
 */
export type StudentClass = $Result.DefaultSelection<Prisma.$StudentClassPayload>
/**
 * Model Course
 * 
 */
export type Course = $Result.DefaultSelection<Prisma.$CoursePayload>
/**
 * Model Teacher
 * 
 */
export type Teacher = $Result.DefaultSelection<Prisma.$TeacherPayload>
/**
 * Model TeacherCourse
 * 
 */
export type TeacherCourse = $Result.DefaultSelection<Prisma.$TeacherCoursePayload>
/**
 * Model FeedbackParameter
 * 
 */
export type FeedbackParameter = $Result.DefaultSelection<Prisma.$FeedbackParameterPayload>
/**
 * Model Feedback
 * 
 */
export type Feedback = $Result.DefaultSelection<Prisma.$FeedbackPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Role: {
  admin: 'admin',
  student: 'student'
};

export type Role = (typeof Role)[keyof typeof Role]


export const CourseType: {
  Lecture: 'Lecture',
  Tutorial: 'Tutorial',
  Lab: 'Lab'
};

export type CourseType = (typeof CourseType)[keyof typeof CourseType]

}

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

export type CourseType = $Enums.CourseType

export const CourseType: typeof $Enums.CourseType

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.class`: Exposes CRUD operations for the **Class** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Classes
    * const classes = await prisma.class.findMany()
    * ```
    */
  get class(): Prisma.ClassDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.studentClass`: Exposes CRUD operations for the **StudentClass** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StudentClasses
    * const studentClasses = await prisma.studentClass.findMany()
    * ```
    */
  get studentClass(): Prisma.StudentClassDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.course`: Exposes CRUD operations for the **Course** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Courses
    * const courses = await prisma.course.findMany()
    * ```
    */
  get course(): Prisma.CourseDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.teacher`: Exposes CRUD operations for the **Teacher** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Teachers
    * const teachers = await prisma.teacher.findMany()
    * ```
    */
  get teacher(): Prisma.TeacherDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.teacherCourse`: Exposes CRUD operations for the **TeacherCourse** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TeacherCourses
    * const teacherCourses = await prisma.teacherCourse.findMany()
    * ```
    */
  get teacherCourse(): Prisma.TeacherCourseDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.feedbackParameter`: Exposes CRUD operations for the **FeedbackParameter** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FeedbackParameters
    * const feedbackParameters = await prisma.feedbackParameter.findMany()
    * ```
    */
  get feedbackParameter(): Prisma.FeedbackParameterDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.feedback`: Exposes CRUD operations for the **Feedback** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Feedbacks
    * const feedbacks = await prisma.feedback.findMany()
    * ```
    */
  get feedback(): Prisma.FeedbackDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.7.0
   * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Class: 'Class',
    StudentClass: 'StudentClass',
    Course: 'Course',
    Teacher: 'Teacher',
    TeacherCourse: 'TeacherCourse',
    FeedbackParameter: 'FeedbackParameter',
    Feedback: 'Feedback'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "class" | "studentClass" | "course" | "teacher" | "teacherCourse" | "feedbackParameter" | "feedback"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Class: {
        payload: Prisma.$ClassPayload<ExtArgs>
        fields: Prisma.ClassFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClassFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClassFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>
          }
          findFirst: {
            args: Prisma.ClassFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClassFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>
          }
          findMany: {
            args: Prisma.ClassFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>[]
          }
          create: {
            args: Prisma.ClassCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>
          }
          createMany: {
            args: Prisma.ClassCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ClassCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>[]
          }
          delete: {
            args: Prisma.ClassDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>
          }
          update: {
            args: Prisma.ClassUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>
          }
          deleteMany: {
            args: Prisma.ClassDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ClassUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ClassUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>[]
          }
          upsert: {
            args: Prisma.ClassUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>
          }
          aggregate: {
            args: Prisma.ClassAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateClass>
          }
          groupBy: {
            args: Prisma.ClassGroupByArgs<ExtArgs>
            result: $Utils.Optional<ClassGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClassCountArgs<ExtArgs>
            result: $Utils.Optional<ClassCountAggregateOutputType> | number
          }
        }
      }
      StudentClass: {
        payload: Prisma.$StudentClassPayload<ExtArgs>
        fields: Prisma.StudentClassFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StudentClassFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentClassPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StudentClassFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentClassPayload>
          }
          findFirst: {
            args: Prisma.StudentClassFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentClassPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StudentClassFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentClassPayload>
          }
          findMany: {
            args: Prisma.StudentClassFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentClassPayload>[]
          }
          create: {
            args: Prisma.StudentClassCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentClassPayload>
          }
          createMany: {
            args: Prisma.StudentClassCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StudentClassCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentClassPayload>[]
          }
          delete: {
            args: Prisma.StudentClassDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentClassPayload>
          }
          update: {
            args: Prisma.StudentClassUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentClassPayload>
          }
          deleteMany: {
            args: Prisma.StudentClassDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StudentClassUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StudentClassUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentClassPayload>[]
          }
          upsert: {
            args: Prisma.StudentClassUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentClassPayload>
          }
          aggregate: {
            args: Prisma.StudentClassAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStudentClass>
          }
          groupBy: {
            args: Prisma.StudentClassGroupByArgs<ExtArgs>
            result: $Utils.Optional<StudentClassGroupByOutputType>[]
          }
          count: {
            args: Prisma.StudentClassCountArgs<ExtArgs>
            result: $Utils.Optional<StudentClassCountAggregateOutputType> | number
          }
        }
      }
      Course: {
        payload: Prisma.$CoursePayload<ExtArgs>
        fields: Prisma.CourseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CourseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CourseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          findFirst: {
            args: Prisma.CourseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CourseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          findMany: {
            args: Prisma.CourseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>[]
          }
          create: {
            args: Prisma.CourseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          createMany: {
            args: Prisma.CourseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CourseCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>[]
          }
          delete: {
            args: Prisma.CourseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          update: {
            args: Prisma.CourseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          deleteMany: {
            args: Prisma.CourseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CourseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CourseUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>[]
          }
          upsert: {
            args: Prisma.CourseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          aggregate: {
            args: Prisma.CourseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCourse>
          }
          groupBy: {
            args: Prisma.CourseGroupByArgs<ExtArgs>
            result: $Utils.Optional<CourseGroupByOutputType>[]
          }
          count: {
            args: Prisma.CourseCountArgs<ExtArgs>
            result: $Utils.Optional<CourseCountAggregateOutputType> | number
          }
        }
      }
      Teacher: {
        payload: Prisma.$TeacherPayload<ExtArgs>
        fields: Prisma.TeacherFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TeacherFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TeacherFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>
          }
          findFirst: {
            args: Prisma.TeacherFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TeacherFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>
          }
          findMany: {
            args: Prisma.TeacherFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>[]
          }
          create: {
            args: Prisma.TeacherCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>
          }
          createMany: {
            args: Prisma.TeacherCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TeacherCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>[]
          }
          delete: {
            args: Prisma.TeacherDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>
          }
          update: {
            args: Prisma.TeacherUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>
          }
          deleteMany: {
            args: Prisma.TeacherDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TeacherUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TeacherUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>[]
          }
          upsert: {
            args: Prisma.TeacherUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>
          }
          aggregate: {
            args: Prisma.TeacherAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTeacher>
          }
          groupBy: {
            args: Prisma.TeacherGroupByArgs<ExtArgs>
            result: $Utils.Optional<TeacherGroupByOutputType>[]
          }
          count: {
            args: Prisma.TeacherCountArgs<ExtArgs>
            result: $Utils.Optional<TeacherCountAggregateOutputType> | number
          }
        }
      }
      TeacherCourse: {
        payload: Prisma.$TeacherCoursePayload<ExtArgs>
        fields: Prisma.TeacherCourseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TeacherCourseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherCoursePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TeacherCourseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherCoursePayload>
          }
          findFirst: {
            args: Prisma.TeacherCourseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherCoursePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TeacherCourseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherCoursePayload>
          }
          findMany: {
            args: Prisma.TeacherCourseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherCoursePayload>[]
          }
          create: {
            args: Prisma.TeacherCourseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherCoursePayload>
          }
          createMany: {
            args: Prisma.TeacherCourseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TeacherCourseCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherCoursePayload>[]
          }
          delete: {
            args: Prisma.TeacherCourseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherCoursePayload>
          }
          update: {
            args: Prisma.TeacherCourseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherCoursePayload>
          }
          deleteMany: {
            args: Prisma.TeacherCourseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TeacherCourseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TeacherCourseUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherCoursePayload>[]
          }
          upsert: {
            args: Prisma.TeacherCourseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherCoursePayload>
          }
          aggregate: {
            args: Prisma.TeacherCourseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTeacherCourse>
          }
          groupBy: {
            args: Prisma.TeacherCourseGroupByArgs<ExtArgs>
            result: $Utils.Optional<TeacherCourseGroupByOutputType>[]
          }
          count: {
            args: Prisma.TeacherCourseCountArgs<ExtArgs>
            result: $Utils.Optional<TeacherCourseCountAggregateOutputType> | number
          }
        }
      }
      FeedbackParameter: {
        payload: Prisma.$FeedbackParameterPayload<ExtArgs>
        fields: Prisma.FeedbackParameterFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FeedbackParameterFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackParameterPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FeedbackParameterFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackParameterPayload>
          }
          findFirst: {
            args: Prisma.FeedbackParameterFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackParameterPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FeedbackParameterFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackParameterPayload>
          }
          findMany: {
            args: Prisma.FeedbackParameterFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackParameterPayload>[]
          }
          create: {
            args: Prisma.FeedbackParameterCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackParameterPayload>
          }
          createMany: {
            args: Prisma.FeedbackParameterCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FeedbackParameterCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackParameterPayload>[]
          }
          delete: {
            args: Prisma.FeedbackParameterDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackParameterPayload>
          }
          update: {
            args: Prisma.FeedbackParameterUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackParameterPayload>
          }
          deleteMany: {
            args: Prisma.FeedbackParameterDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FeedbackParameterUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FeedbackParameterUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackParameterPayload>[]
          }
          upsert: {
            args: Prisma.FeedbackParameterUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackParameterPayload>
          }
          aggregate: {
            args: Prisma.FeedbackParameterAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFeedbackParameter>
          }
          groupBy: {
            args: Prisma.FeedbackParameterGroupByArgs<ExtArgs>
            result: $Utils.Optional<FeedbackParameterGroupByOutputType>[]
          }
          count: {
            args: Prisma.FeedbackParameterCountArgs<ExtArgs>
            result: $Utils.Optional<FeedbackParameterCountAggregateOutputType> | number
          }
        }
      }
      Feedback: {
        payload: Prisma.$FeedbackPayload<ExtArgs>
        fields: Prisma.FeedbackFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FeedbackFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FeedbackFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          findFirst: {
            args: Prisma.FeedbackFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FeedbackFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          findMany: {
            args: Prisma.FeedbackFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>[]
          }
          create: {
            args: Prisma.FeedbackCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          createMany: {
            args: Prisma.FeedbackCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FeedbackCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>[]
          }
          delete: {
            args: Prisma.FeedbackDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          update: {
            args: Prisma.FeedbackUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          deleteMany: {
            args: Prisma.FeedbackDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FeedbackUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FeedbackUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>[]
          }
          upsert: {
            args: Prisma.FeedbackUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          aggregate: {
            args: Prisma.FeedbackAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFeedback>
          }
          groupBy: {
            args: Prisma.FeedbackGroupByArgs<ExtArgs>
            result: $Utils.Optional<FeedbackGroupByOutputType>[]
          }
          count: {
            args: Prisma.FeedbackCountArgs<ExtArgs>
            result: $Utils.Optional<FeedbackCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    class?: ClassOmit
    studentClass?: StudentClassOmit
    course?: CourseOmit
    teacher?: TeacherOmit
    teacherCourse?: TeacherCourseOmit
    feedbackParameter?: FeedbackParameterOmit
    feedback?: FeedbackOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    createdClasses: number
    createdCourses: number
    createdParameters: number
    assignedTeachers: number
    studentClasses: number
    feedbacks: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdClasses?: boolean | UserCountOutputTypeCountCreatedClassesArgs
    createdCourses?: boolean | UserCountOutputTypeCountCreatedCoursesArgs
    createdParameters?: boolean | UserCountOutputTypeCountCreatedParametersArgs
    assignedTeachers?: boolean | UserCountOutputTypeCountAssignedTeachersArgs
    studentClasses?: boolean | UserCountOutputTypeCountStudentClassesArgs
    feedbacks?: boolean | UserCountOutputTypeCountFeedbacksArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedClassesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClassWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedCoursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CourseWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedParametersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeedbackParameterWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAssignedTeachersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeacherWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountStudentClassesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentClassWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFeedbacksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeedbackWhereInput
  }


  /**
   * Count Type ClassCountOutputType
   */

  export type ClassCountOutputType = {
    studentClasses: number
    teacherCourses: number
  }

  export type ClassCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    studentClasses?: boolean | ClassCountOutputTypeCountStudentClassesArgs
    teacherCourses?: boolean | ClassCountOutputTypeCountTeacherCoursesArgs
  }

  // Custom InputTypes
  /**
   * ClassCountOutputType without action
   */
  export type ClassCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassCountOutputType
     */
    select?: ClassCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ClassCountOutputType without action
   */
  export type ClassCountOutputTypeCountStudentClassesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentClassWhereInput
  }

  /**
   * ClassCountOutputType without action
   */
  export type ClassCountOutputTypeCountTeacherCoursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeacherCourseWhereInput
  }


  /**
   * Count Type CourseCountOutputType
   */

  export type CourseCountOutputType = {
    teacherCourses: number
  }

  export type CourseCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    teacherCourses?: boolean | CourseCountOutputTypeCountTeacherCoursesArgs
  }

  // Custom InputTypes
  /**
   * CourseCountOutputType without action
   */
  export type CourseCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseCountOutputType
     */
    select?: CourseCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CourseCountOutputType without action
   */
  export type CourseCountOutputTypeCountTeacherCoursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeacherCourseWhereInput
  }


  /**
   * Count Type TeacherCountOutputType
   */

  export type TeacherCountOutputType = {
    teacherCourses: number
  }

  export type TeacherCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    teacherCourses?: boolean | TeacherCountOutputTypeCountTeacherCoursesArgs
  }

  // Custom InputTypes
  /**
   * TeacherCountOutputType without action
   */
  export type TeacherCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeacherCountOutputType
     */
    select?: TeacherCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TeacherCountOutputType without action
   */
  export type TeacherCountOutputTypeCountTeacherCoursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeacherCourseWhereInput
  }


  /**
   * Count Type TeacherCourseCountOutputType
   */

  export type TeacherCourseCountOutputType = {
    feedbacks: number
  }

  export type TeacherCourseCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    feedbacks?: boolean | TeacherCourseCountOutputTypeCountFeedbacksArgs
  }

  // Custom InputTypes
  /**
   * TeacherCourseCountOutputType without action
   */
  export type TeacherCourseCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeacherCourseCountOutputType
     */
    select?: TeacherCourseCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TeacherCourseCountOutputType without action
   */
  export type TeacherCourseCountOutputTypeCountFeedbacksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeedbackWhereInput
  }


  /**
   * Count Type FeedbackParameterCountOutputType
   */

  export type FeedbackParameterCountOutputType = {
    feedbacks: number
  }

  export type FeedbackParameterCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    feedbacks?: boolean | FeedbackParameterCountOutputTypeCountFeedbacksArgs
  }

  // Custom InputTypes
  /**
   * FeedbackParameterCountOutputType without action
   */
  export type FeedbackParameterCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedbackParameterCountOutputType
     */
    select?: FeedbackParameterCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * FeedbackParameterCountOutputType without action
   */
  export type FeedbackParameterCountOutputTypeCountFeedbacksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeedbackWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    password: string | null
    role: $Enums.Role | null
    createdAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    password: string | null
    role: $Enums.Role | null
    createdAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    password: number
    role: number
    createdAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    role?: true
    createdAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    role?: true
    createdAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    role?: true
    createdAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    name: string
    email: string
    password: string
    role: $Enums.Role
    createdAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    createdAt?: boolean
    createdClasses?: boolean | User$createdClassesArgs<ExtArgs>
    createdCourses?: boolean | User$createdCoursesArgs<ExtArgs>
    createdParameters?: boolean | User$createdParametersArgs<ExtArgs>
    assignedTeachers?: boolean | User$assignedTeachersArgs<ExtArgs>
    studentClasses?: boolean | User$studentClassesArgs<ExtArgs>
    feedbacks?: boolean | User$feedbacksArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    createdAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "email" | "password" | "role" | "createdAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdClasses?: boolean | User$createdClassesArgs<ExtArgs>
    createdCourses?: boolean | User$createdCoursesArgs<ExtArgs>
    createdParameters?: boolean | User$createdParametersArgs<ExtArgs>
    assignedTeachers?: boolean | User$assignedTeachersArgs<ExtArgs>
    studentClasses?: boolean | User$studentClassesArgs<ExtArgs>
    feedbacks?: boolean | User$feedbacksArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      createdClasses: Prisma.$ClassPayload<ExtArgs>[]
      createdCourses: Prisma.$CoursePayload<ExtArgs>[]
      createdParameters: Prisma.$FeedbackParameterPayload<ExtArgs>[]
      assignedTeachers: Prisma.$TeacherPayload<ExtArgs>[]
      studentClasses: Prisma.$StudentClassPayload<ExtArgs>[]
      feedbacks: Prisma.$FeedbackPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      email: string
      password: string
      role: $Enums.Role
      createdAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    createdClasses<T extends User$createdClassesArgs<ExtArgs> = {}>(args?: Subset<T, User$createdClassesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    createdCourses<T extends User$createdCoursesArgs<ExtArgs> = {}>(args?: Subset<T, User$createdCoursesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    createdParameters<T extends User$createdParametersArgs<ExtArgs> = {}>(args?: Subset<T, User$createdParametersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackParameterPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    assignedTeachers<T extends User$assignedTeachersArgs<ExtArgs> = {}>(args?: Subset<T, User$assignedTeachersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    studentClasses<T extends User$studentClassesArgs<ExtArgs> = {}>(args?: Subset<T, User$studentClassesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentClassPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    feedbacks<T extends User$feedbacksArgs<ExtArgs> = {}>(args?: Subset<T, User$feedbacksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'Role'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.createdClasses
   */
  export type User$createdClassesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    where?: ClassWhereInput
    orderBy?: ClassOrderByWithRelationInput | ClassOrderByWithRelationInput[]
    cursor?: ClassWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClassScalarFieldEnum | ClassScalarFieldEnum[]
  }

  /**
   * User.createdCourses
   */
  export type User$createdCoursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    where?: CourseWhereInput
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    cursor?: CourseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CourseScalarFieldEnum | CourseScalarFieldEnum[]
  }

  /**
   * User.createdParameters
   */
  export type User$createdParametersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedbackParameter
     */
    select?: FeedbackParameterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeedbackParameter
     */
    omit?: FeedbackParameterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackParameterInclude<ExtArgs> | null
    where?: FeedbackParameterWhereInput
    orderBy?: FeedbackParameterOrderByWithRelationInput | FeedbackParameterOrderByWithRelationInput[]
    cursor?: FeedbackParameterWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FeedbackParameterScalarFieldEnum | FeedbackParameterScalarFieldEnum[]
  }

  /**
   * User.assignedTeachers
   */
  export type User$assignedTeachersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    where?: TeacherWhereInput
    orderBy?: TeacherOrderByWithRelationInput | TeacherOrderByWithRelationInput[]
    cursor?: TeacherWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TeacherScalarFieldEnum | TeacherScalarFieldEnum[]
  }

  /**
   * User.studentClasses
   */
  export type User$studentClassesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentClass
     */
    select?: StudentClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentClass
     */
    omit?: StudentClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentClassInclude<ExtArgs> | null
    where?: StudentClassWhereInput
    orderBy?: StudentClassOrderByWithRelationInput | StudentClassOrderByWithRelationInput[]
    cursor?: StudentClassWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudentClassScalarFieldEnum | StudentClassScalarFieldEnum[]
  }

  /**
   * User.feedbacks
   */
  export type User$feedbacksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    where?: FeedbackWhereInput
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    cursor?: FeedbackWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FeedbackScalarFieldEnum | FeedbackScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Class
   */

  export type AggregateClass = {
    _count: ClassCountAggregateOutputType | null
    _min: ClassMinAggregateOutputType | null
    _max: ClassMaxAggregateOutputType | null
  }

  export type ClassMinAggregateOutputType = {
    id: string | null
    className: string | null
    accessCode: string | null
    createdBy: string | null
  }

  export type ClassMaxAggregateOutputType = {
    id: string | null
    className: string | null
    accessCode: string | null
    createdBy: string | null
  }

  export type ClassCountAggregateOutputType = {
    id: number
    className: number
    accessCode: number
    createdBy: number
    _all: number
  }


  export type ClassMinAggregateInputType = {
    id?: true
    className?: true
    accessCode?: true
    createdBy?: true
  }

  export type ClassMaxAggregateInputType = {
    id?: true
    className?: true
    accessCode?: true
    createdBy?: true
  }

  export type ClassCountAggregateInputType = {
    id?: true
    className?: true
    accessCode?: true
    createdBy?: true
    _all?: true
  }

  export type ClassAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Class to aggregate.
     */
    where?: ClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Classes to fetch.
     */
    orderBy?: ClassOrderByWithRelationInput | ClassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Classes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Classes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Classes
    **/
    _count?: true | ClassCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClassMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClassMaxAggregateInputType
  }

  export type GetClassAggregateType<T extends ClassAggregateArgs> = {
        [P in keyof T & keyof AggregateClass]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClass[P]>
      : GetScalarType<T[P], AggregateClass[P]>
  }




  export type ClassGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClassWhereInput
    orderBy?: ClassOrderByWithAggregationInput | ClassOrderByWithAggregationInput[]
    by: ClassScalarFieldEnum[] | ClassScalarFieldEnum
    having?: ClassScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClassCountAggregateInputType | true
    _min?: ClassMinAggregateInputType
    _max?: ClassMaxAggregateInputType
  }

  export type ClassGroupByOutputType = {
    id: string
    className: string
    accessCode: string
    createdBy: string
    _count: ClassCountAggregateOutputType | null
    _min: ClassMinAggregateOutputType | null
    _max: ClassMaxAggregateOutputType | null
  }

  type GetClassGroupByPayload<T extends ClassGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClassGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClassGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClassGroupByOutputType[P]>
            : GetScalarType<T[P], ClassGroupByOutputType[P]>
        }
      >
    >


  export type ClassSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    className?: boolean
    accessCode?: boolean
    createdBy?: boolean
    creator?: boolean | UserDefaultArgs<ExtArgs>
    studentClasses?: boolean | Class$studentClassesArgs<ExtArgs>
    teacherCourses?: boolean | Class$teacherCoursesArgs<ExtArgs>
    _count?: boolean | ClassCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["class"]>

  export type ClassSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    className?: boolean
    accessCode?: boolean
    createdBy?: boolean
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["class"]>

  export type ClassSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    className?: boolean
    accessCode?: boolean
    createdBy?: boolean
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["class"]>

  export type ClassSelectScalar = {
    id?: boolean
    className?: boolean
    accessCode?: boolean
    createdBy?: boolean
  }

  export type ClassOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "className" | "accessCode" | "createdBy", ExtArgs["result"]["class"]>
  export type ClassInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    creator?: boolean | UserDefaultArgs<ExtArgs>
    studentClasses?: boolean | Class$studentClassesArgs<ExtArgs>
    teacherCourses?: boolean | Class$teacherCoursesArgs<ExtArgs>
    _count?: boolean | ClassCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ClassIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ClassIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ClassPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Class"
    objects: {
      creator: Prisma.$UserPayload<ExtArgs>
      studentClasses: Prisma.$StudentClassPayload<ExtArgs>[]
      teacherCourses: Prisma.$TeacherCoursePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      className: string
      accessCode: string
      createdBy: string
    }, ExtArgs["result"]["class"]>
    composites: {}
  }

  type ClassGetPayload<S extends boolean | null | undefined | ClassDefaultArgs> = $Result.GetResult<Prisma.$ClassPayload, S>

  type ClassCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ClassFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ClassCountAggregateInputType | true
    }

  export interface ClassDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Class'], meta: { name: 'Class' } }
    /**
     * Find zero or one Class that matches the filter.
     * @param {ClassFindUniqueArgs} args - Arguments to find a Class
     * @example
     * // Get one Class
     * const class = await prisma.class.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ClassFindUniqueArgs>(args: SelectSubset<T, ClassFindUniqueArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Class that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ClassFindUniqueOrThrowArgs} args - Arguments to find a Class
     * @example
     * // Get one Class
     * const class = await prisma.class.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ClassFindUniqueOrThrowArgs>(args: SelectSubset<T, ClassFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Class that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassFindFirstArgs} args - Arguments to find a Class
     * @example
     * // Get one Class
     * const class = await prisma.class.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ClassFindFirstArgs>(args?: SelectSubset<T, ClassFindFirstArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Class that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassFindFirstOrThrowArgs} args - Arguments to find a Class
     * @example
     * // Get one Class
     * const class = await prisma.class.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ClassFindFirstOrThrowArgs>(args?: SelectSubset<T, ClassFindFirstOrThrowArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Classes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Classes
     * const classes = await prisma.class.findMany()
     * 
     * // Get first 10 Classes
     * const classes = await prisma.class.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const classWithIdOnly = await prisma.class.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ClassFindManyArgs>(args?: SelectSubset<T, ClassFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Class.
     * @param {ClassCreateArgs} args - Arguments to create a Class.
     * @example
     * // Create one Class
     * const Class = await prisma.class.create({
     *   data: {
     *     // ... data to create a Class
     *   }
     * })
     * 
     */
    create<T extends ClassCreateArgs>(args: SelectSubset<T, ClassCreateArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Classes.
     * @param {ClassCreateManyArgs} args - Arguments to create many Classes.
     * @example
     * // Create many Classes
     * const class = await prisma.class.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ClassCreateManyArgs>(args?: SelectSubset<T, ClassCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Classes and returns the data saved in the database.
     * @param {ClassCreateManyAndReturnArgs} args - Arguments to create many Classes.
     * @example
     * // Create many Classes
     * const class = await prisma.class.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Classes and only return the `id`
     * const classWithIdOnly = await prisma.class.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ClassCreateManyAndReturnArgs>(args?: SelectSubset<T, ClassCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Class.
     * @param {ClassDeleteArgs} args - Arguments to delete one Class.
     * @example
     * // Delete one Class
     * const Class = await prisma.class.delete({
     *   where: {
     *     // ... filter to delete one Class
     *   }
     * })
     * 
     */
    delete<T extends ClassDeleteArgs>(args: SelectSubset<T, ClassDeleteArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Class.
     * @param {ClassUpdateArgs} args - Arguments to update one Class.
     * @example
     * // Update one Class
     * const class = await prisma.class.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ClassUpdateArgs>(args: SelectSubset<T, ClassUpdateArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Classes.
     * @param {ClassDeleteManyArgs} args - Arguments to filter Classes to delete.
     * @example
     * // Delete a few Classes
     * const { count } = await prisma.class.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ClassDeleteManyArgs>(args?: SelectSubset<T, ClassDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Classes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Classes
     * const class = await prisma.class.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ClassUpdateManyArgs>(args: SelectSubset<T, ClassUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Classes and returns the data updated in the database.
     * @param {ClassUpdateManyAndReturnArgs} args - Arguments to update many Classes.
     * @example
     * // Update many Classes
     * const class = await prisma.class.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Classes and only return the `id`
     * const classWithIdOnly = await prisma.class.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ClassUpdateManyAndReturnArgs>(args: SelectSubset<T, ClassUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Class.
     * @param {ClassUpsertArgs} args - Arguments to update or create a Class.
     * @example
     * // Update or create a Class
     * const class = await prisma.class.upsert({
     *   create: {
     *     // ... data to create a Class
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Class we want to update
     *   }
     * })
     */
    upsert<T extends ClassUpsertArgs>(args: SelectSubset<T, ClassUpsertArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Classes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassCountArgs} args - Arguments to filter Classes to count.
     * @example
     * // Count the number of Classes
     * const count = await prisma.class.count({
     *   where: {
     *     // ... the filter for the Classes we want to count
     *   }
     * })
    **/
    count<T extends ClassCountArgs>(
      args?: Subset<T, ClassCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClassCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Class.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClassAggregateArgs>(args: Subset<T, ClassAggregateArgs>): Prisma.PrismaPromise<GetClassAggregateType<T>>

    /**
     * Group by Class.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClassGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClassGroupByArgs['orderBy'] }
        : { orderBy?: ClassGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClassGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClassGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Class model
   */
  readonly fields: ClassFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Class.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ClassClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    creator<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    studentClasses<T extends Class$studentClassesArgs<ExtArgs> = {}>(args?: Subset<T, Class$studentClassesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentClassPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    teacherCourses<T extends Class$teacherCoursesArgs<ExtArgs> = {}>(args?: Subset<T, Class$teacherCoursesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeacherCoursePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Class model
   */
  interface ClassFieldRefs {
    readonly id: FieldRef<"Class", 'String'>
    readonly className: FieldRef<"Class", 'String'>
    readonly accessCode: FieldRef<"Class", 'String'>
    readonly createdBy: FieldRef<"Class", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Class findUnique
   */
  export type ClassFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * Filter, which Class to fetch.
     */
    where: ClassWhereUniqueInput
  }

  /**
   * Class findUniqueOrThrow
   */
  export type ClassFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * Filter, which Class to fetch.
     */
    where: ClassWhereUniqueInput
  }

  /**
   * Class findFirst
   */
  export type ClassFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * Filter, which Class to fetch.
     */
    where?: ClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Classes to fetch.
     */
    orderBy?: ClassOrderByWithRelationInput | ClassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Classes.
     */
    cursor?: ClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Classes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Classes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Classes.
     */
    distinct?: ClassScalarFieldEnum | ClassScalarFieldEnum[]
  }

  /**
   * Class findFirstOrThrow
   */
  export type ClassFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * Filter, which Class to fetch.
     */
    where?: ClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Classes to fetch.
     */
    orderBy?: ClassOrderByWithRelationInput | ClassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Classes.
     */
    cursor?: ClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Classes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Classes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Classes.
     */
    distinct?: ClassScalarFieldEnum | ClassScalarFieldEnum[]
  }

  /**
   * Class findMany
   */
  export type ClassFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * Filter, which Classes to fetch.
     */
    where?: ClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Classes to fetch.
     */
    orderBy?: ClassOrderByWithRelationInput | ClassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Classes.
     */
    cursor?: ClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Classes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Classes.
     */
    skip?: number
    distinct?: ClassScalarFieldEnum | ClassScalarFieldEnum[]
  }

  /**
   * Class create
   */
  export type ClassCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * The data needed to create a Class.
     */
    data: XOR<ClassCreateInput, ClassUncheckedCreateInput>
  }

  /**
   * Class createMany
   */
  export type ClassCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Classes.
     */
    data: ClassCreateManyInput | ClassCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Class createManyAndReturn
   */
  export type ClassCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * The data used to create many Classes.
     */
    data: ClassCreateManyInput | ClassCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Class update
   */
  export type ClassUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * The data needed to update a Class.
     */
    data: XOR<ClassUpdateInput, ClassUncheckedUpdateInput>
    /**
     * Choose, which Class to update.
     */
    where: ClassWhereUniqueInput
  }

  /**
   * Class updateMany
   */
  export type ClassUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Classes.
     */
    data: XOR<ClassUpdateManyMutationInput, ClassUncheckedUpdateManyInput>
    /**
     * Filter which Classes to update
     */
    where?: ClassWhereInput
    /**
     * Limit how many Classes to update.
     */
    limit?: number
  }

  /**
   * Class updateManyAndReturn
   */
  export type ClassUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * The data used to update Classes.
     */
    data: XOR<ClassUpdateManyMutationInput, ClassUncheckedUpdateManyInput>
    /**
     * Filter which Classes to update
     */
    where?: ClassWhereInput
    /**
     * Limit how many Classes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Class upsert
   */
  export type ClassUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * The filter to search for the Class to update in case it exists.
     */
    where: ClassWhereUniqueInput
    /**
     * In case the Class found by the `where` argument doesn't exist, create a new Class with this data.
     */
    create: XOR<ClassCreateInput, ClassUncheckedCreateInput>
    /**
     * In case the Class was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClassUpdateInput, ClassUncheckedUpdateInput>
  }

  /**
   * Class delete
   */
  export type ClassDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * Filter which Class to delete.
     */
    where: ClassWhereUniqueInput
  }

  /**
   * Class deleteMany
   */
  export type ClassDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Classes to delete
     */
    where?: ClassWhereInput
    /**
     * Limit how many Classes to delete.
     */
    limit?: number
  }

  /**
   * Class.studentClasses
   */
  export type Class$studentClassesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentClass
     */
    select?: StudentClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentClass
     */
    omit?: StudentClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentClassInclude<ExtArgs> | null
    where?: StudentClassWhereInput
    orderBy?: StudentClassOrderByWithRelationInput | StudentClassOrderByWithRelationInput[]
    cursor?: StudentClassWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudentClassScalarFieldEnum | StudentClassScalarFieldEnum[]
  }

  /**
   * Class.teacherCourses
   */
  export type Class$teacherCoursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeacherCourse
     */
    select?: TeacherCourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeacherCourse
     */
    omit?: TeacherCourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherCourseInclude<ExtArgs> | null
    where?: TeacherCourseWhereInput
    orderBy?: TeacherCourseOrderByWithRelationInput | TeacherCourseOrderByWithRelationInput[]
    cursor?: TeacherCourseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TeacherCourseScalarFieldEnum | TeacherCourseScalarFieldEnum[]
  }

  /**
   * Class without action
   */
  export type ClassDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
  }


  /**
   * Model StudentClass
   */

  export type AggregateStudentClass = {
    _count: StudentClassCountAggregateOutputType | null
    _min: StudentClassMinAggregateOutputType | null
    _max: StudentClassMaxAggregateOutputType | null
  }

  export type StudentClassMinAggregateOutputType = {
    id: string | null
    studentId: string | null
    classId: string | null
  }

  export type StudentClassMaxAggregateOutputType = {
    id: string | null
    studentId: string | null
    classId: string | null
  }

  export type StudentClassCountAggregateOutputType = {
    id: number
    studentId: number
    classId: number
    _all: number
  }


  export type StudentClassMinAggregateInputType = {
    id?: true
    studentId?: true
    classId?: true
  }

  export type StudentClassMaxAggregateInputType = {
    id?: true
    studentId?: true
    classId?: true
  }

  export type StudentClassCountAggregateInputType = {
    id?: true
    studentId?: true
    classId?: true
    _all?: true
  }

  export type StudentClassAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StudentClass to aggregate.
     */
    where?: StudentClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentClasses to fetch.
     */
    orderBy?: StudentClassOrderByWithRelationInput | StudentClassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StudentClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentClasses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentClasses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StudentClasses
    **/
    _count?: true | StudentClassCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StudentClassMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StudentClassMaxAggregateInputType
  }

  export type GetStudentClassAggregateType<T extends StudentClassAggregateArgs> = {
        [P in keyof T & keyof AggregateStudentClass]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStudentClass[P]>
      : GetScalarType<T[P], AggregateStudentClass[P]>
  }




  export type StudentClassGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentClassWhereInput
    orderBy?: StudentClassOrderByWithAggregationInput | StudentClassOrderByWithAggregationInput[]
    by: StudentClassScalarFieldEnum[] | StudentClassScalarFieldEnum
    having?: StudentClassScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StudentClassCountAggregateInputType | true
    _min?: StudentClassMinAggregateInputType
    _max?: StudentClassMaxAggregateInputType
  }

  export type StudentClassGroupByOutputType = {
    id: string
    studentId: string
    classId: string
    _count: StudentClassCountAggregateOutputType | null
    _min: StudentClassMinAggregateOutputType | null
    _max: StudentClassMaxAggregateOutputType | null
  }

  type GetStudentClassGroupByPayload<T extends StudentClassGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StudentClassGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StudentClassGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StudentClassGroupByOutputType[P]>
            : GetScalarType<T[P], StudentClassGroupByOutputType[P]>
        }
      >
    >


  export type StudentClassSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studentId?: boolean
    classId?: boolean
    student?: boolean | UserDefaultArgs<ExtArgs>
    class?: boolean | ClassDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["studentClass"]>

  export type StudentClassSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studentId?: boolean
    classId?: boolean
    student?: boolean | UserDefaultArgs<ExtArgs>
    class?: boolean | ClassDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["studentClass"]>

  export type StudentClassSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studentId?: boolean
    classId?: boolean
    student?: boolean | UserDefaultArgs<ExtArgs>
    class?: boolean | ClassDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["studentClass"]>

  export type StudentClassSelectScalar = {
    id?: boolean
    studentId?: boolean
    classId?: boolean
  }

  export type StudentClassOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "studentId" | "classId", ExtArgs["result"]["studentClass"]>
  export type StudentClassInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | UserDefaultArgs<ExtArgs>
    class?: boolean | ClassDefaultArgs<ExtArgs>
  }
  export type StudentClassIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | UserDefaultArgs<ExtArgs>
    class?: boolean | ClassDefaultArgs<ExtArgs>
  }
  export type StudentClassIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | UserDefaultArgs<ExtArgs>
    class?: boolean | ClassDefaultArgs<ExtArgs>
  }

  export type $StudentClassPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StudentClass"
    objects: {
      student: Prisma.$UserPayload<ExtArgs>
      class: Prisma.$ClassPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      studentId: string
      classId: string
    }, ExtArgs["result"]["studentClass"]>
    composites: {}
  }

  type StudentClassGetPayload<S extends boolean | null | undefined | StudentClassDefaultArgs> = $Result.GetResult<Prisma.$StudentClassPayload, S>

  type StudentClassCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StudentClassFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StudentClassCountAggregateInputType | true
    }

  export interface StudentClassDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StudentClass'], meta: { name: 'StudentClass' } }
    /**
     * Find zero or one StudentClass that matches the filter.
     * @param {StudentClassFindUniqueArgs} args - Arguments to find a StudentClass
     * @example
     * // Get one StudentClass
     * const studentClass = await prisma.studentClass.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StudentClassFindUniqueArgs>(args: SelectSubset<T, StudentClassFindUniqueArgs<ExtArgs>>): Prisma__StudentClassClient<$Result.GetResult<Prisma.$StudentClassPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one StudentClass that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StudentClassFindUniqueOrThrowArgs} args - Arguments to find a StudentClass
     * @example
     * // Get one StudentClass
     * const studentClass = await prisma.studentClass.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StudentClassFindUniqueOrThrowArgs>(args: SelectSubset<T, StudentClassFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StudentClassClient<$Result.GetResult<Prisma.$StudentClassPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StudentClass that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentClassFindFirstArgs} args - Arguments to find a StudentClass
     * @example
     * // Get one StudentClass
     * const studentClass = await prisma.studentClass.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StudentClassFindFirstArgs>(args?: SelectSubset<T, StudentClassFindFirstArgs<ExtArgs>>): Prisma__StudentClassClient<$Result.GetResult<Prisma.$StudentClassPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StudentClass that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentClassFindFirstOrThrowArgs} args - Arguments to find a StudentClass
     * @example
     * // Get one StudentClass
     * const studentClass = await prisma.studentClass.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StudentClassFindFirstOrThrowArgs>(args?: SelectSubset<T, StudentClassFindFirstOrThrowArgs<ExtArgs>>): Prisma__StudentClassClient<$Result.GetResult<Prisma.$StudentClassPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more StudentClasses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentClassFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StudentClasses
     * const studentClasses = await prisma.studentClass.findMany()
     * 
     * // Get first 10 StudentClasses
     * const studentClasses = await prisma.studentClass.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const studentClassWithIdOnly = await prisma.studentClass.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StudentClassFindManyArgs>(args?: SelectSubset<T, StudentClassFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentClassPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a StudentClass.
     * @param {StudentClassCreateArgs} args - Arguments to create a StudentClass.
     * @example
     * // Create one StudentClass
     * const StudentClass = await prisma.studentClass.create({
     *   data: {
     *     // ... data to create a StudentClass
     *   }
     * })
     * 
     */
    create<T extends StudentClassCreateArgs>(args: SelectSubset<T, StudentClassCreateArgs<ExtArgs>>): Prisma__StudentClassClient<$Result.GetResult<Prisma.$StudentClassPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many StudentClasses.
     * @param {StudentClassCreateManyArgs} args - Arguments to create many StudentClasses.
     * @example
     * // Create many StudentClasses
     * const studentClass = await prisma.studentClass.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StudentClassCreateManyArgs>(args?: SelectSubset<T, StudentClassCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many StudentClasses and returns the data saved in the database.
     * @param {StudentClassCreateManyAndReturnArgs} args - Arguments to create many StudentClasses.
     * @example
     * // Create many StudentClasses
     * const studentClass = await prisma.studentClass.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many StudentClasses and only return the `id`
     * const studentClassWithIdOnly = await prisma.studentClass.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StudentClassCreateManyAndReturnArgs>(args?: SelectSubset<T, StudentClassCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentClassPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a StudentClass.
     * @param {StudentClassDeleteArgs} args - Arguments to delete one StudentClass.
     * @example
     * // Delete one StudentClass
     * const StudentClass = await prisma.studentClass.delete({
     *   where: {
     *     // ... filter to delete one StudentClass
     *   }
     * })
     * 
     */
    delete<T extends StudentClassDeleteArgs>(args: SelectSubset<T, StudentClassDeleteArgs<ExtArgs>>): Prisma__StudentClassClient<$Result.GetResult<Prisma.$StudentClassPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one StudentClass.
     * @param {StudentClassUpdateArgs} args - Arguments to update one StudentClass.
     * @example
     * // Update one StudentClass
     * const studentClass = await prisma.studentClass.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StudentClassUpdateArgs>(args: SelectSubset<T, StudentClassUpdateArgs<ExtArgs>>): Prisma__StudentClassClient<$Result.GetResult<Prisma.$StudentClassPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more StudentClasses.
     * @param {StudentClassDeleteManyArgs} args - Arguments to filter StudentClasses to delete.
     * @example
     * // Delete a few StudentClasses
     * const { count } = await prisma.studentClass.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StudentClassDeleteManyArgs>(args?: SelectSubset<T, StudentClassDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StudentClasses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentClassUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StudentClasses
     * const studentClass = await prisma.studentClass.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StudentClassUpdateManyArgs>(args: SelectSubset<T, StudentClassUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StudentClasses and returns the data updated in the database.
     * @param {StudentClassUpdateManyAndReturnArgs} args - Arguments to update many StudentClasses.
     * @example
     * // Update many StudentClasses
     * const studentClass = await prisma.studentClass.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more StudentClasses and only return the `id`
     * const studentClassWithIdOnly = await prisma.studentClass.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StudentClassUpdateManyAndReturnArgs>(args: SelectSubset<T, StudentClassUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentClassPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one StudentClass.
     * @param {StudentClassUpsertArgs} args - Arguments to update or create a StudentClass.
     * @example
     * // Update or create a StudentClass
     * const studentClass = await prisma.studentClass.upsert({
     *   create: {
     *     // ... data to create a StudentClass
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StudentClass we want to update
     *   }
     * })
     */
    upsert<T extends StudentClassUpsertArgs>(args: SelectSubset<T, StudentClassUpsertArgs<ExtArgs>>): Prisma__StudentClassClient<$Result.GetResult<Prisma.$StudentClassPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of StudentClasses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentClassCountArgs} args - Arguments to filter StudentClasses to count.
     * @example
     * // Count the number of StudentClasses
     * const count = await prisma.studentClass.count({
     *   where: {
     *     // ... the filter for the StudentClasses we want to count
     *   }
     * })
    **/
    count<T extends StudentClassCountArgs>(
      args?: Subset<T, StudentClassCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StudentClassCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StudentClass.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentClassAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StudentClassAggregateArgs>(args: Subset<T, StudentClassAggregateArgs>): Prisma.PrismaPromise<GetStudentClassAggregateType<T>>

    /**
     * Group by StudentClass.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentClassGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StudentClassGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StudentClassGroupByArgs['orderBy'] }
        : { orderBy?: StudentClassGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StudentClassGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStudentClassGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StudentClass model
   */
  readonly fields: StudentClassFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StudentClass.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StudentClassClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    student<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    class<T extends ClassDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClassDefaultArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the StudentClass model
   */
  interface StudentClassFieldRefs {
    readonly id: FieldRef<"StudentClass", 'String'>
    readonly studentId: FieldRef<"StudentClass", 'String'>
    readonly classId: FieldRef<"StudentClass", 'String'>
  }
    

  // Custom InputTypes
  /**
   * StudentClass findUnique
   */
  export type StudentClassFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentClass
     */
    select?: StudentClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentClass
     */
    omit?: StudentClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentClassInclude<ExtArgs> | null
    /**
     * Filter, which StudentClass to fetch.
     */
    where: StudentClassWhereUniqueInput
  }

  /**
   * StudentClass findUniqueOrThrow
   */
  export type StudentClassFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentClass
     */
    select?: StudentClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentClass
     */
    omit?: StudentClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentClassInclude<ExtArgs> | null
    /**
     * Filter, which StudentClass to fetch.
     */
    where: StudentClassWhereUniqueInput
  }

  /**
   * StudentClass findFirst
   */
  export type StudentClassFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentClass
     */
    select?: StudentClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentClass
     */
    omit?: StudentClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentClassInclude<ExtArgs> | null
    /**
     * Filter, which StudentClass to fetch.
     */
    where?: StudentClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentClasses to fetch.
     */
    orderBy?: StudentClassOrderByWithRelationInput | StudentClassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StudentClasses.
     */
    cursor?: StudentClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentClasses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentClasses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StudentClasses.
     */
    distinct?: StudentClassScalarFieldEnum | StudentClassScalarFieldEnum[]
  }

  /**
   * StudentClass findFirstOrThrow
   */
  export type StudentClassFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentClass
     */
    select?: StudentClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentClass
     */
    omit?: StudentClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentClassInclude<ExtArgs> | null
    /**
     * Filter, which StudentClass to fetch.
     */
    where?: StudentClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentClasses to fetch.
     */
    orderBy?: StudentClassOrderByWithRelationInput | StudentClassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StudentClasses.
     */
    cursor?: StudentClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentClasses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentClasses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StudentClasses.
     */
    distinct?: StudentClassScalarFieldEnum | StudentClassScalarFieldEnum[]
  }

  /**
   * StudentClass findMany
   */
  export type StudentClassFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentClass
     */
    select?: StudentClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentClass
     */
    omit?: StudentClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentClassInclude<ExtArgs> | null
    /**
     * Filter, which StudentClasses to fetch.
     */
    where?: StudentClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentClasses to fetch.
     */
    orderBy?: StudentClassOrderByWithRelationInput | StudentClassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StudentClasses.
     */
    cursor?: StudentClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentClasses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentClasses.
     */
    skip?: number
    distinct?: StudentClassScalarFieldEnum | StudentClassScalarFieldEnum[]
  }

  /**
   * StudentClass create
   */
  export type StudentClassCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentClass
     */
    select?: StudentClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentClass
     */
    omit?: StudentClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentClassInclude<ExtArgs> | null
    /**
     * The data needed to create a StudentClass.
     */
    data: XOR<StudentClassCreateInput, StudentClassUncheckedCreateInput>
  }

  /**
   * StudentClass createMany
   */
  export type StudentClassCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StudentClasses.
     */
    data: StudentClassCreateManyInput | StudentClassCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * StudentClass createManyAndReturn
   */
  export type StudentClassCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentClass
     */
    select?: StudentClassSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StudentClass
     */
    omit?: StudentClassOmit<ExtArgs> | null
    /**
     * The data used to create many StudentClasses.
     */
    data: StudentClassCreateManyInput | StudentClassCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentClassIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * StudentClass update
   */
  export type StudentClassUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentClass
     */
    select?: StudentClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentClass
     */
    omit?: StudentClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentClassInclude<ExtArgs> | null
    /**
     * The data needed to update a StudentClass.
     */
    data: XOR<StudentClassUpdateInput, StudentClassUncheckedUpdateInput>
    /**
     * Choose, which StudentClass to update.
     */
    where: StudentClassWhereUniqueInput
  }

  /**
   * StudentClass updateMany
   */
  export type StudentClassUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StudentClasses.
     */
    data: XOR<StudentClassUpdateManyMutationInput, StudentClassUncheckedUpdateManyInput>
    /**
     * Filter which StudentClasses to update
     */
    where?: StudentClassWhereInput
    /**
     * Limit how many StudentClasses to update.
     */
    limit?: number
  }

  /**
   * StudentClass updateManyAndReturn
   */
  export type StudentClassUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentClass
     */
    select?: StudentClassSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StudentClass
     */
    omit?: StudentClassOmit<ExtArgs> | null
    /**
     * The data used to update StudentClasses.
     */
    data: XOR<StudentClassUpdateManyMutationInput, StudentClassUncheckedUpdateManyInput>
    /**
     * Filter which StudentClasses to update
     */
    where?: StudentClassWhereInput
    /**
     * Limit how many StudentClasses to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentClassIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * StudentClass upsert
   */
  export type StudentClassUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentClass
     */
    select?: StudentClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentClass
     */
    omit?: StudentClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentClassInclude<ExtArgs> | null
    /**
     * The filter to search for the StudentClass to update in case it exists.
     */
    where: StudentClassWhereUniqueInput
    /**
     * In case the StudentClass found by the `where` argument doesn't exist, create a new StudentClass with this data.
     */
    create: XOR<StudentClassCreateInput, StudentClassUncheckedCreateInput>
    /**
     * In case the StudentClass was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StudentClassUpdateInput, StudentClassUncheckedUpdateInput>
  }

  /**
   * StudentClass delete
   */
  export type StudentClassDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentClass
     */
    select?: StudentClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentClass
     */
    omit?: StudentClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentClassInclude<ExtArgs> | null
    /**
     * Filter which StudentClass to delete.
     */
    where: StudentClassWhereUniqueInput
  }

  /**
   * StudentClass deleteMany
   */
  export type StudentClassDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StudentClasses to delete
     */
    where?: StudentClassWhereInput
    /**
     * Limit how many StudentClasses to delete.
     */
    limit?: number
  }

  /**
   * StudentClass without action
   */
  export type StudentClassDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentClass
     */
    select?: StudentClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentClass
     */
    omit?: StudentClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentClassInclude<ExtArgs> | null
  }


  /**
   * Model Course
   */

  export type AggregateCourse = {
    _count: CourseCountAggregateOutputType | null
    _min: CourseMinAggregateOutputType | null
    _max: CourseMaxAggregateOutputType | null
  }

  export type CourseMinAggregateOutputType = {
    id: string | null
    courseName: string | null
    courseCode: string | null
    courseType: $Enums.CourseType | null
    createdBy: string | null
  }

  export type CourseMaxAggregateOutputType = {
    id: string | null
    courseName: string | null
    courseCode: string | null
    courseType: $Enums.CourseType | null
    createdBy: string | null
  }

  export type CourseCountAggregateOutputType = {
    id: number
    courseName: number
    courseCode: number
    courseType: number
    createdBy: number
    _all: number
  }


  export type CourseMinAggregateInputType = {
    id?: true
    courseName?: true
    courseCode?: true
    courseType?: true
    createdBy?: true
  }

  export type CourseMaxAggregateInputType = {
    id?: true
    courseName?: true
    courseCode?: true
    courseType?: true
    createdBy?: true
  }

  export type CourseCountAggregateInputType = {
    id?: true
    courseName?: true
    courseCode?: true
    courseType?: true
    createdBy?: true
    _all?: true
  }

  export type CourseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Course to aggregate.
     */
    where?: CourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Courses
    **/
    _count?: true | CourseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CourseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CourseMaxAggregateInputType
  }

  export type GetCourseAggregateType<T extends CourseAggregateArgs> = {
        [P in keyof T & keyof AggregateCourse]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCourse[P]>
      : GetScalarType<T[P], AggregateCourse[P]>
  }




  export type CourseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CourseWhereInput
    orderBy?: CourseOrderByWithAggregationInput | CourseOrderByWithAggregationInput[]
    by: CourseScalarFieldEnum[] | CourseScalarFieldEnum
    having?: CourseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CourseCountAggregateInputType | true
    _min?: CourseMinAggregateInputType
    _max?: CourseMaxAggregateInputType
  }

  export type CourseGroupByOutputType = {
    id: string
    courseName: string
    courseCode: string
    courseType: $Enums.CourseType
    createdBy: string
    _count: CourseCountAggregateOutputType | null
    _min: CourseMinAggregateOutputType | null
    _max: CourseMaxAggregateOutputType | null
  }

  type GetCourseGroupByPayload<T extends CourseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CourseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CourseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CourseGroupByOutputType[P]>
            : GetScalarType<T[P], CourseGroupByOutputType[P]>
        }
      >
    >


  export type CourseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    courseName?: boolean
    courseCode?: boolean
    courseType?: boolean
    createdBy?: boolean
    creator?: boolean | UserDefaultArgs<ExtArgs>
    teacherCourses?: boolean | Course$teacherCoursesArgs<ExtArgs>
    _count?: boolean | CourseCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["course"]>

  export type CourseSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    courseName?: boolean
    courseCode?: boolean
    courseType?: boolean
    createdBy?: boolean
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["course"]>

  export type CourseSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    courseName?: boolean
    courseCode?: boolean
    courseType?: boolean
    createdBy?: boolean
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["course"]>

  export type CourseSelectScalar = {
    id?: boolean
    courseName?: boolean
    courseCode?: boolean
    courseType?: boolean
    createdBy?: boolean
  }

  export type CourseOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "courseName" | "courseCode" | "courseType" | "createdBy", ExtArgs["result"]["course"]>
  export type CourseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    creator?: boolean | UserDefaultArgs<ExtArgs>
    teacherCourses?: boolean | Course$teacherCoursesArgs<ExtArgs>
    _count?: boolean | CourseCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CourseIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type CourseIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $CoursePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Course"
    objects: {
      creator: Prisma.$UserPayload<ExtArgs>
      teacherCourses: Prisma.$TeacherCoursePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      courseName: string
      courseCode: string
      courseType: $Enums.CourseType
      createdBy: string
    }, ExtArgs["result"]["course"]>
    composites: {}
  }

  type CourseGetPayload<S extends boolean | null | undefined | CourseDefaultArgs> = $Result.GetResult<Prisma.$CoursePayload, S>

  type CourseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CourseFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CourseCountAggregateInputType | true
    }

  export interface CourseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Course'], meta: { name: 'Course' } }
    /**
     * Find zero or one Course that matches the filter.
     * @param {CourseFindUniqueArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CourseFindUniqueArgs>(args: SelectSubset<T, CourseFindUniqueArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Course that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CourseFindUniqueOrThrowArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CourseFindUniqueOrThrowArgs>(args: SelectSubset<T, CourseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Course that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseFindFirstArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CourseFindFirstArgs>(args?: SelectSubset<T, CourseFindFirstArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Course that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseFindFirstOrThrowArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CourseFindFirstOrThrowArgs>(args?: SelectSubset<T, CourseFindFirstOrThrowArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Courses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Courses
     * const courses = await prisma.course.findMany()
     * 
     * // Get first 10 Courses
     * const courses = await prisma.course.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const courseWithIdOnly = await prisma.course.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CourseFindManyArgs>(args?: SelectSubset<T, CourseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Course.
     * @param {CourseCreateArgs} args - Arguments to create a Course.
     * @example
     * // Create one Course
     * const Course = await prisma.course.create({
     *   data: {
     *     // ... data to create a Course
     *   }
     * })
     * 
     */
    create<T extends CourseCreateArgs>(args: SelectSubset<T, CourseCreateArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Courses.
     * @param {CourseCreateManyArgs} args - Arguments to create many Courses.
     * @example
     * // Create many Courses
     * const course = await prisma.course.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CourseCreateManyArgs>(args?: SelectSubset<T, CourseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Courses and returns the data saved in the database.
     * @param {CourseCreateManyAndReturnArgs} args - Arguments to create many Courses.
     * @example
     * // Create many Courses
     * const course = await prisma.course.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Courses and only return the `id`
     * const courseWithIdOnly = await prisma.course.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CourseCreateManyAndReturnArgs>(args?: SelectSubset<T, CourseCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Course.
     * @param {CourseDeleteArgs} args - Arguments to delete one Course.
     * @example
     * // Delete one Course
     * const Course = await prisma.course.delete({
     *   where: {
     *     // ... filter to delete one Course
     *   }
     * })
     * 
     */
    delete<T extends CourseDeleteArgs>(args: SelectSubset<T, CourseDeleteArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Course.
     * @param {CourseUpdateArgs} args - Arguments to update one Course.
     * @example
     * // Update one Course
     * const course = await prisma.course.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CourseUpdateArgs>(args: SelectSubset<T, CourseUpdateArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Courses.
     * @param {CourseDeleteManyArgs} args - Arguments to filter Courses to delete.
     * @example
     * // Delete a few Courses
     * const { count } = await prisma.course.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CourseDeleteManyArgs>(args?: SelectSubset<T, CourseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Courses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Courses
     * const course = await prisma.course.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CourseUpdateManyArgs>(args: SelectSubset<T, CourseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Courses and returns the data updated in the database.
     * @param {CourseUpdateManyAndReturnArgs} args - Arguments to update many Courses.
     * @example
     * // Update many Courses
     * const course = await prisma.course.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Courses and only return the `id`
     * const courseWithIdOnly = await prisma.course.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CourseUpdateManyAndReturnArgs>(args: SelectSubset<T, CourseUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Course.
     * @param {CourseUpsertArgs} args - Arguments to update or create a Course.
     * @example
     * // Update or create a Course
     * const course = await prisma.course.upsert({
     *   create: {
     *     // ... data to create a Course
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Course we want to update
     *   }
     * })
     */
    upsert<T extends CourseUpsertArgs>(args: SelectSubset<T, CourseUpsertArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Courses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseCountArgs} args - Arguments to filter Courses to count.
     * @example
     * // Count the number of Courses
     * const count = await prisma.course.count({
     *   where: {
     *     // ... the filter for the Courses we want to count
     *   }
     * })
    **/
    count<T extends CourseCountArgs>(
      args?: Subset<T, CourseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CourseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Course.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CourseAggregateArgs>(args: Subset<T, CourseAggregateArgs>): Prisma.PrismaPromise<GetCourseAggregateType<T>>

    /**
     * Group by Course.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CourseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CourseGroupByArgs['orderBy'] }
        : { orderBy?: CourseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CourseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCourseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Course model
   */
  readonly fields: CourseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Course.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CourseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    creator<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    teacherCourses<T extends Course$teacherCoursesArgs<ExtArgs> = {}>(args?: Subset<T, Course$teacherCoursesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeacherCoursePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Course model
   */
  interface CourseFieldRefs {
    readonly id: FieldRef<"Course", 'String'>
    readonly courseName: FieldRef<"Course", 'String'>
    readonly courseCode: FieldRef<"Course", 'String'>
    readonly courseType: FieldRef<"Course", 'CourseType'>
    readonly createdBy: FieldRef<"Course", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Course findUnique
   */
  export type CourseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Course to fetch.
     */
    where: CourseWhereUniqueInput
  }

  /**
   * Course findUniqueOrThrow
   */
  export type CourseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Course to fetch.
     */
    where: CourseWhereUniqueInput
  }

  /**
   * Course findFirst
   */
  export type CourseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Course to fetch.
     */
    where?: CourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Courses.
     */
    cursor?: CourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Courses.
     */
    distinct?: CourseScalarFieldEnum | CourseScalarFieldEnum[]
  }

  /**
   * Course findFirstOrThrow
   */
  export type CourseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Course to fetch.
     */
    where?: CourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Courses.
     */
    cursor?: CourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Courses.
     */
    distinct?: CourseScalarFieldEnum | CourseScalarFieldEnum[]
  }

  /**
   * Course findMany
   */
  export type CourseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Courses to fetch.
     */
    where?: CourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Courses.
     */
    cursor?: CourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    distinct?: CourseScalarFieldEnum | CourseScalarFieldEnum[]
  }

  /**
   * Course create
   */
  export type CourseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * The data needed to create a Course.
     */
    data: XOR<CourseCreateInput, CourseUncheckedCreateInput>
  }

  /**
   * Course createMany
   */
  export type CourseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Courses.
     */
    data: CourseCreateManyInput | CourseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Course createManyAndReturn
   */
  export type CourseCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * The data used to create many Courses.
     */
    data: CourseCreateManyInput | CourseCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Course update
   */
  export type CourseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * The data needed to update a Course.
     */
    data: XOR<CourseUpdateInput, CourseUncheckedUpdateInput>
    /**
     * Choose, which Course to update.
     */
    where: CourseWhereUniqueInput
  }

  /**
   * Course updateMany
   */
  export type CourseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Courses.
     */
    data: XOR<CourseUpdateManyMutationInput, CourseUncheckedUpdateManyInput>
    /**
     * Filter which Courses to update
     */
    where?: CourseWhereInput
    /**
     * Limit how many Courses to update.
     */
    limit?: number
  }

  /**
   * Course updateManyAndReturn
   */
  export type CourseUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * The data used to update Courses.
     */
    data: XOR<CourseUpdateManyMutationInput, CourseUncheckedUpdateManyInput>
    /**
     * Filter which Courses to update
     */
    where?: CourseWhereInput
    /**
     * Limit how many Courses to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Course upsert
   */
  export type CourseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * The filter to search for the Course to update in case it exists.
     */
    where: CourseWhereUniqueInput
    /**
     * In case the Course found by the `where` argument doesn't exist, create a new Course with this data.
     */
    create: XOR<CourseCreateInput, CourseUncheckedCreateInput>
    /**
     * In case the Course was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CourseUpdateInput, CourseUncheckedUpdateInput>
  }

  /**
   * Course delete
   */
  export type CourseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter which Course to delete.
     */
    where: CourseWhereUniqueInput
  }

  /**
   * Course deleteMany
   */
  export type CourseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Courses to delete
     */
    where?: CourseWhereInput
    /**
     * Limit how many Courses to delete.
     */
    limit?: number
  }

  /**
   * Course.teacherCourses
   */
  export type Course$teacherCoursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeacherCourse
     */
    select?: TeacherCourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeacherCourse
     */
    omit?: TeacherCourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherCourseInclude<ExtArgs> | null
    where?: TeacherCourseWhereInput
    orderBy?: TeacherCourseOrderByWithRelationInput | TeacherCourseOrderByWithRelationInput[]
    cursor?: TeacherCourseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TeacherCourseScalarFieldEnum | TeacherCourseScalarFieldEnum[]
  }

  /**
   * Course without action
   */
  export type CourseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
  }


  /**
   * Model Teacher
   */

  export type AggregateTeacher = {
    _count: TeacherCountAggregateOutputType | null
    _min: TeacherMinAggregateOutputType | null
    _max: TeacherMaxAggregateOutputType | null
  }

  export type TeacherMinAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    assignedBy: string | null
  }

  export type TeacherMaxAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    assignedBy: string | null
  }

  export type TeacherCountAggregateOutputType = {
    id: number
    name: number
    email: number
    assignedBy: number
    _all: number
  }


  export type TeacherMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    assignedBy?: true
  }

  export type TeacherMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    assignedBy?: true
  }

  export type TeacherCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    assignedBy?: true
    _all?: true
  }

  export type TeacherAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Teacher to aggregate.
     */
    where?: TeacherWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teachers to fetch.
     */
    orderBy?: TeacherOrderByWithRelationInput | TeacherOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TeacherWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teachers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teachers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Teachers
    **/
    _count?: true | TeacherCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TeacherMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TeacherMaxAggregateInputType
  }

  export type GetTeacherAggregateType<T extends TeacherAggregateArgs> = {
        [P in keyof T & keyof AggregateTeacher]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTeacher[P]>
      : GetScalarType<T[P], AggregateTeacher[P]>
  }




  export type TeacherGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeacherWhereInput
    orderBy?: TeacherOrderByWithAggregationInput | TeacherOrderByWithAggregationInput[]
    by: TeacherScalarFieldEnum[] | TeacherScalarFieldEnum
    having?: TeacherScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TeacherCountAggregateInputType | true
    _min?: TeacherMinAggregateInputType
    _max?: TeacherMaxAggregateInputType
  }

  export type TeacherGroupByOutputType = {
    id: string
    name: string
    email: string | null
    assignedBy: string
    _count: TeacherCountAggregateOutputType | null
    _min: TeacherMinAggregateOutputType | null
    _max: TeacherMaxAggregateOutputType | null
  }

  type GetTeacherGroupByPayload<T extends TeacherGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TeacherGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TeacherGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TeacherGroupByOutputType[P]>
            : GetScalarType<T[P], TeacherGroupByOutputType[P]>
        }
      >
    >


  export type TeacherSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    assignedBy?: boolean
    assigner?: boolean | UserDefaultArgs<ExtArgs>
    teacherCourses?: boolean | Teacher$teacherCoursesArgs<ExtArgs>
    _count?: boolean | TeacherCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["teacher"]>

  export type TeacherSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    assignedBy?: boolean
    assigner?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["teacher"]>

  export type TeacherSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    assignedBy?: boolean
    assigner?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["teacher"]>

  export type TeacherSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    assignedBy?: boolean
  }

  export type TeacherOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "email" | "assignedBy", ExtArgs["result"]["teacher"]>
  export type TeacherInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assigner?: boolean | UserDefaultArgs<ExtArgs>
    teacherCourses?: boolean | Teacher$teacherCoursesArgs<ExtArgs>
    _count?: boolean | TeacherCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TeacherIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assigner?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type TeacherIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assigner?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $TeacherPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Teacher"
    objects: {
      assigner: Prisma.$UserPayload<ExtArgs>
      teacherCourses: Prisma.$TeacherCoursePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      email: string | null
      assignedBy: string
    }, ExtArgs["result"]["teacher"]>
    composites: {}
  }

  type TeacherGetPayload<S extends boolean | null | undefined | TeacherDefaultArgs> = $Result.GetResult<Prisma.$TeacherPayload, S>

  type TeacherCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TeacherFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TeacherCountAggregateInputType | true
    }

  export interface TeacherDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Teacher'], meta: { name: 'Teacher' } }
    /**
     * Find zero or one Teacher that matches the filter.
     * @param {TeacherFindUniqueArgs} args - Arguments to find a Teacher
     * @example
     * // Get one Teacher
     * const teacher = await prisma.teacher.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TeacherFindUniqueArgs>(args: SelectSubset<T, TeacherFindUniqueArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Teacher that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TeacherFindUniqueOrThrowArgs} args - Arguments to find a Teacher
     * @example
     * // Get one Teacher
     * const teacher = await prisma.teacher.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TeacherFindUniqueOrThrowArgs>(args: SelectSubset<T, TeacherFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Teacher that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherFindFirstArgs} args - Arguments to find a Teacher
     * @example
     * // Get one Teacher
     * const teacher = await prisma.teacher.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TeacherFindFirstArgs>(args?: SelectSubset<T, TeacherFindFirstArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Teacher that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherFindFirstOrThrowArgs} args - Arguments to find a Teacher
     * @example
     * // Get one Teacher
     * const teacher = await prisma.teacher.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TeacherFindFirstOrThrowArgs>(args?: SelectSubset<T, TeacherFindFirstOrThrowArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Teachers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Teachers
     * const teachers = await prisma.teacher.findMany()
     * 
     * // Get first 10 Teachers
     * const teachers = await prisma.teacher.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const teacherWithIdOnly = await prisma.teacher.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TeacherFindManyArgs>(args?: SelectSubset<T, TeacherFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Teacher.
     * @param {TeacherCreateArgs} args - Arguments to create a Teacher.
     * @example
     * // Create one Teacher
     * const Teacher = await prisma.teacher.create({
     *   data: {
     *     // ... data to create a Teacher
     *   }
     * })
     * 
     */
    create<T extends TeacherCreateArgs>(args: SelectSubset<T, TeacherCreateArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Teachers.
     * @param {TeacherCreateManyArgs} args - Arguments to create many Teachers.
     * @example
     * // Create many Teachers
     * const teacher = await prisma.teacher.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TeacherCreateManyArgs>(args?: SelectSubset<T, TeacherCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Teachers and returns the data saved in the database.
     * @param {TeacherCreateManyAndReturnArgs} args - Arguments to create many Teachers.
     * @example
     * // Create many Teachers
     * const teacher = await prisma.teacher.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Teachers and only return the `id`
     * const teacherWithIdOnly = await prisma.teacher.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TeacherCreateManyAndReturnArgs>(args?: SelectSubset<T, TeacherCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Teacher.
     * @param {TeacherDeleteArgs} args - Arguments to delete one Teacher.
     * @example
     * // Delete one Teacher
     * const Teacher = await prisma.teacher.delete({
     *   where: {
     *     // ... filter to delete one Teacher
     *   }
     * })
     * 
     */
    delete<T extends TeacherDeleteArgs>(args: SelectSubset<T, TeacherDeleteArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Teacher.
     * @param {TeacherUpdateArgs} args - Arguments to update one Teacher.
     * @example
     * // Update one Teacher
     * const teacher = await prisma.teacher.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TeacherUpdateArgs>(args: SelectSubset<T, TeacherUpdateArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Teachers.
     * @param {TeacherDeleteManyArgs} args - Arguments to filter Teachers to delete.
     * @example
     * // Delete a few Teachers
     * const { count } = await prisma.teacher.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TeacherDeleteManyArgs>(args?: SelectSubset<T, TeacherDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Teachers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Teachers
     * const teacher = await prisma.teacher.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TeacherUpdateManyArgs>(args: SelectSubset<T, TeacherUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Teachers and returns the data updated in the database.
     * @param {TeacherUpdateManyAndReturnArgs} args - Arguments to update many Teachers.
     * @example
     * // Update many Teachers
     * const teacher = await prisma.teacher.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Teachers and only return the `id`
     * const teacherWithIdOnly = await prisma.teacher.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TeacherUpdateManyAndReturnArgs>(args: SelectSubset<T, TeacherUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Teacher.
     * @param {TeacherUpsertArgs} args - Arguments to update or create a Teacher.
     * @example
     * // Update or create a Teacher
     * const teacher = await prisma.teacher.upsert({
     *   create: {
     *     // ... data to create a Teacher
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Teacher we want to update
     *   }
     * })
     */
    upsert<T extends TeacherUpsertArgs>(args: SelectSubset<T, TeacherUpsertArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Teachers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherCountArgs} args - Arguments to filter Teachers to count.
     * @example
     * // Count the number of Teachers
     * const count = await prisma.teacher.count({
     *   where: {
     *     // ... the filter for the Teachers we want to count
     *   }
     * })
    **/
    count<T extends TeacherCountArgs>(
      args?: Subset<T, TeacherCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TeacherCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Teacher.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TeacherAggregateArgs>(args: Subset<T, TeacherAggregateArgs>): Prisma.PrismaPromise<GetTeacherAggregateType<T>>

    /**
     * Group by Teacher.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TeacherGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TeacherGroupByArgs['orderBy'] }
        : { orderBy?: TeacherGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TeacherGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTeacherGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Teacher model
   */
  readonly fields: TeacherFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Teacher.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TeacherClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    assigner<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    teacherCourses<T extends Teacher$teacherCoursesArgs<ExtArgs> = {}>(args?: Subset<T, Teacher$teacherCoursesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeacherCoursePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Teacher model
   */
  interface TeacherFieldRefs {
    readonly id: FieldRef<"Teacher", 'String'>
    readonly name: FieldRef<"Teacher", 'String'>
    readonly email: FieldRef<"Teacher", 'String'>
    readonly assignedBy: FieldRef<"Teacher", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Teacher findUnique
   */
  export type TeacherFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * Filter, which Teacher to fetch.
     */
    where: TeacherWhereUniqueInput
  }

  /**
   * Teacher findUniqueOrThrow
   */
  export type TeacherFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * Filter, which Teacher to fetch.
     */
    where: TeacherWhereUniqueInput
  }

  /**
   * Teacher findFirst
   */
  export type TeacherFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * Filter, which Teacher to fetch.
     */
    where?: TeacherWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teachers to fetch.
     */
    orderBy?: TeacherOrderByWithRelationInput | TeacherOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Teachers.
     */
    cursor?: TeacherWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teachers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teachers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Teachers.
     */
    distinct?: TeacherScalarFieldEnum | TeacherScalarFieldEnum[]
  }

  /**
   * Teacher findFirstOrThrow
   */
  export type TeacherFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * Filter, which Teacher to fetch.
     */
    where?: TeacherWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teachers to fetch.
     */
    orderBy?: TeacherOrderByWithRelationInput | TeacherOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Teachers.
     */
    cursor?: TeacherWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teachers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teachers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Teachers.
     */
    distinct?: TeacherScalarFieldEnum | TeacherScalarFieldEnum[]
  }

  /**
   * Teacher findMany
   */
  export type TeacherFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * Filter, which Teachers to fetch.
     */
    where?: TeacherWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teachers to fetch.
     */
    orderBy?: TeacherOrderByWithRelationInput | TeacherOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Teachers.
     */
    cursor?: TeacherWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teachers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teachers.
     */
    skip?: number
    distinct?: TeacherScalarFieldEnum | TeacherScalarFieldEnum[]
  }

  /**
   * Teacher create
   */
  export type TeacherCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * The data needed to create a Teacher.
     */
    data: XOR<TeacherCreateInput, TeacherUncheckedCreateInput>
  }

  /**
   * Teacher createMany
   */
  export type TeacherCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Teachers.
     */
    data: TeacherCreateManyInput | TeacherCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Teacher createManyAndReturn
   */
  export type TeacherCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * The data used to create many Teachers.
     */
    data: TeacherCreateManyInput | TeacherCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Teacher update
   */
  export type TeacherUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * The data needed to update a Teacher.
     */
    data: XOR<TeacherUpdateInput, TeacherUncheckedUpdateInput>
    /**
     * Choose, which Teacher to update.
     */
    where: TeacherWhereUniqueInput
  }

  /**
   * Teacher updateMany
   */
  export type TeacherUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Teachers.
     */
    data: XOR<TeacherUpdateManyMutationInput, TeacherUncheckedUpdateManyInput>
    /**
     * Filter which Teachers to update
     */
    where?: TeacherWhereInput
    /**
     * Limit how many Teachers to update.
     */
    limit?: number
  }

  /**
   * Teacher updateManyAndReturn
   */
  export type TeacherUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * The data used to update Teachers.
     */
    data: XOR<TeacherUpdateManyMutationInput, TeacherUncheckedUpdateManyInput>
    /**
     * Filter which Teachers to update
     */
    where?: TeacherWhereInput
    /**
     * Limit how many Teachers to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Teacher upsert
   */
  export type TeacherUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * The filter to search for the Teacher to update in case it exists.
     */
    where: TeacherWhereUniqueInput
    /**
     * In case the Teacher found by the `where` argument doesn't exist, create a new Teacher with this data.
     */
    create: XOR<TeacherCreateInput, TeacherUncheckedCreateInput>
    /**
     * In case the Teacher was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TeacherUpdateInput, TeacherUncheckedUpdateInput>
  }

  /**
   * Teacher delete
   */
  export type TeacherDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * Filter which Teacher to delete.
     */
    where: TeacherWhereUniqueInput
  }

  /**
   * Teacher deleteMany
   */
  export type TeacherDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Teachers to delete
     */
    where?: TeacherWhereInput
    /**
     * Limit how many Teachers to delete.
     */
    limit?: number
  }

  /**
   * Teacher.teacherCourses
   */
  export type Teacher$teacherCoursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeacherCourse
     */
    select?: TeacherCourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeacherCourse
     */
    omit?: TeacherCourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherCourseInclude<ExtArgs> | null
    where?: TeacherCourseWhereInput
    orderBy?: TeacherCourseOrderByWithRelationInput | TeacherCourseOrderByWithRelationInput[]
    cursor?: TeacherCourseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TeacherCourseScalarFieldEnum | TeacherCourseScalarFieldEnum[]
  }

  /**
   * Teacher without action
   */
  export type TeacherDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
  }


  /**
   * Model TeacherCourse
   */

  export type AggregateTeacherCourse = {
    _count: TeacherCourseCountAggregateOutputType | null
    _min: TeacherCourseMinAggregateOutputType | null
    _max: TeacherCourseMaxAggregateOutputType | null
  }

  export type TeacherCourseMinAggregateOutputType = {
    id: string | null
    teacherId: string | null
    courseId: string | null
    classId: string | null
  }

  export type TeacherCourseMaxAggregateOutputType = {
    id: string | null
    teacherId: string | null
    courseId: string | null
    classId: string | null
  }

  export type TeacherCourseCountAggregateOutputType = {
    id: number
    teacherId: number
    courseId: number
    classId: number
    _all: number
  }


  export type TeacherCourseMinAggregateInputType = {
    id?: true
    teacherId?: true
    courseId?: true
    classId?: true
  }

  export type TeacherCourseMaxAggregateInputType = {
    id?: true
    teacherId?: true
    courseId?: true
    classId?: true
  }

  export type TeacherCourseCountAggregateInputType = {
    id?: true
    teacherId?: true
    courseId?: true
    classId?: true
    _all?: true
  }

  export type TeacherCourseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TeacherCourse to aggregate.
     */
    where?: TeacherCourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeacherCourses to fetch.
     */
    orderBy?: TeacherCourseOrderByWithRelationInput | TeacherCourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TeacherCourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeacherCourses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeacherCourses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TeacherCourses
    **/
    _count?: true | TeacherCourseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TeacherCourseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TeacherCourseMaxAggregateInputType
  }

  export type GetTeacherCourseAggregateType<T extends TeacherCourseAggregateArgs> = {
        [P in keyof T & keyof AggregateTeacherCourse]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTeacherCourse[P]>
      : GetScalarType<T[P], AggregateTeacherCourse[P]>
  }




  export type TeacherCourseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeacherCourseWhereInput
    orderBy?: TeacherCourseOrderByWithAggregationInput | TeacherCourseOrderByWithAggregationInput[]
    by: TeacherCourseScalarFieldEnum[] | TeacherCourseScalarFieldEnum
    having?: TeacherCourseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TeacherCourseCountAggregateInputType | true
    _min?: TeacherCourseMinAggregateInputType
    _max?: TeacherCourseMaxAggregateInputType
  }

  export type TeacherCourseGroupByOutputType = {
    id: string
    teacherId: string
    courseId: string
    classId: string
    _count: TeacherCourseCountAggregateOutputType | null
    _min: TeacherCourseMinAggregateOutputType | null
    _max: TeacherCourseMaxAggregateOutputType | null
  }

  type GetTeacherCourseGroupByPayload<T extends TeacherCourseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TeacherCourseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TeacherCourseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TeacherCourseGroupByOutputType[P]>
            : GetScalarType<T[P], TeacherCourseGroupByOutputType[P]>
        }
      >
    >


  export type TeacherCourseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    teacherId?: boolean
    courseId?: boolean
    classId?: boolean
    teacher?: boolean | TeacherDefaultArgs<ExtArgs>
    course?: boolean | CourseDefaultArgs<ExtArgs>
    class?: boolean | ClassDefaultArgs<ExtArgs>
    feedbacks?: boolean | TeacherCourse$feedbacksArgs<ExtArgs>
    _count?: boolean | TeacherCourseCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["teacherCourse"]>

  export type TeacherCourseSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    teacherId?: boolean
    courseId?: boolean
    classId?: boolean
    teacher?: boolean | TeacherDefaultArgs<ExtArgs>
    course?: boolean | CourseDefaultArgs<ExtArgs>
    class?: boolean | ClassDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["teacherCourse"]>

  export type TeacherCourseSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    teacherId?: boolean
    courseId?: boolean
    classId?: boolean
    teacher?: boolean | TeacherDefaultArgs<ExtArgs>
    course?: boolean | CourseDefaultArgs<ExtArgs>
    class?: boolean | ClassDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["teacherCourse"]>

  export type TeacherCourseSelectScalar = {
    id?: boolean
    teacherId?: boolean
    courseId?: boolean
    classId?: boolean
  }

  export type TeacherCourseOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "teacherId" | "courseId" | "classId", ExtArgs["result"]["teacherCourse"]>
  export type TeacherCourseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    teacher?: boolean | TeacherDefaultArgs<ExtArgs>
    course?: boolean | CourseDefaultArgs<ExtArgs>
    class?: boolean | ClassDefaultArgs<ExtArgs>
    feedbacks?: boolean | TeacherCourse$feedbacksArgs<ExtArgs>
    _count?: boolean | TeacherCourseCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TeacherCourseIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    teacher?: boolean | TeacherDefaultArgs<ExtArgs>
    course?: boolean | CourseDefaultArgs<ExtArgs>
    class?: boolean | ClassDefaultArgs<ExtArgs>
  }
  export type TeacherCourseIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    teacher?: boolean | TeacherDefaultArgs<ExtArgs>
    course?: boolean | CourseDefaultArgs<ExtArgs>
    class?: boolean | ClassDefaultArgs<ExtArgs>
  }

  export type $TeacherCoursePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TeacherCourse"
    objects: {
      teacher: Prisma.$TeacherPayload<ExtArgs>
      course: Prisma.$CoursePayload<ExtArgs>
      class: Prisma.$ClassPayload<ExtArgs>
      feedbacks: Prisma.$FeedbackPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      teacherId: string
      courseId: string
      classId: string
    }, ExtArgs["result"]["teacherCourse"]>
    composites: {}
  }

  type TeacherCourseGetPayload<S extends boolean | null | undefined | TeacherCourseDefaultArgs> = $Result.GetResult<Prisma.$TeacherCoursePayload, S>

  type TeacherCourseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TeacherCourseFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TeacherCourseCountAggregateInputType | true
    }

  export interface TeacherCourseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TeacherCourse'], meta: { name: 'TeacherCourse' } }
    /**
     * Find zero or one TeacherCourse that matches the filter.
     * @param {TeacherCourseFindUniqueArgs} args - Arguments to find a TeacherCourse
     * @example
     * // Get one TeacherCourse
     * const teacherCourse = await prisma.teacherCourse.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TeacherCourseFindUniqueArgs>(args: SelectSubset<T, TeacherCourseFindUniqueArgs<ExtArgs>>): Prisma__TeacherCourseClient<$Result.GetResult<Prisma.$TeacherCoursePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TeacherCourse that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TeacherCourseFindUniqueOrThrowArgs} args - Arguments to find a TeacherCourse
     * @example
     * // Get one TeacherCourse
     * const teacherCourse = await prisma.teacherCourse.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TeacherCourseFindUniqueOrThrowArgs>(args: SelectSubset<T, TeacherCourseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TeacherCourseClient<$Result.GetResult<Prisma.$TeacherCoursePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TeacherCourse that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherCourseFindFirstArgs} args - Arguments to find a TeacherCourse
     * @example
     * // Get one TeacherCourse
     * const teacherCourse = await prisma.teacherCourse.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TeacherCourseFindFirstArgs>(args?: SelectSubset<T, TeacherCourseFindFirstArgs<ExtArgs>>): Prisma__TeacherCourseClient<$Result.GetResult<Prisma.$TeacherCoursePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TeacherCourse that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherCourseFindFirstOrThrowArgs} args - Arguments to find a TeacherCourse
     * @example
     * // Get one TeacherCourse
     * const teacherCourse = await prisma.teacherCourse.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TeacherCourseFindFirstOrThrowArgs>(args?: SelectSubset<T, TeacherCourseFindFirstOrThrowArgs<ExtArgs>>): Prisma__TeacherCourseClient<$Result.GetResult<Prisma.$TeacherCoursePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TeacherCourses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherCourseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TeacherCourses
     * const teacherCourses = await prisma.teacherCourse.findMany()
     * 
     * // Get first 10 TeacherCourses
     * const teacherCourses = await prisma.teacherCourse.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const teacherCourseWithIdOnly = await prisma.teacherCourse.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TeacherCourseFindManyArgs>(args?: SelectSubset<T, TeacherCourseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeacherCoursePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TeacherCourse.
     * @param {TeacherCourseCreateArgs} args - Arguments to create a TeacherCourse.
     * @example
     * // Create one TeacherCourse
     * const TeacherCourse = await prisma.teacherCourse.create({
     *   data: {
     *     // ... data to create a TeacherCourse
     *   }
     * })
     * 
     */
    create<T extends TeacherCourseCreateArgs>(args: SelectSubset<T, TeacherCourseCreateArgs<ExtArgs>>): Prisma__TeacherCourseClient<$Result.GetResult<Prisma.$TeacherCoursePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TeacherCourses.
     * @param {TeacherCourseCreateManyArgs} args - Arguments to create many TeacherCourses.
     * @example
     * // Create many TeacherCourses
     * const teacherCourse = await prisma.teacherCourse.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TeacherCourseCreateManyArgs>(args?: SelectSubset<T, TeacherCourseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TeacherCourses and returns the data saved in the database.
     * @param {TeacherCourseCreateManyAndReturnArgs} args - Arguments to create many TeacherCourses.
     * @example
     * // Create many TeacherCourses
     * const teacherCourse = await prisma.teacherCourse.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TeacherCourses and only return the `id`
     * const teacherCourseWithIdOnly = await prisma.teacherCourse.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TeacherCourseCreateManyAndReturnArgs>(args?: SelectSubset<T, TeacherCourseCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeacherCoursePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a TeacherCourse.
     * @param {TeacherCourseDeleteArgs} args - Arguments to delete one TeacherCourse.
     * @example
     * // Delete one TeacherCourse
     * const TeacherCourse = await prisma.teacherCourse.delete({
     *   where: {
     *     // ... filter to delete one TeacherCourse
     *   }
     * })
     * 
     */
    delete<T extends TeacherCourseDeleteArgs>(args: SelectSubset<T, TeacherCourseDeleteArgs<ExtArgs>>): Prisma__TeacherCourseClient<$Result.GetResult<Prisma.$TeacherCoursePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TeacherCourse.
     * @param {TeacherCourseUpdateArgs} args - Arguments to update one TeacherCourse.
     * @example
     * // Update one TeacherCourse
     * const teacherCourse = await prisma.teacherCourse.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TeacherCourseUpdateArgs>(args: SelectSubset<T, TeacherCourseUpdateArgs<ExtArgs>>): Prisma__TeacherCourseClient<$Result.GetResult<Prisma.$TeacherCoursePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TeacherCourses.
     * @param {TeacherCourseDeleteManyArgs} args - Arguments to filter TeacherCourses to delete.
     * @example
     * // Delete a few TeacherCourses
     * const { count } = await prisma.teacherCourse.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TeacherCourseDeleteManyArgs>(args?: SelectSubset<T, TeacherCourseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TeacherCourses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherCourseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TeacherCourses
     * const teacherCourse = await prisma.teacherCourse.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TeacherCourseUpdateManyArgs>(args: SelectSubset<T, TeacherCourseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TeacherCourses and returns the data updated in the database.
     * @param {TeacherCourseUpdateManyAndReturnArgs} args - Arguments to update many TeacherCourses.
     * @example
     * // Update many TeacherCourses
     * const teacherCourse = await prisma.teacherCourse.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more TeacherCourses and only return the `id`
     * const teacherCourseWithIdOnly = await prisma.teacherCourse.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TeacherCourseUpdateManyAndReturnArgs>(args: SelectSubset<T, TeacherCourseUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeacherCoursePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one TeacherCourse.
     * @param {TeacherCourseUpsertArgs} args - Arguments to update or create a TeacherCourse.
     * @example
     * // Update or create a TeacherCourse
     * const teacherCourse = await prisma.teacherCourse.upsert({
     *   create: {
     *     // ... data to create a TeacherCourse
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TeacherCourse we want to update
     *   }
     * })
     */
    upsert<T extends TeacherCourseUpsertArgs>(args: SelectSubset<T, TeacherCourseUpsertArgs<ExtArgs>>): Prisma__TeacherCourseClient<$Result.GetResult<Prisma.$TeacherCoursePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TeacherCourses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherCourseCountArgs} args - Arguments to filter TeacherCourses to count.
     * @example
     * // Count the number of TeacherCourses
     * const count = await prisma.teacherCourse.count({
     *   where: {
     *     // ... the filter for the TeacherCourses we want to count
     *   }
     * })
    **/
    count<T extends TeacherCourseCountArgs>(
      args?: Subset<T, TeacherCourseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TeacherCourseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TeacherCourse.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherCourseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TeacherCourseAggregateArgs>(args: Subset<T, TeacherCourseAggregateArgs>): Prisma.PrismaPromise<GetTeacherCourseAggregateType<T>>

    /**
     * Group by TeacherCourse.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherCourseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TeacherCourseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TeacherCourseGroupByArgs['orderBy'] }
        : { orderBy?: TeacherCourseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TeacherCourseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTeacherCourseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TeacherCourse model
   */
  readonly fields: TeacherCourseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TeacherCourse.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TeacherCourseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    teacher<T extends TeacherDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TeacherDefaultArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    course<T extends CourseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CourseDefaultArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    class<T extends ClassDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClassDefaultArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    feedbacks<T extends TeacherCourse$feedbacksArgs<ExtArgs> = {}>(args?: Subset<T, TeacherCourse$feedbacksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TeacherCourse model
   */
  interface TeacherCourseFieldRefs {
    readonly id: FieldRef<"TeacherCourse", 'String'>
    readonly teacherId: FieldRef<"TeacherCourse", 'String'>
    readonly courseId: FieldRef<"TeacherCourse", 'String'>
    readonly classId: FieldRef<"TeacherCourse", 'String'>
  }
    

  // Custom InputTypes
  /**
   * TeacherCourse findUnique
   */
  export type TeacherCourseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeacherCourse
     */
    select?: TeacherCourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeacherCourse
     */
    omit?: TeacherCourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherCourseInclude<ExtArgs> | null
    /**
     * Filter, which TeacherCourse to fetch.
     */
    where: TeacherCourseWhereUniqueInput
  }

  /**
   * TeacherCourse findUniqueOrThrow
   */
  export type TeacherCourseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeacherCourse
     */
    select?: TeacherCourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeacherCourse
     */
    omit?: TeacherCourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherCourseInclude<ExtArgs> | null
    /**
     * Filter, which TeacherCourse to fetch.
     */
    where: TeacherCourseWhereUniqueInput
  }

  /**
   * TeacherCourse findFirst
   */
  export type TeacherCourseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeacherCourse
     */
    select?: TeacherCourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeacherCourse
     */
    omit?: TeacherCourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherCourseInclude<ExtArgs> | null
    /**
     * Filter, which TeacherCourse to fetch.
     */
    where?: TeacherCourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeacherCourses to fetch.
     */
    orderBy?: TeacherCourseOrderByWithRelationInput | TeacherCourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TeacherCourses.
     */
    cursor?: TeacherCourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeacherCourses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeacherCourses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TeacherCourses.
     */
    distinct?: TeacherCourseScalarFieldEnum | TeacherCourseScalarFieldEnum[]
  }

  /**
   * TeacherCourse findFirstOrThrow
   */
  export type TeacherCourseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeacherCourse
     */
    select?: TeacherCourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeacherCourse
     */
    omit?: TeacherCourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherCourseInclude<ExtArgs> | null
    /**
     * Filter, which TeacherCourse to fetch.
     */
    where?: TeacherCourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeacherCourses to fetch.
     */
    orderBy?: TeacherCourseOrderByWithRelationInput | TeacherCourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TeacherCourses.
     */
    cursor?: TeacherCourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeacherCourses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeacherCourses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TeacherCourses.
     */
    distinct?: TeacherCourseScalarFieldEnum | TeacherCourseScalarFieldEnum[]
  }

  /**
   * TeacherCourse findMany
   */
  export type TeacherCourseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeacherCourse
     */
    select?: TeacherCourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeacherCourse
     */
    omit?: TeacherCourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherCourseInclude<ExtArgs> | null
    /**
     * Filter, which TeacherCourses to fetch.
     */
    where?: TeacherCourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeacherCourses to fetch.
     */
    orderBy?: TeacherCourseOrderByWithRelationInput | TeacherCourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TeacherCourses.
     */
    cursor?: TeacherCourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeacherCourses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeacherCourses.
     */
    skip?: number
    distinct?: TeacherCourseScalarFieldEnum | TeacherCourseScalarFieldEnum[]
  }

  /**
   * TeacherCourse create
   */
  export type TeacherCourseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeacherCourse
     */
    select?: TeacherCourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeacherCourse
     */
    omit?: TeacherCourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherCourseInclude<ExtArgs> | null
    /**
     * The data needed to create a TeacherCourse.
     */
    data: XOR<TeacherCourseCreateInput, TeacherCourseUncheckedCreateInput>
  }

  /**
   * TeacherCourse createMany
   */
  export type TeacherCourseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TeacherCourses.
     */
    data: TeacherCourseCreateManyInput | TeacherCourseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TeacherCourse createManyAndReturn
   */
  export type TeacherCourseCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeacherCourse
     */
    select?: TeacherCourseSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TeacherCourse
     */
    omit?: TeacherCourseOmit<ExtArgs> | null
    /**
     * The data used to create many TeacherCourses.
     */
    data: TeacherCourseCreateManyInput | TeacherCourseCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherCourseIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TeacherCourse update
   */
  export type TeacherCourseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeacherCourse
     */
    select?: TeacherCourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeacherCourse
     */
    omit?: TeacherCourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherCourseInclude<ExtArgs> | null
    /**
     * The data needed to update a TeacherCourse.
     */
    data: XOR<TeacherCourseUpdateInput, TeacherCourseUncheckedUpdateInput>
    /**
     * Choose, which TeacherCourse to update.
     */
    where: TeacherCourseWhereUniqueInput
  }

  /**
   * TeacherCourse updateMany
   */
  export type TeacherCourseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TeacherCourses.
     */
    data: XOR<TeacherCourseUpdateManyMutationInput, TeacherCourseUncheckedUpdateManyInput>
    /**
     * Filter which TeacherCourses to update
     */
    where?: TeacherCourseWhereInput
    /**
     * Limit how many TeacherCourses to update.
     */
    limit?: number
  }

  /**
   * TeacherCourse updateManyAndReturn
   */
  export type TeacherCourseUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeacherCourse
     */
    select?: TeacherCourseSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TeacherCourse
     */
    omit?: TeacherCourseOmit<ExtArgs> | null
    /**
     * The data used to update TeacherCourses.
     */
    data: XOR<TeacherCourseUpdateManyMutationInput, TeacherCourseUncheckedUpdateManyInput>
    /**
     * Filter which TeacherCourses to update
     */
    where?: TeacherCourseWhereInput
    /**
     * Limit how many TeacherCourses to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherCourseIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * TeacherCourse upsert
   */
  export type TeacherCourseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeacherCourse
     */
    select?: TeacherCourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeacherCourse
     */
    omit?: TeacherCourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherCourseInclude<ExtArgs> | null
    /**
     * The filter to search for the TeacherCourse to update in case it exists.
     */
    where: TeacherCourseWhereUniqueInput
    /**
     * In case the TeacherCourse found by the `where` argument doesn't exist, create a new TeacherCourse with this data.
     */
    create: XOR<TeacherCourseCreateInput, TeacherCourseUncheckedCreateInput>
    /**
     * In case the TeacherCourse was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TeacherCourseUpdateInput, TeacherCourseUncheckedUpdateInput>
  }

  /**
   * TeacherCourse delete
   */
  export type TeacherCourseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeacherCourse
     */
    select?: TeacherCourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeacherCourse
     */
    omit?: TeacherCourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherCourseInclude<ExtArgs> | null
    /**
     * Filter which TeacherCourse to delete.
     */
    where: TeacherCourseWhereUniqueInput
  }

  /**
   * TeacherCourse deleteMany
   */
  export type TeacherCourseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TeacherCourses to delete
     */
    where?: TeacherCourseWhereInput
    /**
     * Limit how many TeacherCourses to delete.
     */
    limit?: number
  }

  /**
   * TeacherCourse.feedbacks
   */
  export type TeacherCourse$feedbacksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    where?: FeedbackWhereInput
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    cursor?: FeedbackWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FeedbackScalarFieldEnum | FeedbackScalarFieldEnum[]
  }

  /**
   * TeacherCourse without action
   */
  export type TeacherCourseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeacherCourse
     */
    select?: TeacherCourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeacherCourse
     */
    omit?: TeacherCourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherCourseInclude<ExtArgs> | null
  }


  /**
   * Model FeedbackParameter
   */

  export type AggregateFeedbackParameter = {
    _count: FeedbackParameterCountAggregateOutputType | null
    _min: FeedbackParameterMinAggregateOutputType | null
    _max: FeedbackParameterMaxAggregateOutputType | null
  }

  export type FeedbackParameterMinAggregateOutputType = {
    id: string | null
    parameterName: string | null
    parameterType: $Enums.CourseType | null
    createdBy: string | null
  }

  export type FeedbackParameterMaxAggregateOutputType = {
    id: string | null
    parameterName: string | null
    parameterType: $Enums.CourseType | null
    createdBy: string | null
  }

  export type FeedbackParameterCountAggregateOutputType = {
    id: number
    parameterName: number
    parameterType: number
    createdBy: number
    _all: number
  }


  export type FeedbackParameterMinAggregateInputType = {
    id?: true
    parameterName?: true
    parameterType?: true
    createdBy?: true
  }

  export type FeedbackParameterMaxAggregateInputType = {
    id?: true
    parameterName?: true
    parameterType?: true
    createdBy?: true
  }

  export type FeedbackParameterCountAggregateInputType = {
    id?: true
    parameterName?: true
    parameterType?: true
    createdBy?: true
    _all?: true
  }

  export type FeedbackParameterAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FeedbackParameter to aggregate.
     */
    where?: FeedbackParameterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FeedbackParameters to fetch.
     */
    orderBy?: FeedbackParameterOrderByWithRelationInput | FeedbackParameterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FeedbackParameterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FeedbackParameters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FeedbackParameters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FeedbackParameters
    **/
    _count?: true | FeedbackParameterCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FeedbackParameterMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FeedbackParameterMaxAggregateInputType
  }

  export type GetFeedbackParameterAggregateType<T extends FeedbackParameterAggregateArgs> = {
        [P in keyof T & keyof AggregateFeedbackParameter]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFeedbackParameter[P]>
      : GetScalarType<T[P], AggregateFeedbackParameter[P]>
  }




  export type FeedbackParameterGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeedbackParameterWhereInput
    orderBy?: FeedbackParameterOrderByWithAggregationInput | FeedbackParameterOrderByWithAggregationInput[]
    by: FeedbackParameterScalarFieldEnum[] | FeedbackParameterScalarFieldEnum
    having?: FeedbackParameterScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FeedbackParameterCountAggregateInputType | true
    _min?: FeedbackParameterMinAggregateInputType
    _max?: FeedbackParameterMaxAggregateInputType
  }

  export type FeedbackParameterGroupByOutputType = {
    id: string
    parameterName: string
    parameterType: $Enums.CourseType
    createdBy: string
    _count: FeedbackParameterCountAggregateOutputType | null
    _min: FeedbackParameterMinAggregateOutputType | null
    _max: FeedbackParameterMaxAggregateOutputType | null
  }

  type GetFeedbackParameterGroupByPayload<T extends FeedbackParameterGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FeedbackParameterGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FeedbackParameterGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FeedbackParameterGroupByOutputType[P]>
            : GetScalarType<T[P], FeedbackParameterGroupByOutputType[P]>
        }
      >
    >


  export type FeedbackParameterSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    parameterName?: boolean
    parameterType?: boolean
    createdBy?: boolean
    creator?: boolean | UserDefaultArgs<ExtArgs>
    feedbacks?: boolean | FeedbackParameter$feedbacksArgs<ExtArgs>
    _count?: boolean | FeedbackParameterCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["feedbackParameter"]>

  export type FeedbackParameterSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    parameterName?: boolean
    parameterType?: boolean
    createdBy?: boolean
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["feedbackParameter"]>

  export type FeedbackParameterSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    parameterName?: boolean
    parameterType?: boolean
    createdBy?: boolean
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["feedbackParameter"]>

  export type FeedbackParameterSelectScalar = {
    id?: boolean
    parameterName?: boolean
    parameterType?: boolean
    createdBy?: boolean
  }

  export type FeedbackParameterOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "parameterName" | "parameterType" | "createdBy", ExtArgs["result"]["feedbackParameter"]>
  export type FeedbackParameterInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    creator?: boolean | UserDefaultArgs<ExtArgs>
    feedbacks?: boolean | FeedbackParameter$feedbacksArgs<ExtArgs>
    _count?: boolean | FeedbackParameterCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type FeedbackParameterIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type FeedbackParameterIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $FeedbackParameterPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FeedbackParameter"
    objects: {
      creator: Prisma.$UserPayload<ExtArgs>
      feedbacks: Prisma.$FeedbackPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      parameterName: string
      parameterType: $Enums.CourseType
      createdBy: string
    }, ExtArgs["result"]["feedbackParameter"]>
    composites: {}
  }

  type FeedbackParameterGetPayload<S extends boolean | null | undefined | FeedbackParameterDefaultArgs> = $Result.GetResult<Prisma.$FeedbackParameterPayload, S>

  type FeedbackParameterCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FeedbackParameterFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FeedbackParameterCountAggregateInputType | true
    }

  export interface FeedbackParameterDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FeedbackParameter'], meta: { name: 'FeedbackParameter' } }
    /**
     * Find zero or one FeedbackParameter that matches the filter.
     * @param {FeedbackParameterFindUniqueArgs} args - Arguments to find a FeedbackParameter
     * @example
     * // Get one FeedbackParameter
     * const feedbackParameter = await prisma.feedbackParameter.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FeedbackParameterFindUniqueArgs>(args: SelectSubset<T, FeedbackParameterFindUniqueArgs<ExtArgs>>): Prisma__FeedbackParameterClient<$Result.GetResult<Prisma.$FeedbackParameterPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one FeedbackParameter that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FeedbackParameterFindUniqueOrThrowArgs} args - Arguments to find a FeedbackParameter
     * @example
     * // Get one FeedbackParameter
     * const feedbackParameter = await prisma.feedbackParameter.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FeedbackParameterFindUniqueOrThrowArgs>(args: SelectSubset<T, FeedbackParameterFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FeedbackParameterClient<$Result.GetResult<Prisma.$FeedbackParameterPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FeedbackParameter that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackParameterFindFirstArgs} args - Arguments to find a FeedbackParameter
     * @example
     * // Get one FeedbackParameter
     * const feedbackParameter = await prisma.feedbackParameter.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FeedbackParameterFindFirstArgs>(args?: SelectSubset<T, FeedbackParameterFindFirstArgs<ExtArgs>>): Prisma__FeedbackParameterClient<$Result.GetResult<Prisma.$FeedbackParameterPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FeedbackParameter that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackParameterFindFirstOrThrowArgs} args - Arguments to find a FeedbackParameter
     * @example
     * // Get one FeedbackParameter
     * const feedbackParameter = await prisma.feedbackParameter.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FeedbackParameterFindFirstOrThrowArgs>(args?: SelectSubset<T, FeedbackParameterFindFirstOrThrowArgs<ExtArgs>>): Prisma__FeedbackParameterClient<$Result.GetResult<Prisma.$FeedbackParameterPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more FeedbackParameters that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackParameterFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FeedbackParameters
     * const feedbackParameters = await prisma.feedbackParameter.findMany()
     * 
     * // Get first 10 FeedbackParameters
     * const feedbackParameters = await prisma.feedbackParameter.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const feedbackParameterWithIdOnly = await prisma.feedbackParameter.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FeedbackParameterFindManyArgs>(args?: SelectSubset<T, FeedbackParameterFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackParameterPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a FeedbackParameter.
     * @param {FeedbackParameterCreateArgs} args - Arguments to create a FeedbackParameter.
     * @example
     * // Create one FeedbackParameter
     * const FeedbackParameter = await prisma.feedbackParameter.create({
     *   data: {
     *     // ... data to create a FeedbackParameter
     *   }
     * })
     * 
     */
    create<T extends FeedbackParameterCreateArgs>(args: SelectSubset<T, FeedbackParameterCreateArgs<ExtArgs>>): Prisma__FeedbackParameterClient<$Result.GetResult<Prisma.$FeedbackParameterPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many FeedbackParameters.
     * @param {FeedbackParameterCreateManyArgs} args - Arguments to create many FeedbackParameters.
     * @example
     * // Create many FeedbackParameters
     * const feedbackParameter = await prisma.feedbackParameter.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FeedbackParameterCreateManyArgs>(args?: SelectSubset<T, FeedbackParameterCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FeedbackParameters and returns the data saved in the database.
     * @param {FeedbackParameterCreateManyAndReturnArgs} args - Arguments to create many FeedbackParameters.
     * @example
     * // Create many FeedbackParameters
     * const feedbackParameter = await prisma.feedbackParameter.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FeedbackParameters and only return the `id`
     * const feedbackParameterWithIdOnly = await prisma.feedbackParameter.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FeedbackParameterCreateManyAndReturnArgs>(args?: SelectSubset<T, FeedbackParameterCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackParameterPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a FeedbackParameter.
     * @param {FeedbackParameterDeleteArgs} args - Arguments to delete one FeedbackParameter.
     * @example
     * // Delete one FeedbackParameter
     * const FeedbackParameter = await prisma.feedbackParameter.delete({
     *   where: {
     *     // ... filter to delete one FeedbackParameter
     *   }
     * })
     * 
     */
    delete<T extends FeedbackParameterDeleteArgs>(args: SelectSubset<T, FeedbackParameterDeleteArgs<ExtArgs>>): Prisma__FeedbackParameterClient<$Result.GetResult<Prisma.$FeedbackParameterPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one FeedbackParameter.
     * @param {FeedbackParameterUpdateArgs} args - Arguments to update one FeedbackParameter.
     * @example
     * // Update one FeedbackParameter
     * const feedbackParameter = await prisma.feedbackParameter.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FeedbackParameterUpdateArgs>(args: SelectSubset<T, FeedbackParameterUpdateArgs<ExtArgs>>): Prisma__FeedbackParameterClient<$Result.GetResult<Prisma.$FeedbackParameterPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more FeedbackParameters.
     * @param {FeedbackParameterDeleteManyArgs} args - Arguments to filter FeedbackParameters to delete.
     * @example
     * // Delete a few FeedbackParameters
     * const { count } = await prisma.feedbackParameter.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FeedbackParameterDeleteManyArgs>(args?: SelectSubset<T, FeedbackParameterDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FeedbackParameters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackParameterUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FeedbackParameters
     * const feedbackParameter = await prisma.feedbackParameter.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FeedbackParameterUpdateManyArgs>(args: SelectSubset<T, FeedbackParameterUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FeedbackParameters and returns the data updated in the database.
     * @param {FeedbackParameterUpdateManyAndReturnArgs} args - Arguments to update many FeedbackParameters.
     * @example
     * // Update many FeedbackParameters
     * const feedbackParameter = await prisma.feedbackParameter.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more FeedbackParameters and only return the `id`
     * const feedbackParameterWithIdOnly = await prisma.feedbackParameter.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FeedbackParameterUpdateManyAndReturnArgs>(args: SelectSubset<T, FeedbackParameterUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackParameterPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one FeedbackParameter.
     * @param {FeedbackParameterUpsertArgs} args - Arguments to update or create a FeedbackParameter.
     * @example
     * // Update or create a FeedbackParameter
     * const feedbackParameter = await prisma.feedbackParameter.upsert({
     *   create: {
     *     // ... data to create a FeedbackParameter
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FeedbackParameter we want to update
     *   }
     * })
     */
    upsert<T extends FeedbackParameterUpsertArgs>(args: SelectSubset<T, FeedbackParameterUpsertArgs<ExtArgs>>): Prisma__FeedbackParameterClient<$Result.GetResult<Prisma.$FeedbackParameterPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of FeedbackParameters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackParameterCountArgs} args - Arguments to filter FeedbackParameters to count.
     * @example
     * // Count the number of FeedbackParameters
     * const count = await prisma.feedbackParameter.count({
     *   where: {
     *     // ... the filter for the FeedbackParameters we want to count
     *   }
     * })
    **/
    count<T extends FeedbackParameterCountArgs>(
      args?: Subset<T, FeedbackParameterCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FeedbackParameterCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FeedbackParameter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackParameterAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FeedbackParameterAggregateArgs>(args: Subset<T, FeedbackParameterAggregateArgs>): Prisma.PrismaPromise<GetFeedbackParameterAggregateType<T>>

    /**
     * Group by FeedbackParameter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackParameterGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FeedbackParameterGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FeedbackParameterGroupByArgs['orderBy'] }
        : { orderBy?: FeedbackParameterGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FeedbackParameterGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFeedbackParameterGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FeedbackParameter model
   */
  readonly fields: FeedbackParameterFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FeedbackParameter.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FeedbackParameterClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    creator<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    feedbacks<T extends FeedbackParameter$feedbacksArgs<ExtArgs> = {}>(args?: Subset<T, FeedbackParameter$feedbacksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FeedbackParameter model
   */
  interface FeedbackParameterFieldRefs {
    readonly id: FieldRef<"FeedbackParameter", 'String'>
    readonly parameterName: FieldRef<"FeedbackParameter", 'String'>
    readonly parameterType: FieldRef<"FeedbackParameter", 'CourseType'>
    readonly createdBy: FieldRef<"FeedbackParameter", 'String'>
  }
    

  // Custom InputTypes
  /**
   * FeedbackParameter findUnique
   */
  export type FeedbackParameterFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedbackParameter
     */
    select?: FeedbackParameterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeedbackParameter
     */
    omit?: FeedbackParameterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackParameterInclude<ExtArgs> | null
    /**
     * Filter, which FeedbackParameter to fetch.
     */
    where: FeedbackParameterWhereUniqueInput
  }

  /**
   * FeedbackParameter findUniqueOrThrow
   */
  export type FeedbackParameterFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedbackParameter
     */
    select?: FeedbackParameterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeedbackParameter
     */
    omit?: FeedbackParameterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackParameterInclude<ExtArgs> | null
    /**
     * Filter, which FeedbackParameter to fetch.
     */
    where: FeedbackParameterWhereUniqueInput
  }

  /**
   * FeedbackParameter findFirst
   */
  export type FeedbackParameterFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedbackParameter
     */
    select?: FeedbackParameterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeedbackParameter
     */
    omit?: FeedbackParameterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackParameterInclude<ExtArgs> | null
    /**
     * Filter, which FeedbackParameter to fetch.
     */
    where?: FeedbackParameterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FeedbackParameters to fetch.
     */
    orderBy?: FeedbackParameterOrderByWithRelationInput | FeedbackParameterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FeedbackParameters.
     */
    cursor?: FeedbackParameterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FeedbackParameters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FeedbackParameters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FeedbackParameters.
     */
    distinct?: FeedbackParameterScalarFieldEnum | FeedbackParameterScalarFieldEnum[]
  }

  /**
   * FeedbackParameter findFirstOrThrow
   */
  export type FeedbackParameterFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedbackParameter
     */
    select?: FeedbackParameterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeedbackParameter
     */
    omit?: FeedbackParameterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackParameterInclude<ExtArgs> | null
    /**
     * Filter, which FeedbackParameter to fetch.
     */
    where?: FeedbackParameterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FeedbackParameters to fetch.
     */
    orderBy?: FeedbackParameterOrderByWithRelationInput | FeedbackParameterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FeedbackParameters.
     */
    cursor?: FeedbackParameterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FeedbackParameters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FeedbackParameters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FeedbackParameters.
     */
    distinct?: FeedbackParameterScalarFieldEnum | FeedbackParameterScalarFieldEnum[]
  }

  /**
   * FeedbackParameter findMany
   */
  export type FeedbackParameterFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedbackParameter
     */
    select?: FeedbackParameterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeedbackParameter
     */
    omit?: FeedbackParameterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackParameterInclude<ExtArgs> | null
    /**
     * Filter, which FeedbackParameters to fetch.
     */
    where?: FeedbackParameterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FeedbackParameters to fetch.
     */
    orderBy?: FeedbackParameterOrderByWithRelationInput | FeedbackParameterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FeedbackParameters.
     */
    cursor?: FeedbackParameterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FeedbackParameters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FeedbackParameters.
     */
    skip?: number
    distinct?: FeedbackParameterScalarFieldEnum | FeedbackParameterScalarFieldEnum[]
  }

  /**
   * FeedbackParameter create
   */
  export type FeedbackParameterCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedbackParameter
     */
    select?: FeedbackParameterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeedbackParameter
     */
    omit?: FeedbackParameterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackParameterInclude<ExtArgs> | null
    /**
     * The data needed to create a FeedbackParameter.
     */
    data: XOR<FeedbackParameterCreateInput, FeedbackParameterUncheckedCreateInput>
  }

  /**
   * FeedbackParameter createMany
   */
  export type FeedbackParameterCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FeedbackParameters.
     */
    data: FeedbackParameterCreateManyInput | FeedbackParameterCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FeedbackParameter createManyAndReturn
   */
  export type FeedbackParameterCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedbackParameter
     */
    select?: FeedbackParameterSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FeedbackParameter
     */
    omit?: FeedbackParameterOmit<ExtArgs> | null
    /**
     * The data used to create many FeedbackParameters.
     */
    data: FeedbackParameterCreateManyInput | FeedbackParameterCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackParameterIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * FeedbackParameter update
   */
  export type FeedbackParameterUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedbackParameter
     */
    select?: FeedbackParameterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeedbackParameter
     */
    omit?: FeedbackParameterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackParameterInclude<ExtArgs> | null
    /**
     * The data needed to update a FeedbackParameter.
     */
    data: XOR<FeedbackParameterUpdateInput, FeedbackParameterUncheckedUpdateInput>
    /**
     * Choose, which FeedbackParameter to update.
     */
    where: FeedbackParameterWhereUniqueInput
  }

  /**
   * FeedbackParameter updateMany
   */
  export type FeedbackParameterUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FeedbackParameters.
     */
    data: XOR<FeedbackParameterUpdateManyMutationInput, FeedbackParameterUncheckedUpdateManyInput>
    /**
     * Filter which FeedbackParameters to update
     */
    where?: FeedbackParameterWhereInput
    /**
     * Limit how many FeedbackParameters to update.
     */
    limit?: number
  }

  /**
   * FeedbackParameter updateManyAndReturn
   */
  export type FeedbackParameterUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedbackParameter
     */
    select?: FeedbackParameterSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FeedbackParameter
     */
    omit?: FeedbackParameterOmit<ExtArgs> | null
    /**
     * The data used to update FeedbackParameters.
     */
    data: XOR<FeedbackParameterUpdateManyMutationInput, FeedbackParameterUncheckedUpdateManyInput>
    /**
     * Filter which FeedbackParameters to update
     */
    where?: FeedbackParameterWhereInput
    /**
     * Limit how many FeedbackParameters to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackParameterIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * FeedbackParameter upsert
   */
  export type FeedbackParameterUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedbackParameter
     */
    select?: FeedbackParameterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeedbackParameter
     */
    omit?: FeedbackParameterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackParameterInclude<ExtArgs> | null
    /**
     * The filter to search for the FeedbackParameter to update in case it exists.
     */
    where: FeedbackParameterWhereUniqueInput
    /**
     * In case the FeedbackParameter found by the `where` argument doesn't exist, create a new FeedbackParameter with this data.
     */
    create: XOR<FeedbackParameterCreateInput, FeedbackParameterUncheckedCreateInput>
    /**
     * In case the FeedbackParameter was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FeedbackParameterUpdateInput, FeedbackParameterUncheckedUpdateInput>
  }

  /**
   * FeedbackParameter delete
   */
  export type FeedbackParameterDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedbackParameter
     */
    select?: FeedbackParameterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeedbackParameter
     */
    omit?: FeedbackParameterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackParameterInclude<ExtArgs> | null
    /**
     * Filter which FeedbackParameter to delete.
     */
    where: FeedbackParameterWhereUniqueInput
  }

  /**
   * FeedbackParameter deleteMany
   */
  export type FeedbackParameterDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FeedbackParameters to delete
     */
    where?: FeedbackParameterWhereInput
    /**
     * Limit how many FeedbackParameters to delete.
     */
    limit?: number
  }

  /**
   * FeedbackParameter.feedbacks
   */
  export type FeedbackParameter$feedbacksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    where?: FeedbackWhereInput
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    cursor?: FeedbackWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FeedbackScalarFieldEnum | FeedbackScalarFieldEnum[]
  }

  /**
   * FeedbackParameter without action
   */
  export type FeedbackParameterDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FeedbackParameter
     */
    select?: FeedbackParameterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FeedbackParameter
     */
    omit?: FeedbackParameterOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackParameterInclude<ExtArgs> | null
  }


  /**
   * Model Feedback
   */

  export type AggregateFeedback = {
    _count: FeedbackCountAggregateOutputType | null
    _avg: FeedbackAvgAggregateOutputType | null
    _sum: FeedbackSumAggregateOutputType | null
    _min: FeedbackMinAggregateOutputType | null
    _max: FeedbackMaxAggregateOutputType | null
  }

  export type FeedbackAvgAggregateOutputType = {
    rating: number | null
  }

  export type FeedbackSumAggregateOutputType = {
    rating: number | null
  }

  export type FeedbackMinAggregateOutputType = {
    id: string | null
    studentId: string | null
    teacherCourseId: string | null
    parameterId: string | null
    rating: number | null
    comment: string | null
    createdAt: Date | null
  }

  export type FeedbackMaxAggregateOutputType = {
    id: string | null
    studentId: string | null
    teacherCourseId: string | null
    parameterId: string | null
    rating: number | null
    comment: string | null
    createdAt: Date | null
  }

  export type FeedbackCountAggregateOutputType = {
    id: number
    studentId: number
    teacherCourseId: number
    parameterId: number
    rating: number
    comment: number
    createdAt: number
    _all: number
  }


  export type FeedbackAvgAggregateInputType = {
    rating?: true
  }

  export type FeedbackSumAggregateInputType = {
    rating?: true
  }

  export type FeedbackMinAggregateInputType = {
    id?: true
    studentId?: true
    teacherCourseId?: true
    parameterId?: true
    rating?: true
    comment?: true
    createdAt?: true
  }

  export type FeedbackMaxAggregateInputType = {
    id?: true
    studentId?: true
    teacherCourseId?: true
    parameterId?: true
    rating?: true
    comment?: true
    createdAt?: true
  }

  export type FeedbackCountAggregateInputType = {
    id?: true
    studentId?: true
    teacherCourseId?: true
    parameterId?: true
    rating?: true
    comment?: true
    createdAt?: true
    _all?: true
  }

  export type FeedbackAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Feedback to aggregate.
     */
    where?: FeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Feedbacks to fetch.
     */
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Feedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Feedbacks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Feedbacks
    **/
    _count?: true | FeedbackCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FeedbackAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FeedbackSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FeedbackMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FeedbackMaxAggregateInputType
  }

  export type GetFeedbackAggregateType<T extends FeedbackAggregateArgs> = {
        [P in keyof T & keyof AggregateFeedback]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFeedback[P]>
      : GetScalarType<T[P], AggregateFeedback[P]>
  }




  export type FeedbackGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeedbackWhereInput
    orderBy?: FeedbackOrderByWithAggregationInput | FeedbackOrderByWithAggregationInput[]
    by: FeedbackScalarFieldEnum[] | FeedbackScalarFieldEnum
    having?: FeedbackScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FeedbackCountAggregateInputType | true
    _avg?: FeedbackAvgAggregateInputType
    _sum?: FeedbackSumAggregateInputType
    _min?: FeedbackMinAggregateInputType
    _max?: FeedbackMaxAggregateInputType
  }

  export type FeedbackGroupByOutputType = {
    id: string
    studentId: string
    teacherCourseId: string
    parameterId: string
    rating: number
    comment: string | null
    createdAt: Date
    _count: FeedbackCountAggregateOutputType | null
    _avg: FeedbackAvgAggregateOutputType | null
    _sum: FeedbackSumAggregateOutputType | null
    _min: FeedbackMinAggregateOutputType | null
    _max: FeedbackMaxAggregateOutputType | null
  }

  type GetFeedbackGroupByPayload<T extends FeedbackGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FeedbackGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FeedbackGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FeedbackGroupByOutputType[P]>
            : GetScalarType<T[P], FeedbackGroupByOutputType[P]>
        }
      >
    >


  export type FeedbackSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studentId?: boolean
    teacherCourseId?: boolean
    parameterId?: boolean
    rating?: boolean
    comment?: boolean
    createdAt?: boolean
    student?: boolean | UserDefaultArgs<ExtArgs>
    teacherCourse?: boolean | TeacherCourseDefaultArgs<ExtArgs>
    parameter?: boolean | FeedbackParameterDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["feedback"]>

  export type FeedbackSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studentId?: boolean
    teacherCourseId?: boolean
    parameterId?: boolean
    rating?: boolean
    comment?: boolean
    createdAt?: boolean
    student?: boolean | UserDefaultArgs<ExtArgs>
    teacherCourse?: boolean | TeacherCourseDefaultArgs<ExtArgs>
    parameter?: boolean | FeedbackParameterDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["feedback"]>

  export type FeedbackSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studentId?: boolean
    teacherCourseId?: boolean
    parameterId?: boolean
    rating?: boolean
    comment?: boolean
    createdAt?: boolean
    student?: boolean | UserDefaultArgs<ExtArgs>
    teacherCourse?: boolean | TeacherCourseDefaultArgs<ExtArgs>
    parameter?: boolean | FeedbackParameterDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["feedback"]>

  export type FeedbackSelectScalar = {
    id?: boolean
    studentId?: boolean
    teacherCourseId?: boolean
    parameterId?: boolean
    rating?: boolean
    comment?: boolean
    createdAt?: boolean
  }

  export type FeedbackOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "studentId" | "teacherCourseId" | "parameterId" | "rating" | "comment" | "createdAt", ExtArgs["result"]["feedback"]>
  export type FeedbackInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | UserDefaultArgs<ExtArgs>
    teacherCourse?: boolean | TeacherCourseDefaultArgs<ExtArgs>
    parameter?: boolean | FeedbackParameterDefaultArgs<ExtArgs>
  }
  export type FeedbackIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | UserDefaultArgs<ExtArgs>
    teacherCourse?: boolean | TeacherCourseDefaultArgs<ExtArgs>
    parameter?: boolean | FeedbackParameterDefaultArgs<ExtArgs>
  }
  export type FeedbackIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | UserDefaultArgs<ExtArgs>
    teacherCourse?: boolean | TeacherCourseDefaultArgs<ExtArgs>
    parameter?: boolean | FeedbackParameterDefaultArgs<ExtArgs>
  }

  export type $FeedbackPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Feedback"
    objects: {
      student: Prisma.$UserPayload<ExtArgs>
      teacherCourse: Prisma.$TeacherCoursePayload<ExtArgs>
      parameter: Prisma.$FeedbackParameterPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      studentId: string
      teacherCourseId: string
      parameterId: string
      rating: number
      comment: string | null
      createdAt: Date
    }, ExtArgs["result"]["feedback"]>
    composites: {}
  }

  type FeedbackGetPayload<S extends boolean | null | undefined | FeedbackDefaultArgs> = $Result.GetResult<Prisma.$FeedbackPayload, S>

  type FeedbackCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FeedbackFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FeedbackCountAggregateInputType | true
    }

  export interface FeedbackDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Feedback'], meta: { name: 'Feedback' } }
    /**
     * Find zero or one Feedback that matches the filter.
     * @param {FeedbackFindUniqueArgs} args - Arguments to find a Feedback
     * @example
     * // Get one Feedback
     * const feedback = await prisma.feedback.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FeedbackFindUniqueArgs>(args: SelectSubset<T, FeedbackFindUniqueArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Feedback that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FeedbackFindUniqueOrThrowArgs} args - Arguments to find a Feedback
     * @example
     * // Get one Feedback
     * const feedback = await prisma.feedback.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FeedbackFindUniqueOrThrowArgs>(args: SelectSubset<T, FeedbackFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Feedback that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackFindFirstArgs} args - Arguments to find a Feedback
     * @example
     * // Get one Feedback
     * const feedback = await prisma.feedback.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FeedbackFindFirstArgs>(args?: SelectSubset<T, FeedbackFindFirstArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Feedback that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackFindFirstOrThrowArgs} args - Arguments to find a Feedback
     * @example
     * // Get one Feedback
     * const feedback = await prisma.feedback.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FeedbackFindFirstOrThrowArgs>(args?: SelectSubset<T, FeedbackFindFirstOrThrowArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Feedbacks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Feedbacks
     * const feedbacks = await prisma.feedback.findMany()
     * 
     * // Get first 10 Feedbacks
     * const feedbacks = await prisma.feedback.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const feedbackWithIdOnly = await prisma.feedback.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FeedbackFindManyArgs>(args?: SelectSubset<T, FeedbackFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Feedback.
     * @param {FeedbackCreateArgs} args - Arguments to create a Feedback.
     * @example
     * // Create one Feedback
     * const Feedback = await prisma.feedback.create({
     *   data: {
     *     // ... data to create a Feedback
     *   }
     * })
     * 
     */
    create<T extends FeedbackCreateArgs>(args: SelectSubset<T, FeedbackCreateArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Feedbacks.
     * @param {FeedbackCreateManyArgs} args - Arguments to create many Feedbacks.
     * @example
     * // Create many Feedbacks
     * const feedback = await prisma.feedback.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FeedbackCreateManyArgs>(args?: SelectSubset<T, FeedbackCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Feedbacks and returns the data saved in the database.
     * @param {FeedbackCreateManyAndReturnArgs} args - Arguments to create many Feedbacks.
     * @example
     * // Create many Feedbacks
     * const feedback = await prisma.feedback.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Feedbacks and only return the `id`
     * const feedbackWithIdOnly = await prisma.feedback.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FeedbackCreateManyAndReturnArgs>(args?: SelectSubset<T, FeedbackCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Feedback.
     * @param {FeedbackDeleteArgs} args - Arguments to delete one Feedback.
     * @example
     * // Delete one Feedback
     * const Feedback = await prisma.feedback.delete({
     *   where: {
     *     // ... filter to delete one Feedback
     *   }
     * })
     * 
     */
    delete<T extends FeedbackDeleteArgs>(args: SelectSubset<T, FeedbackDeleteArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Feedback.
     * @param {FeedbackUpdateArgs} args - Arguments to update one Feedback.
     * @example
     * // Update one Feedback
     * const feedback = await prisma.feedback.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FeedbackUpdateArgs>(args: SelectSubset<T, FeedbackUpdateArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Feedbacks.
     * @param {FeedbackDeleteManyArgs} args - Arguments to filter Feedbacks to delete.
     * @example
     * // Delete a few Feedbacks
     * const { count } = await prisma.feedback.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FeedbackDeleteManyArgs>(args?: SelectSubset<T, FeedbackDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Feedbacks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Feedbacks
     * const feedback = await prisma.feedback.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FeedbackUpdateManyArgs>(args: SelectSubset<T, FeedbackUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Feedbacks and returns the data updated in the database.
     * @param {FeedbackUpdateManyAndReturnArgs} args - Arguments to update many Feedbacks.
     * @example
     * // Update many Feedbacks
     * const feedback = await prisma.feedback.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Feedbacks and only return the `id`
     * const feedbackWithIdOnly = await prisma.feedback.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FeedbackUpdateManyAndReturnArgs>(args: SelectSubset<T, FeedbackUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Feedback.
     * @param {FeedbackUpsertArgs} args - Arguments to update or create a Feedback.
     * @example
     * // Update or create a Feedback
     * const feedback = await prisma.feedback.upsert({
     *   create: {
     *     // ... data to create a Feedback
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Feedback we want to update
     *   }
     * })
     */
    upsert<T extends FeedbackUpsertArgs>(args: SelectSubset<T, FeedbackUpsertArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Feedbacks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackCountArgs} args - Arguments to filter Feedbacks to count.
     * @example
     * // Count the number of Feedbacks
     * const count = await prisma.feedback.count({
     *   where: {
     *     // ... the filter for the Feedbacks we want to count
     *   }
     * })
    **/
    count<T extends FeedbackCountArgs>(
      args?: Subset<T, FeedbackCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FeedbackCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Feedback.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FeedbackAggregateArgs>(args: Subset<T, FeedbackAggregateArgs>): Prisma.PrismaPromise<GetFeedbackAggregateType<T>>

    /**
     * Group by Feedback.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FeedbackGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FeedbackGroupByArgs['orderBy'] }
        : { orderBy?: FeedbackGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FeedbackGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFeedbackGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Feedback model
   */
  readonly fields: FeedbackFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Feedback.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FeedbackClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    student<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    teacherCourse<T extends TeacherCourseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TeacherCourseDefaultArgs<ExtArgs>>): Prisma__TeacherCourseClient<$Result.GetResult<Prisma.$TeacherCoursePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    parameter<T extends FeedbackParameterDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FeedbackParameterDefaultArgs<ExtArgs>>): Prisma__FeedbackParameterClient<$Result.GetResult<Prisma.$FeedbackParameterPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Feedback model
   */
  interface FeedbackFieldRefs {
    readonly id: FieldRef<"Feedback", 'String'>
    readonly studentId: FieldRef<"Feedback", 'String'>
    readonly teacherCourseId: FieldRef<"Feedback", 'String'>
    readonly parameterId: FieldRef<"Feedback", 'String'>
    readonly rating: FieldRef<"Feedback", 'Int'>
    readonly comment: FieldRef<"Feedback", 'String'>
    readonly createdAt: FieldRef<"Feedback", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Feedback findUnique
   */
  export type FeedbackFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter, which Feedback to fetch.
     */
    where: FeedbackWhereUniqueInput
  }

  /**
   * Feedback findUniqueOrThrow
   */
  export type FeedbackFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter, which Feedback to fetch.
     */
    where: FeedbackWhereUniqueInput
  }

  /**
   * Feedback findFirst
   */
  export type FeedbackFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter, which Feedback to fetch.
     */
    where?: FeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Feedbacks to fetch.
     */
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Feedbacks.
     */
    cursor?: FeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Feedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Feedbacks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Feedbacks.
     */
    distinct?: FeedbackScalarFieldEnum | FeedbackScalarFieldEnum[]
  }

  /**
   * Feedback findFirstOrThrow
   */
  export type FeedbackFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter, which Feedback to fetch.
     */
    where?: FeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Feedbacks to fetch.
     */
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Feedbacks.
     */
    cursor?: FeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Feedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Feedbacks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Feedbacks.
     */
    distinct?: FeedbackScalarFieldEnum | FeedbackScalarFieldEnum[]
  }

  /**
   * Feedback findMany
   */
  export type FeedbackFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter, which Feedbacks to fetch.
     */
    where?: FeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Feedbacks to fetch.
     */
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Feedbacks.
     */
    cursor?: FeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Feedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Feedbacks.
     */
    skip?: number
    distinct?: FeedbackScalarFieldEnum | FeedbackScalarFieldEnum[]
  }

  /**
   * Feedback create
   */
  export type FeedbackCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * The data needed to create a Feedback.
     */
    data: XOR<FeedbackCreateInput, FeedbackUncheckedCreateInput>
  }

  /**
   * Feedback createMany
   */
  export type FeedbackCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Feedbacks.
     */
    data: FeedbackCreateManyInput | FeedbackCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Feedback createManyAndReturn
   */
  export type FeedbackCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * The data used to create many Feedbacks.
     */
    data: FeedbackCreateManyInput | FeedbackCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Feedback update
   */
  export type FeedbackUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * The data needed to update a Feedback.
     */
    data: XOR<FeedbackUpdateInput, FeedbackUncheckedUpdateInput>
    /**
     * Choose, which Feedback to update.
     */
    where: FeedbackWhereUniqueInput
  }

  /**
   * Feedback updateMany
   */
  export type FeedbackUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Feedbacks.
     */
    data: XOR<FeedbackUpdateManyMutationInput, FeedbackUncheckedUpdateManyInput>
    /**
     * Filter which Feedbacks to update
     */
    where?: FeedbackWhereInput
    /**
     * Limit how many Feedbacks to update.
     */
    limit?: number
  }

  /**
   * Feedback updateManyAndReturn
   */
  export type FeedbackUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * The data used to update Feedbacks.
     */
    data: XOR<FeedbackUpdateManyMutationInput, FeedbackUncheckedUpdateManyInput>
    /**
     * Filter which Feedbacks to update
     */
    where?: FeedbackWhereInput
    /**
     * Limit how many Feedbacks to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Feedback upsert
   */
  export type FeedbackUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * The filter to search for the Feedback to update in case it exists.
     */
    where: FeedbackWhereUniqueInput
    /**
     * In case the Feedback found by the `where` argument doesn't exist, create a new Feedback with this data.
     */
    create: XOR<FeedbackCreateInput, FeedbackUncheckedCreateInput>
    /**
     * In case the Feedback was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FeedbackUpdateInput, FeedbackUncheckedUpdateInput>
  }

  /**
   * Feedback delete
   */
  export type FeedbackDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter which Feedback to delete.
     */
    where: FeedbackWhereUniqueInput
  }

  /**
   * Feedback deleteMany
   */
  export type FeedbackDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Feedbacks to delete
     */
    where?: FeedbackWhereInput
    /**
     * Limit how many Feedbacks to delete.
     */
    limit?: number
  }

  /**
   * Feedback without action
   */
  export type FeedbackDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FeedbackInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    password: 'password',
    role: 'role',
    createdAt: 'createdAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const ClassScalarFieldEnum: {
    id: 'id',
    className: 'className',
    accessCode: 'accessCode',
    createdBy: 'createdBy'
  };

  export type ClassScalarFieldEnum = (typeof ClassScalarFieldEnum)[keyof typeof ClassScalarFieldEnum]


  export const StudentClassScalarFieldEnum: {
    id: 'id',
    studentId: 'studentId',
    classId: 'classId'
  };

  export type StudentClassScalarFieldEnum = (typeof StudentClassScalarFieldEnum)[keyof typeof StudentClassScalarFieldEnum]


  export const CourseScalarFieldEnum: {
    id: 'id',
    courseName: 'courseName',
    courseCode: 'courseCode',
    courseType: 'courseType',
    createdBy: 'createdBy'
  };

  export type CourseScalarFieldEnum = (typeof CourseScalarFieldEnum)[keyof typeof CourseScalarFieldEnum]


  export const TeacherScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    assignedBy: 'assignedBy'
  };

  export type TeacherScalarFieldEnum = (typeof TeacherScalarFieldEnum)[keyof typeof TeacherScalarFieldEnum]


  export const TeacherCourseScalarFieldEnum: {
    id: 'id',
    teacherId: 'teacherId',
    courseId: 'courseId',
    classId: 'classId'
  };

  export type TeacherCourseScalarFieldEnum = (typeof TeacherCourseScalarFieldEnum)[keyof typeof TeacherCourseScalarFieldEnum]


  export const FeedbackParameterScalarFieldEnum: {
    id: 'id',
    parameterName: 'parameterName',
    parameterType: 'parameterType',
    createdBy: 'createdBy'
  };

  export type FeedbackParameterScalarFieldEnum = (typeof FeedbackParameterScalarFieldEnum)[keyof typeof FeedbackParameterScalarFieldEnum]


  export const FeedbackScalarFieldEnum: {
    id: 'id',
    studentId: 'studentId',
    teacherCourseId: 'teacherCourseId',
    parameterId: 'parameterId',
    rating: 'rating',
    comment: 'comment',
    createdAt: 'createdAt'
  };

  export type FeedbackScalarFieldEnum = (typeof FeedbackScalarFieldEnum)[keyof typeof FeedbackScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'Role[]'
   */
  export type ListEnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'CourseType'
   */
  export type EnumCourseTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CourseType'>
    


  /**
   * Reference to a field of type 'CourseType[]'
   */
  export type ListEnumCourseTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CourseType[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    createdAt?: DateTimeFilter<"User"> | Date | string
    createdClasses?: ClassListRelationFilter
    createdCourses?: CourseListRelationFilter
    createdParameters?: FeedbackParameterListRelationFilter
    assignedTeachers?: TeacherListRelationFilter
    studentClasses?: StudentClassListRelationFilter
    feedbacks?: FeedbackListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    createdClasses?: ClassOrderByRelationAggregateInput
    createdCourses?: CourseOrderByRelationAggregateInput
    createdParameters?: FeedbackParameterOrderByRelationAggregateInput
    assignedTeachers?: TeacherOrderByRelationAggregateInput
    studentClasses?: StudentClassOrderByRelationAggregateInput
    feedbacks?: FeedbackOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    createdAt?: DateTimeFilter<"User"> | Date | string
    createdClasses?: ClassListRelationFilter
    createdCourses?: CourseListRelationFilter
    createdParameters?: FeedbackParameterListRelationFilter
    assignedTeachers?: TeacherListRelationFilter
    studentClasses?: StudentClassListRelationFilter
    feedbacks?: FeedbackListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    name?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    role?: EnumRoleWithAggregatesFilter<"User"> | $Enums.Role
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type ClassWhereInput = {
    AND?: ClassWhereInput | ClassWhereInput[]
    OR?: ClassWhereInput[]
    NOT?: ClassWhereInput | ClassWhereInput[]
    id?: StringFilter<"Class"> | string
    className?: StringFilter<"Class"> | string
    accessCode?: StringFilter<"Class"> | string
    createdBy?: StringFilter<"Class"> | string
    creator?: XOR<UserScalarRelationFilter, UserWhereInput>
    studentClasses?: StudentClassListRelationFilter
    teacherCourses?: TeacherCourseListRelationFilter
  }

  export type ClassOrderByWithRelationInput = {
    id?: SortOrder
    className?: SortOrder
    accessCode?: SortOrder
    createdBy?: SortOrder
    creator?: UserOrderByWithRelationInput
    studentClasses?: StudentClassOrderByRelationAggregateInput
    teacherCourses?: TeacherCourseOrderByRelationAggregateInput
  }

  export type ClassWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    accessCode?: string
    AND?: ClassWhereInput | ClassWhereInput[]
    OR?: ClassWhereInput[]
    NOT?: ClassWhereInput | ClassWhereInput[]
    className?: StringFilter<"Class"> | string
    createdBy?: StringFilter<"Class"> | string
    creator?: XOR<UserScalarRelationFilter, UserWhereInput>
    studentClasses?: StudentClassListRelationFilter
    teacherCourses?: TeacherCourseListRelationFilter
  }, "id" | "accessCode">

  export type ClassOrderByWithAggregationInput = {
    id?: SortOrder
    className?: SortOrder
    accessCode?: SortOrder
    createdBy?: SortOrder
    _count?: ClassCountOrderByAggregateInput
    _max?: ClassMaxOrderByAggregateInput
    _min?: ClassMinOrderByAggregateInput
  }

  export type ClassScalarWhereWithAggregatesInput = {
    AND?: ClassScalarWhereWithAggregatesInput | ClassScalarWhereWithAggregatesInput[]
    OR?: ClassScalarWhereWithAggregatesInput[]
    NOT?: ClassScalarWhereWithAggregatesInput | ClassScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Class"> | string
    className?: StringWithAggregatesFilter<"Class"> | string
    accessCode?: StringWithAggregatesFilter<"Class"> | string
    createdBy?: StringWithAggregatesFilter<"Class"> | string
  }

  export type StudentClassWhereInput = {
    AND?: StudentClassWhereInput | StudentClassWhereInput[]
    OR?: StudentClassWhereInput[]
    NOT?: StudentClassWhereInput | StudentClassWhereInput[]
    id?: StringFilter<"StudentClass"> | string
    studentId?: StringFilter<"StudentClass"> | string
    classId?: StringFilter<"StudentClass"> | string
    student?: XOR<UserScalarRelationFilter, UserWhereInput>
    class?: XOR<ClassScalarRelationFilter, ClassWhereInput>
  }

  export type StudentClassOrderByWithRelationInput = {
    id?: SortOrder
    studentId?: SortOrder
    classId?: SortOrder
    student?: UserOrderByWithRelationInput
    class?: ClassOrderByWithRelationInput
  }

  export type StudentClassWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: StudentClassWhereInput | StudentClassWhereInput[]
    OR?: StudentClassWhereInput[]
    NOT?: StudentClassWhereInput | StudentClassWhereInput[]
    studentId?: StringFilter<"StudentClass"> | string
    classId?: StringFilter<"StudentClass"> | string
    student?: XOR<UserScalarRelationFilter, UserWhereInput>
    class?: XOR<ClassScalarRelationFilter, ClassWhereInput>
  }, "id">

  export type StudentClassOrderByWithAggregationInput = {
    id?: SortOrder
    studentId?: SortOrder
    classId?: SortOrder
    _count?: StudentClassCountOrderByAggregateInput
    _max?: StudentClassMaxOrderByAggregateInput
    _min?: StudentClassMinOrderByAggregateInput
  }

  export type StudentClassScalarWhereWithAggregatesInput = {
    AND?: StudentClassScalarWhereWithAggregatesInput | StudentClassScalarWhereWithAggregatesInput[]
    OR?: StudentClassScalarWhereWithAggregatesInput[]
    NOT?: StudentClassScalarWhereWithAggregatesInput | StudentClassScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"StudentClass"> | string
    studentId?: StringWithAggregatesFilter<"StudentClass"> | string
    classId?: StringWithAggregatesFilter<"StudentClass"> | string
  }

  export type CourseWhereInput = {
    AND?: CourseWhereInput | CourseWhereInput[]
    OR?: CourseWhereInput[]
    NOT?: CourseWhereInput | CourseWhereInput[]
    id?: StringFilter<"Course"> | string
    courseName?: StringFilter<"Course"> | string
    courseCode?: StringFilter<"Course"> | string
    courseType?: EnumCourseTypeFilter<"Course"> | $Enums.CourseType
    createdBy?: StringFilter<"Course"> | string
    creator?: XOR<UserScalarRelationFilter, UserWhereInput>
    teacherCourses?: TeacherCourseListRelationFilter
  }

  export type CourseOrderByWithRelationInput = {
    id?: SortOrder
    courseName?: SortOrder
    courseCode?: SortOrder
    courseType?: SortOrder
    createdBy?: SortOrder
    creator?: UserOrderByWithRelationInput
    teacherCourses?: TeacherCourseOrderByRelationAggregateInput
  }

  export type CourseWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CourseWhereInput | CourseWhereInput[]
    OR?: CourseWhereInput[]
    NOT?: CourseWhereInput | CourseWhereInput[]
    courseName?: StringFilter<"Course"> | string
    courseCode?: StringFilter<"Course"> | string
    courseType?: EnumCourseTypeFilter<"Course"> | $Enums.CourseType
    createdBy?: StringFilter<"Course"> | string
    creator?: XOR<UserScalarRelationFilter, UserWhereInput>
    teacherCourses?: TeacherCourseListRelationFilter
  }, "id">

  export type CourseOrderByWithAggregationInput = {
    id?: SortOrder
    courseName?: SortOrder
    courseCode?: SortOrder
    courseType?: SortOrder
    createdBy?: SortOrder
    _count?: CourseCountOrderByAggregateInput
    _max?: CourseMaxOrderByAggregateInput
    _min?: CourseMinOrderByAggregateInput
  }

  export type CourseScalarWhereWithAggregatesInput = {
    AND?: CourseScalarWhereWithAggregatesInput | CourseScalarWhereWithAggregatesInput[]
    OR?: CourseScalarWhereWithAggregatesInput[]
    NOT?: CourseScalarWhereWithAggregatesInput | CourseScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Course"> | string
    courseName?: StringWithAggregatesFilter<"Course"> | string
    courseCode?: StringWithAggregatesFilter<"Course"> | string
    courseType?: EnumCourseTypeWithAggregatesFilter<"Course"> | $Enums.CourseType
    createdBy?: StringWithAggregatesFilter<"Course"> | string
  }

  export type TeacherWhereInput = {
    AND?: TeacherWhereInput | TeacherWhereInput[]
    OR?: TeacherWhereInput[]
    NOT?: TeacherWhereInput | TeacherWhereInput[]
    id?: StringFilter<"Teacher"> | string
    name?: StringFilter<"Teacher"> | string
    email?: StringNullableFilter<"Teacher"> | string | null
    assignedBy?: StringFilter<"Teacher"> | string
    assigner?: XOR<UserScalarRelationFilter, UserWhereInput>
    teacherCourses?: TeacherCourseListRelationFilter
  }

  export type TeacherOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrderInput | SortOrder
    assignedBy?: SortOrder
    assigner?: UserOrderByWithRelationInput
    teacherCourses?: TeacherCourseOrderByRelationAggregateInput
  }

  export type TeacherWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TeacherWhereInput | TeacherWhereInput[]
    OR?: TeacherWhereInput[]
    NOT?: TeacherWhereInput | TeacherWhereInput[]
    name?: StringFilter<"Teacher"> | string
    email?: StringNullableFilter<"Teacher"> | string | null
    assignedBy?: StringFilter<"Teacher"> | string
    assigner?: XOR<UserScalarRelationFilter, UserWhereInput>
    teacherCourses?: TeacherCourseListRelationFilter
  }, "id">

  export type TeacherOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrderInput | SortOrder
    assignedBy?: SortOrder
    _count?: TeacherCountOrderByAggregateInput
    _max?: TeacherMaxOrderByAggregateInput
    _min?: TeacherMinOrderByAggregateInput
  }

  export type TeacherScalarWhereWithAggregatesInput = {
    AND?: TeacherScalarWhereWithAggregatesInput | TeacherScalarWhereWithAggregatesInput[]
    OR?: TeacherScalarWhereWithAggregatesInput[]
    NOT?: TeacherScalarWhereWithAggregatesInput | TeacherScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Teacher"> | string
    name?: StringWithAggregatesFilter<"Teacher"> | string
    email?: StringNullableWithAggregatesFilter<"Teacher"> | string | null
    assignedBy?: StringWithAggregatesFilter<"Teacher"> | string
  }

  export type TeacherCourseWhereInput = {
    AND?: TeacherCourseWhereInput | TeacherCourseWhereInput[]
    OR?: TeacherCourseWhereInput[]
    NOT?: TeacherCourseWhereInput | TeacherCourseWhereInput[]
    id?: StringFilter<"TeacherCourse"> | string
    teacherId?: StringFilter<"TeacherCourse"> | string
    courseId?: StringFilter<"TeacherCourse"> | string
    classId?: StringFilter<"TeacherCourse"> | string
    teacher?: XOR<TeacherScalarRelationFilter, TeacherWhereInput>
    course?: XOR<CourseScalarRelationFilter, CourseWhereInput>
    class?: XOR<ClassScalarRelationFilter, ClassWhereInput>
    feedbacks?: FeedbackListRelationFilter
  }

  export type TeacherCourseOrderByWithRelationInput = {
    id?: SortOrder
    teacherId?: SortOrder
    courseId?: SortOrder
    classId?: SortOrder
    teacher?: TeacherOrderByWithRelationInput
    course?: CourseOrderByWithRelationInput
    class?: ClassOrderByWithRelationInput
    feedbacks?: FeedbackOrderByRelationAggregateInput
  }

  export type TeacherCourseWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TeacherCourseWhereInput | TeacherCourseWhereInput[]
    OR?: TeacherCourseWhereInput[]
    NOT?: TeacherCourseWhereInput | TeacherCourseWhereInput[]
    teacherId?: StringFilter<"TeacherCourse"> | string
    courseId?: StringFilter<"TeacherCourse"> | string
    classId?: StringFilter<"TeacherCourse"> | string
    teacher?: XOR<TeacherScalarRelationFilter, TeacherWhereInput>
    course?: XOR<CourseScalarRelationFilter, CourseWhereInput>
    class?: XOR<ClassScalarRelationFilter, ClassWhereInput>
    feedbacks?: FeedbackListRelationFilter
  }, "id">

  export type TeacherCourseOrderByWithAggregationInput = {
    id?: SortOrder
    teacherId?: SortOrder
    courseId?: SortOrder
    classId?: SortOrder
    _count?: TeacherCourseCountOrderByAggregateInput
    _max?: TeacherCourseMaxOrderByAggregateInput
    _min?: TeacherCourseMinOrderByAggregateInput
  }

  export type TeacherCourseScalarWhereWithAggregatesInput = {
    AND?: TeacherCourseScalarWhereWithAggregatesInput | TeacherCourseScalarWhereWithAggregatesInput[]
    OR?: TeacherCourseScalarWhereWithAggregatesInput[]
    NOT?: TeacherCourseScalarWhereWithAggregatesInput | TeacherCourseScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TeacherCourse"> | string
    teacherId?: StringWithAggregatesFilter<"TeacherCourse"> | string
    courseId?: StringWithAggregatesFilter<"TeacherCourse"> | string
    classId?: StringWithAggregatesFilter<"TeacherCourse"> | string
  }

  export type FeedbackParameterWhereInput = {
    AND?: FeedbackParameterWhereInput | FeedbackParameterWhereInput[]
    OR?: FeedbackParameterWhereInput[]
    NOT?: FeedbackParameterWhereInput | FeedbackParameterWhereInput[]
    id?: StringFilter<"FeedbackParameter"> | string
    parameterName?: StringFilter<"FeedbackParameter"> | string
    parameterType?: EnumCourseTypeFilter<"FeedbackParameter"> | $Enums.CourseType
    createdBy?: StringFilter<"FeedbackParameter"> | string
    creator?: XOR<UserScalarRelationFilter, UserWhereInput>
    feedbacks?: FeedbackListRelationFilter
  }

  export type FeedbackParameterOrderByWithRelationInput = {
    id?: SortOrder
    parameterName?: SortOrder
    parameterType?: SortOrder
    createdBy?: SortOrder
    creator?: UserOrderByWithRelationInput
    feedbacks?: FeedbackOrderByRelationAggregateInput
  }

  export type FeedbackParameterWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: FeedbackParameterWhereInput | FeedbackParameterWhereInput[]
    OR?: FeedbackParameterWhereInput[]
    NOT?: FeedbackParameterWhereInput | FeedbackParameterWhereInput[]
    parameterName?: StringFilter<"FeedbackParameter"> | string
    parameterType?: EnumCourseTypeFilter<"FeedbackParameter"> | $Enums.CourseType
    createdBy?: StringFilter<"FeedbackParameter"> | string
    creator?: XOR<UserScalarRelationFilter, UserWhereInput>
    feedbacks?: FeedbackListRelationFilter
  }, "id">

  export type FeedbackParameterOrderByWithAggregationInput = {
    id?: SortOrder
    parameterName?: SortOrder
    parameterType?: SortOrder
    createdBy?: SortOrder
    _count?: FeedbackParameterCountOrderByAggregateInput
    _max?: FeedbackParameterMaxOrderByAggregateInput
    _min?: FeedbackParameterMinOrderByAggregateInput
  }

  export type FeedbackParameterScalarWhereWithAggregatesInput = {
    AND?: FeedbackParameterScalarWhereWithAggregatesInput | FeedbackParameterScalarWhereWithAggregatesInput[]
    OR?: FeedbackParameterScalarWhereWithAggregatesInput[]
    NOT?: FeedbackParameterScalarWhereWithAggregatesInput | FeedbackParameterScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"FeedbackParameter"> | string
    parameterName?: StringWithAggregatesFilter<"FeedbackParameter"> | string
    parameterType?: EnumCourseTypeWithAggregatesFilter<"FeedbackParameter"> | $Enums.CourseType
    createdBy?: StringWithAggregatesFilter<"FeedbackParameter"> | string
  }

  export type FeedbackWhereInput = {
    AND?: FeedbackWhereInput | FeedbackWhereInput[]
    OR?: FeedbackWhereInput[]
    NOT?: FeedbackWhereInput | FeedbackWhereInput[]
    id?: StringFilter<"Feedback"> | string
    studentId?: StringFilter<"Feedback"> | string
    teacherCourseId?: StringFilter<"Feedback"> | string
    parameterId?: StringFilter<"Feedback"> | string
    rating?: IntFilter<"Feedback"> | number
    comment?: StringNullableFilter<"Feedback"> | string | null
    createdAt?: DateTimeFilter<"Feedback"> | Date | string
    student?: XOR<UserScalarRelationFilter, UserWhereInput>
    teacherCourse?: XOR<TeacherCourseScalarRelationFilter, TeacherCourseWhereInput>
    parameter?: XOR<FeedbackParameterScalarRelationFilter, FeedbackParameterWhereInput>
  }

  export type FeedbackOrderByWithRelationInput = {
    id?: SortOrder
    studentId?: SortOrder
    teacherCourseId?: SortOrder
    parameterId?: SortOrder
    rating?: SortOrder
    comment?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    student?: UserOrderByWithRelationInput
    teacherCourse?: TeacherCourseOrderByWithRelationInput
    parameter?: FeedbackParameterOrderByWithRelationInput
  }

  export type FeedbackWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: FeedbackWhereInput | FeedbackWhereInput[]
    OR?: FeedbackWhereInput[]
    NOT?: FeedbackWhereInput | FeedbackWhereInput[]
    studentId?: StringFilter<"Feedback"> | string
    teacherCourseId?: StringFilter<"Feedback"> | string
    parameterId?: StringFilter<"Feedback"> | string
    rating?: IntFilter<"Feedback"> | number
    comment?: StringNullableFilter<"Feedback"> | string | null
    createdAt?: DateTimeFilter<"Feedback"> | Date | string
    student?: XOR<UserScalarRelationFilter, UserWhereInput>
    teacherCourse?: XOR<TeacherCourseScalarRelationFilter, TeacherCourseWhereInput>
    parameter?: XOR<FeedbackParameterScalarRelationFilter, FeedbackParameterWhereInput>
  }, "id">

  export type FeedbackOrderByWithAggregationInput = {
    id?: SortOrder
    studentId?: SortOrder
    teacherCourseId?: SortOrder
    parameterId?: SortOrder
    rating?: SortOrder
    comment?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: FeedbackCountOrderByAggregateInput
    _avg?: FeedbackAvgOrderByAggregateInput
    _max?: FeedbackMaxOrderByAggregateInput
    _min?: FeedbackMinOrderByAggregateInput
    _sum?: FeedbackSumOrderByAggregateInput
  }

  export type FeedbackScalarWhereWithAggregatesInput = {
    AND?: FeedbackScalarWhereWithAggregatesInput | FeedbackScalarWhereWithAggregatesInput[]
    OR?: FeedbackScalarWhereWithAggregatesInput[]
    NOT?: FeedbackScalarWhereWithAggregatesInput | FeedbackScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Feedback"> | string
    studentId?: StringWithAggregatesFilter<"Feedback"> | string
    teacherCourseId?: StringWithAggregatesFilter<"Feedback"> | string
    parameterId?: StringWithAggregatesFilter<"Feedback"> | string
    rating?: IntWithAggregatesFilter<"Feedback"> | number
    comment?: StringNullableWithAggregatesFilter<"Feedback"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Feedback"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    name: string
    email: string
    password: string
    role: $Enums.Role
    createdAt?: Date | string
    createdClasses?: ClassCreateNestedManyWithoutCreatorInput
    createdCourses?: CourseCreateNestedManyWithoutCreatorInput
    createdParameters?: FeedbackParameterCreateNestedManyWithoutCreatorInput
    assignedTeachers?: TeacherCreateNestedManyWithoutAssignerInput
    studentClasses?: StudentClassCreateNestedManyWithoutStudentInput
    feedbacks?: FeedbackCreateNestedManyWithoutStudentInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    name: string
    email: string
    password: string
    role: $Enums.Role
    createdAt?: Date | string
    createdClasses?: ClassUncheckedCreateNestedManyWithoutCreatorInput
    createdCourses?: CourseUncheckedCreateNestedManyWithoutCreatorInput
    createdParameters?: FeedbackParameterUncheckedCreateNestedManyWithoutCreatorInput
    assignedTeachers?: TeacherUncheckedCreateNestedManyWithoutAssignerInput
    studentClasses?: StudentClassUncheckedCreateNestedManyWithoutStudentInput
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutStudentInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdClasses?: ClassUpdateManyWithoutCreatorNestedInput
    createdCourses?: CourseUpdateManyWithoutCreatorNestedInput
    createdParameters?: FeedbackParameterUpdateManyWithoutCreatorNestedInput
    assignedTeachers?: TeacherUpdateManyWithoutAssignerNestedInput
    studentClasses?: StudentClassUpdateManyWithoutStudentNestedInput
    feedbacks?: FeedbackUpdateManyWithoutStudentNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdClasses?: ClassUncheckedUpdateManyWithoutCreatorNestedInput
    createdCourses?: CourseUncheckedUpdateManyWithoutCreatorNestedInput
    createdParameters?: FeedbackParameterUncheckedUpdateManyWithoutCreatorNestedInput
    assignedTeachers?: TeacherUncheckedUpdateManyWithoutAssignerNestedInput
    studentClasses?: StudentClassUncheckedUpdateManyWithoutStudentNestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    name: string
    email: string
    password: string
    role: $Enums.Role
    createdAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClassCreateInput = {
    id?: string
    className: string
    accessCode: string
    creator: UserCreateNestedOneWithoutCreatedClassesInput
    studentClasses?: StudentClassCreateNestedManyWithoutClassInput
    teacherCourses?: TeacherCourseCreateNestedManyWithoutClassInput
  }

  export type ClassUncheckedCreateInput = {
    id?: string
    className: string
    accessCode: string
    createdBy: string
    studentClasses?: StudentClassUncheckedCreateNestedManyWithoutClassInput
    teacherCourses?: TeacherCourseUncheckedCreateNestedManyWithoutClassInput
  }

  export type ClassUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    className?: StringFieldUpdateOperationsInput | string
    accessCode?: StringFieldUpdateOperationsInput | string
    creator?: UserUpdateOneRequiredWithoutCreatedClassesNestedInput
    studentClasses?: StudentClassUpdateManyWithoutClassNestedInput
    teacherCourses?: TeacherCourseUpdateManyWithoutClassNestedInput
  }

  export type ClassUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    className?: StringFieldUpdateOperationsInput | string
    accessCode?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    studentClasses?: StudentClassUncheckedUpdateManyWithoutClassNestedInput
    teacherCourses?: TeacherCourseUncheckedUpdateManyWithoutClassNestedInput
  }

  export type ClassCreateManyInput = {
    id?: string
    className: string
    accessCode: string
    createdBy: string
  }

  export type ClassUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    className?: StringFieldUpdateOperationsInput | string
    accessCode?: StringFieldUpdateOperationsInput | string
  }

  export type ClassUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    className?: StringFieldUpdateOperationsInput | string
    accessCode?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
  }

  export type StudentClassCreateInput = {
    id?: string
    student: UserCreateNestedOneWithoutStudentClassesInput
    class: ClassCreateNestedOneWithoutStudentClassesInput
  }

  export type StudentClassUncheckedCreateInput = {
    id?: string
    studentId: string
    classId: string
  }

  export type StudentClassUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    student?: UserUpdateOneRequiredWithoutStudentClassesNestedInput
    class?: ClassUpdateOneRequiredWithoutStudentClassesNestedInput
  }

  export type StudentClassUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    classId?: StringFieldUpdateOperationsInput | string
  }

  export type StudentClassCreateManyInput = {
    id?: string
    studentId: string
    classId: string
  }

  export type StudentClassUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type StudentClassUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    classId?: StringFieldUpdateOperationsInput | string
  }

  export type CourseCreateInput = {
    id?: string
    courseName: string
    courseCode: string
    courseType: $Enums.CourseType
    creator: UserCreateNestedOneWithoutCreatedCoursesInput
    teacherCourses?: TeacherCourseCreateNestedManyWithoutCourseInput
  }

  export type CourseUncheckedCreateInput = {
    id?: string
    courseName: string
    courseCode: string
    courseType: $Enums.CourseType
    createdBy: string
    teacherCourses?: TeacherCourseUncheckedCreateNestedManyWithoutCourseInput
  }

  export type CourseUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    courseName?: StringFieldUpdateOperationsInput | string
    courseCode?: StringFieldUpdateOperationsInput | string
    courseType?: EnumCourseTypeFieldUpdateOperationsInput | $Enums.CourseType
    creator?: UserUpdateOneRequiredWithoutCreatedCoursesNestedInput
    teacherCourses?: TeacherCourseUpdateManyWithoutCourseNestedInput
  }

  export type CourseUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    courseName?: StringFieldUpdateOperationsInput | string
    courseCode?: StringFieldUpdateOperationsInput | string
    courseType?: EnumCourseTypeFieldUpdateOperationsInput | $Enums.CourseType
    createdBy?: StringFieldUpdateOperationsInput | string
    teacherCourses?: TeacherCourseUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type CourseCreateManyInput = {
    id?: string
    courseName: string
    courseCode: string
    courseType: $Enums.CourseType
    createdBy: string
  }

  export type CourseUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    courseName?: StringFieldUpdateOperationsInput | string
    courseCode?: StringFieldUpdateOperationsInput | string
    courseType?: EnumCourseTypeFieldUpdateOperationsInput | $Enums.CourseType
  }

  export type CourseUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    courseName?: StringFieldUpdateOperationsInput | string
    courseCode?: StringFieldUpdateOperationsInput | string
    courseType?: EnumCourseTypeFieldUpdateOperationsInput | $Enums.CourseType
    createdBy?: StringFieldUpdateOperationsInput | string
  }

  export type TeacherCreateInput = {
    id?: string
    name: string
    email?: string | null
    assigner: UserCreateNestedOneWithoutAssignedTeachersInput
    teacherCourses?: TeacherCourseCreateNestedManyWithoutTeacherInput
  }

  export type TeacherUncheckedCreateInput = {
    id?: string
    name: string
    email?: string | null
    assignedBy: string
    teacherCourses?: TeacherCourseUncheckedCreateNestedManyWithoutTeacherInput
  }

  export type TeacherUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    assigner?: UserUpdateOneRequiredWithoutAssignedTeachersNestedInput
    teacherCourses?: TeacherCourseUpdateManyWithoutTeacherNestedInput
  }

  export type TeacherUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    assignedBy?: StringFieldUpdateOperationsInput | string
    teacherCourses?: TeacherCourseUncheckedUpdateManyWithoutTeacherNestedInput
  }

  export type TeacherCreateManyInput = {
    id?: string
    name: string
    email?: string | null
    assignedBy: string
  }

  export type TeacherUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TeacherUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    assignedBy?: StringFieldUpdateOperationsInput | string
  }

  export type TeacherCourseCreateInput = {
    id?: string
    teacher: TeacherCreateNestedOneWithoutTeacherCoursesInput
    course: CourseCreateNestedOneWithoutTeacherCoursesInput
    class: ClassCreateNestedOneWithoutTeacherCoursesInput
    feedbacks?: FeedbackCreateNestedManyWithoutTeacherCourseInput
  }

  export type TeacherCourseUncheckedCreateInput = {
    id?: string
    teacherId: string
    courseId: string
    classId: string
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutTeacherCourseInput
  }

  export type TeacherCourseUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    teacher?: TeacherUpdateOneRequiredWithoutTeacherCoursesNestedInput
    course?: CourseUpdateOneRequiredWithoutTeacherCoursesNestedInput
    class?: ClassUpdateOneRequiredWithoutTeacherCoursesNestedInput
    feedbacks?: FeedbackUpdateManyWithoutTeacherCourseNestedInput
  }

  export type TeacherCourseUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    teacherId?: StringFieldUpdateOperationsInput | string
    courseId?: StringFieldUpdateOperationsInput | string
    classId?: StringFieldUpdateOperationsInput | string
    feedbacks?: FeedbackUncheckedUpdateManyWithoutTeacherCourseNestedInput
  }

  export type TeacherCourseCreateManyInput = {
    id?: string
    teacherId: string
    courseId: string
    classId: string
  }

  export type TeacherCourseUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type TeacherCourseUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    teacherId?: StringFieldUpdateOperationsInput | string
    courseId?: StringFieldUpdateOperationsInput | string
    classId?: StringFieldUpdateOperationsInput | string
  }

  export type FeedbackParameterCreateInput = {
    id?: string
    parameterName: string
    parameterType: $Enums.CourseType
    creator: UserCreateNestedOneWithoutCreatedParametersInput
    feedbacks?: FeedbackCreateNestedManyWithoutParameterInput
  }

  export type FeedbackParameterUncheckedCreateInput = {
    id?: string
    parameterName: string
    parameterType: $Enums.CourseType
    createdBy: string
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutParameterInput
  }

  export type FeedbackParameterUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    parameterName?: StringFieldUpdateOperationsInput | string
    parameterType?: EnumCourseTypeFieldUpdateOperationsInput | $Enums.CourseType
    creator?: UserUpdateOneRequiredWithoutCreatedParametersNestedInput
    feedbacks?: FeedbackUpdateManyWithoutParameterNestedInput
  }

  export type FeedbackParameterUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    parameterName?: StringFieldUpdateOperationsInput | string
    parameterType?: EnumCourseTypeFieldUpdateOperationsInput | $Enums.CourseType
    createdBy?: StringFieldUpdateOperationsInput | string
    feedbacks?: FeedbackUncheckedUpdateManyWithoutParameterNestedInput
  }

  export type FeedbackParameterCreateManyInput = {
    id?: string
    parameterName: string
    parameterType: $Enums.CourseType
    createdBy: string
  }

  export type FeedbackParameterUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    parameterName?: StringFieldUpdateOperationsInput | string
    parameterType?: EnumCourseTypeFieldUpdateOperationsInput | $Enums.CourseType
  }

  export type FeedbackParameterUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    parameterName?: StringFieldUpdateOperationsInput | string
    parameterType?: EnumCourseTypeFieldUpdateOperationsInput | $Enums.CourseType
    createdBy?: StringFieldUpdateOperationsInput | string
  }

  export type FeedbackCreateInput = {
    id?: string
    rating: number
    comment?: string | null
    createdAt?: Date | string
    student: UserCreateNestedOneWithoutFeedbacksInput
    teacherCourse: TeacherCourseCreateNestedOneWithoutFeedbacksInput
    parameter: FeedbackParameterCreateNestedOneWithoutFeedbacksInput
  }

  export type FeedbackUncheckedCreateInput = {
    id?: string
    studentId: string
    teacherCourseId: string
    parameterId: string
    rating: number
    comment?: string | null
    createdAt?: Date | string
  }

  export type FeedbackUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    student?: UserUpdateOneRequiredWithoutFeedbacksNestedInput
    teacherCourse?: TeacherCourseUpdateOneRequiredWithoutFeedbacksNestedInput
    parameter?: FeedbackParameterUpdateOneRequiredWithoutFeedbacksNestedInput
  }

  export type FeedbackUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    teacherCourseId?: StringFieldUpdateOperationsInput | string
    parameterId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedbackCreateManyInput = {
    id?: string
    studentId: string
    teacherCourseId: string
    parameterId: string
    rating: number
    comment?: string | null
    createdAt?: Date | string
  }

  export type FeedbackUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedbackUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    teacherCourseId?: StringFieldUpdateOperationsInput | string
    parameterId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type ClassListRelationFilter = {
    every?: ClassWhereInput
    some?: ClassWhereInput
    none?: ClassWhereInput
  }

  export type CourseListRelationFilter = {
    every?: CourseWhereInput
    some?: CourseWhereInput
    none?: CourseWhereInput
  }

  export type FeedbackParameterListRelationFilter = {
    every?: FeedbackParameterWhereInput
    some?: FeedbackParameterWhereInput
    none?: FeedbackParameterWhereInput
  }

  export type TeacherListRelationFilter = {
    every?: TeacherWhereInput
    some?: TeacherWhereInput
    none?: TeacherWhereInput
  }

  export type StudentClassListRelationFilter = {
    every?: StudentClassWhereInput
    some?: StudentClassWhereInput
    none?: StudentClassWhereInput
  }

  export type FeedbackListRelationFilter = {
    every?: FeedbackWhereInput
    some?: FeedbackWhereInput
    none?: FeedbackWhereInput
  }

  export type ClassOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CourseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FeedbackParameterOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TeacherOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StudentClassOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FeedbackOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type TeacherCourseListRelationFilter = {
    every?: TeacherCourseWhereInput
    some?: TeacherCourseWhereInput
    none?: TeacherCourseWhereInput
  }

  export type TeacherCourseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ClassCountOrderByAggregateInput = {
    id?: SortOrder
    className?: SortOrder
    accessCode?: SortOrder
    createdBy?: SortOrder
  }

  export type ClassMaxOrderByAggregateInput = {
    id?: SortOrder
    className?: SortOrder
    accessCode?: SortOrder
    createdBy?: SortOrder
  }

  export type ClassMinOrderByAggregateInput = {
    id?: SortOrder
    className?: SortOrder
    accessCode?: SortOrder
    createdBy?: SortOrder
  }

  export type ClassScalarRelationFilter = {
    is?: ClassWhereInput
    isNot?: ClassWhereInput
  }

  export type StudentClassCountOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    classId?: SortOrder
  }

  export type StudentClassMaxOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    classId?: SortOrder
  }

  export type StudentClassMinOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    classId?: SortOrder
  }

  export type EnumCourseTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.CourseType | EnumCourseTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CourseType[] | ListEnumCourseTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CourseType[] | ListEnumCourseTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCourseTypeFilter<$PrismaModel> | $Enums.CourseType
  }

  export type CourseCountOrderByAggregateInput = {
    id?: SortOrder
    courseName?: SortOrder
    courseCode?: SortOrder
    courseType?: SortOrder
    createdBy?: SortOrder
  }

  export type CourseMaxOrderByAggregateInput = {
    id?: SortOrder
    courseName?: SortOrder
    courseCode?: SortOrder
    courseType?: SortOrder
    createdBy?: SortOrder
  }

  export type CourseMinOrderByAggregateInput = {
    id?: SortOrder
    courseName?: SortOrder
    courseCode?: SortOrder
    courseType?: SortOrder
    createdBy?: SortOrder
  }

  export type EnumCourseTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CourseType | EnumCourseTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CourseType[] | ListEnumCourseTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CourseType[] | ListEnumCourseTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCourseTypeWithAggregatesFilter<$PrismaModel> | $Enums.CourseType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCourseTypeFilter<$PrismaModel>
    _max?: NestedEnumCourseTypeFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type TeacherCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    assignedBy?: SortOrder
  }

  export type TeacherMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    assignedBy?: SortOrder
  }

  export type TeacherMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    assignedBy?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type TeacherScalarRelationFilter = {
    is?: TeacherWhereInput
    isNot?: TeacherWhereInput
  }

  export type CourseScalarRelationFilter = {
    is?: CourseWhereInput
    isNot?: CourseWhereInput
  }

  export type TeacherCourseCountOrderByAggregateInput = {
    id?: SortOrder
    teacherId?: SortOrder
    courseId?: SortOrder
    classId?: SortOrder
  }

  export type TeacherCourseMaxOrderByAggregateInput = {
    id?: SortOrder
    teacherId?: SortOrder
    courseId?: SortOrder
    classId?: SortOrder
  }

  export type TeacherCourseMinOrderByAggregateInput = {
    id?: SortOrder
    teacherId?: SortOrder
    courseId?: SortOrder
    classId?: SortOrder
  }

  export type FeedbackParameterCountOrderByAggregateInput = {
    id?: SortOrder
    parameterName?: SortOrder
    parameterType?: SortOrder
    createdBy?: SortOrder
  }

  export type FeedbackParameterMaxOrderByAggregateInput = {
    id?: SortOrder
    parameterName?: SortOrder
    parameterType?: SortOrder
    createdBy?: SortOrder
  }

  export type FeedbackParameterMinOrderByAggregateInput = {
    id?: SortOrder
    parameterName?: SortOrder
    parameterType?: SortOrder
    createdBy?: SortOrder
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type TeacherCourseScalarRelationFilter = {
    is?: TeacherCourseWhereInput
    isNot?: TeacherCourseWhereInput
  }

  export type FeedbackParameterScalarRelationFilter = {
    is?: FeedbackParameterWhereInput
    isNot?: FeedbackParameterWhereInput
  }

  export type FeedbackCountOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    teacherCourseId?: SortOrder
    parameterId?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
  }

  export type FeedbackAvgOrderByAggregateInput = {
    rating?: SortOrder
  }

  export type FeedbackMaxOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    teacherCourseId?: SortOrder
    parameterId?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
  }

  export type FeedbackMinOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    teacherCourseId?: SortOrder
    parameterId?: SortOrder
    rating?: SortOrder
    comment?: SortOrder
    createdAt?: SortOrder
  }

  export type FeedbackSumOrderByAggregateInput = {
    rating?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type ClassCreateNestedManyWithoutCreatorInput = {
    create?: XOR<ClassCreateWithoutCreatorInput, ClassUncheckedCreateWithoutCreatorInput> | ClassCreateWithoutCreatorInput[] | ClassUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: ClassCreateOrConnectWithoutCreatorInput | ClassCreateOrConnectWithoutCreatorInput[]
    createMany?: ClassCreateManyCreatorInputEnvelope
    connect?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
  }

  export type CourseCreateNestedManyWithoutCreatorInput = {
    create?: XOR<CourseCreateWithoutCreatorInput, CourseUncheckedCreateWithoutCreatorInput> | CourseCreateWithoutCreatorInput[] | CourseUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutCreatorInput | CourseCreateOrConnectWithoutCreatorInput[]
    createMany?: CourseCreateManyCreatorInputEnvelope
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
  }

  export type FeedbackParameterCreateNestedManyWithoutCreatorInput = {
    create?: XOR<FeedbackParameterCreateWithoutCreatorInput, FeedbackParameterUncheckedCreateWithoutCreatorInput> | FeedbackParameterCreateWithoutCreatorInput[] | FeedbackParameterUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: FeedbackParameterCreateOrConnectWithoutCreatorInput | FeedbackParameterCreateOrConnectWithoutCreatorInput[]
    createMany?: FeedbackParameterCreateManyCreatorInputEnvelope
    connect?: FeedbackParameterWhereUniqueInput | FeedbackParameterWhereUniqueInput[]
  }

  export type TeacherCreateNestedManyWithoutAssignerInput = {
    create?: XOR<TeacherCreateWithoutAssignerInput, TeacherUncheckedCreateWithoutAssignerInput> | TeacherCreateWithoutAssignerInput[] | TeacherUncheckedCreateWithoutAssignerInput[]
    connectOrCreate?: TeacherCreateOrConnectWithoutAssignerInput | TeacherCreateOrConnectWithoutAssignerInput[]
    createMany?: TeacherCreateManyAssignerInputEnvelope
    connect?: TeacherWhereUniqueInput | TeacherWhereUniqueInput[]
  }

  export type StudentClassCreateNestedManyWithoutStudentInput = {
    create?: XOR<StudentClassCreateWithoutStudentInput, StudentClassUncheckedCreateWithoutStudentInput> | StudentClassCreateWithoutStudentInput[] | StudentClassUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: StudentClassCreateOrConnectWithoutStudentInput | StudentClassCreateOrConnectWithoutStudentInput[]
    createMany?: StudentClassCreateManyStudentInputEnvelope
    connect?: StudentClassWhereUniqueInput | StudentClassWhereUniqueInput[]
  }

  export type FeedbackCreateNestedManyWithoutStudentInput = {
    create?: XOR<FeedbackCreateWithoutStudentInput, FeedbackUncheckedCreateWithoutStudentInput> | FeedbackCreateWithoutStudentInput[] | FeedbackUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutStudentInput | FeedbackCreateOrConnectWithoutStudentInput[]
    createMany?: FeedbackCreateManyStudentInputEnvelope
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
  }

  export type ClassUncheckedCreateNestedManyWithoutCreatorInput = {
    create?: XOR<ClassCreateWithoutCreatorInput, ClassUncheckedCreateWithoutCreatorInput> | ClassCreateWithoutCreatorInput[] | ClassUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: ClassCreateOrConnectWithoutCreatorInput | ClassCreateOrConnectWithoutCreatorInput[]
    createMany?: ClassCreateManyCreatorInputEnvelope
    connect?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
  }

  export type CourseUncheckedCreateNestedManyWithoutCreatorInput = {
    create?: XOR<CourseCreateWithoutCreatorInput, CourseUncheckedCreateWithoutCreatorInput> | CourseCreateWithoutCreatorInput[] | CourseUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutCreatorInput | CourseCreateOrConnectWithoutCreatorInput[]
    createMany?: CourseCreateManyCreatorInputEnvelope
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
  }

  export type FeedbackParameterUncheckedCreateNestedManyWithoutCreatorInput = {
    create?: XOR<FeedbackParameterCreateWithoutCreatorInput, FeedbackParameterUncheckedCreateWithoutCreatorInput> | FeedbackParameterCreateWithoutCreatorInput[] | FeedbackParameterUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: FeedbackParameterCreateOrConnectWithoutCreatorInput | FeedbackParameterCreateOrConnectWithoutCreatorInput[]
    createMany?: FeedbackParameterCreateManyCreatorInputEnvelope
    connect?: FeedbackParameterWhereUniqueInput | FeedbackParameterWhereUniqueInput[]
  }

  export type TeacherUncheckedCreateNestedManyWithoutAssignerInput = {
    create?: XOR<TeacherCreateWithoutAssignerInput, TeacherUncheckedCreateWithoutAssignerInput> | TeacherCreateWithoutAssignerInput[] | TeacherUncheckedCreateWithoutAssignerInput[]
    connectOrCreate?: TeacherCreateOrConnectWithoutAssignerInput | TeacherCreateOrConnectWithoutAssignerInput[]
    createMany?: TeacherCreateManyAssignerInputEnvelope
    connect?: TeacherWhereUniqueInput | TeacherWhereUniqueInput[]
  }

  export type StudentClassUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<StudentClassCreateWithoutStudentInput, StudentClassUncheckedCreateWithoutStudentInput> | StudentClassCreateWithoutStudentInput[] | StudentClassUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: StudentClassCreateOrConnectWithoutStudentInput | StudentClassCreateOrConnectWithoutStudentInput[]
    createMany?: StudentClassCreateManyStudentInputEnvelope
    connect?: StudentClassWhereUniqueInput | StudentClassWhereUniqueInput[]
  }

  export type FeedbackUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<FeedbackCreateWithoutStudentInput, FeedbackUncheckedCreateWithoutStudentInput> | FeedbackCreateWithoutStudentInput[] | FeedbackUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutStudentInput | FeedbackCreateOrConnectWithoutStudentInput[]
    createMany?: FeedbackCreateManyStudentInputEnvelope
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type ClassUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<ClassCreateWithoutCreatorInput, ClassUncheckedCreateWithoutCreatorInput> | ClassCreateWithoutCreatorInput[] | ClassUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: ClassCreateOrConnectWithoutCreatorInput | ClassCreateOrConnectWithoutCreatorInput[]
    upsert?: ClassUpsertWithWhereUniqueWithoutCreatorInput | ClassUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: ClassCreateManyCreatorInputEnvelope
    set?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    disconnect?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    delete?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    connect?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    update?: ClassUpdateWithWhereUniqueWithoutCreatorInput | ClassUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: ClassUpdateManyWithWhereWithoutCreatorInput | ClassUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: ClassScalarWhereInput | ClassScalarWhereInput[]
  }

  export type CourseUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<CourseCreateWithoutCreatorInput, CourseUncheckedCreateWithoutCreatorInput> | CourseCreateWithoutCreatorInput[] | CourseUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutCreatorInput | CourseCreateOrConnectWithoutCreatorInput[]
    upsert?: CourseUpsertWithWhereUniqueWithoutCreatorInput | CourseUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: CourseCreateManyCreatorInputEnvelope
    set?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    disconnect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    delete?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    update?: CourseUpdateWithWhereUniqueWithoutCreatorInput | CourseUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: CourseUpdateManyWithWhereWithoutCreatorInput | CourseUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: CourseScalarWhereInput | CourseScalarWhereInput[]
  }

  export type FeedbackParameterUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<FeedbackParameterCreateWithoutCreatorInput, FeedbackParameterUncheckedCreateWithoutCreatorInput> | FeedbackParameterCreateWithoutCreatorInput[] | FeedbackParameterUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: FeedbackParameterCreateOrConnectWithoutCreatorInput | FeedbackParameterCreateOrConnectWithoutCreatorInput[]
    upsert?: FeedbackParameterUpsertWithWhereUniqueWithoutCreatorInput | FeedbackParameterUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: FeedbackParameterCreateManyCreatorInputEnvelope
    set?: FeedbackParameterWhereUniqueInput | FeedbackParameterWhereUniqueInput[]
    disconnect?: FeedbackParameterWhereUniqueInput | FeedbackParameterWhereUniqueInput[]
    delete?: FeedbackParameterWhereUniqueInput | FeedbackParameterWhereUniqueInput[]
    connect?: FeedbackParameterWhereUniqueInput | FeedbackParameterWhereUniqueInput[]
    update?: FeedbackParameterUpdateWithWhereUniqueWithoutCreatorInput | FeedbackParameterUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: FeedbackParameterUpdateManyWithWhereWithoutCreatorInput | FeedbackParameterUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: FeedbackParameterScalarWhereInput | FeedbackParameterScalarWhereInput[]
  }

  export type TeacherUpdateManyWithoutAssignerNestedInput = {
    create?: XOR<TeacherCreateWithoutAssignerInput, TeacherUncheckedCreateWithoutAssignerInput> | TeacherCreateWithoutAssignerInput[] | TeacherUncheckedCreateWithoutAssignerInput[]
    connectOrCreate?: TeacherCreateOrConnectWithoutAssignerInput | TeacherCreateOrConnectWithoutAssignerInput[]
    upsert?: TeacherUpsertWithWhereUniqueWithoutAssignerInput | TeacherUpsertWithWhereUniqueWithoutAssignerInput[]
    createMany?: TeacherCreateManyAssignerInputEnvelope
    set?: TeacherWhereUniqueInput | TeacherWhereUniqueInput[]
    disconnect?: TeacherWhereUniqueInput | TeacherWhereUniqueInput[]
    delete?: TeacherWhereUniqueInput | TeacherWhereUniqueInput[]
    connect?: TeacherWhereUniqueInput | TeacherWhereUniqueInput[]
    update?: TeacherUpdateWithWhereUniqueWithoutAssignerInput | TeacherUpdateWithWhereUniqueWithoutAssignerInput[]
    updateMany?: TeacherUpdateManyWithWhereWithoutAssignerInput | TeacherUpdateManyWithWhereWithoutAssignerInput[]
    deleteMany?: TeacherScalarWhereInput | TeacherScalarWhereInput[]
  }

  export type StudentClassUpdateManyWithoutStudentNestedInput = {
    create?: XOR<StudentClassCreateWithoutStudentInput, StudentClassUncheckedCreateWithoutStudentInput> | StudentClassCreateWithoutStudentInput[] | StudentClassUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: StudentClassCreateOrConnectWithoutStudentInput | StudentClassCreateOrConnectWithoutStudentInput[]
    upsert?: StudentClassUpsertWithWhereUniqueWithoutStudentInput | StudentClassUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: StudentClassCreateManyStudentInputEnvelope
    set?: StudentClassWhereUniqueInput | StudentClassWhereUniqueInput[]
    disconnect?: StudentClassWhereUniqueInput | StudentClassWhereUniqueInput[]
    delete?: StudentClassWhereUniqueInput | StudentClassWhereUniqueInput[]
    connect?: StudentClassWhereUniqueInput | StudentClassWhereUniqueInput[]
    update?: StudentClassUpdateWithWhereUniqueWithoutStudentInput | StudentClassUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: StudentClassUpdateManyWithWhereWithoutStudentInput | StudentClassUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: StudentClassScalarWhereInput | StudentClassScalarWhereInput[]
  }

  export type FeedbackUpdateManyWithoutStudentNestedInput = {
    create?: XOR<FeedbackCreateWithoutStudentInput, FeedbackUncheckedCreateWithoutStudentInput> | FeedbackCreateWithoutStudentInput[] | FeedbackUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutStudentInput | FeedbackCreateOrConnectWithoutStudentInput[]
    upsert?: FeedbackUpsertWithWhereUniqueWithoutStudentInput | FeedbackUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: FeedbackCreateManyStudentInputEnvelope
    set?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    disconnect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    delete?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    update?: FeedbackUpdateWithWhereUniqueWithoutStudentInput | FeedbackUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: FeedbackUpdateManyWithWhereWithoutStudentInput | FeedbackUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
  }

  export type ClassUncheckedUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<ClassCreateWithoutCreatorInput, ClassUncheckedCreateWithoutCreatorInput> | ClassCreateWithoutCreatorInput[] | ClassUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: ClassCreateOrConnectWithoutCreatorInput | ClassCreateOrConnectWithoutCreatorInput[]
    upsert?: ClassUpsertWithWhereUniqueWithoutCreatorInput | ClassUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: ClassCreateManyCreatorInputEnvelope
    set?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    disconnect?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    delete?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    connect?: ClassWhereUniqueInput | ClassWhereUniqueInput[]
    update?: ClassUpdateWithWhereUniqueWithoutCreatorInput | ClassUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: ClassUpdateManyWithWhereWithoutCreatorInput | ClassUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: ClassScalarWhereInput | ClassScalarWhereInput[]
  }

  export type CourseUncheckedUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<CourseCreateWithoutCreatorInput, CourseUncheckedCreateWithoutCreatorInput> | CourseCreateWithoutCreatorInput[] | CourseUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutCreatorInput | CourseCreateOrConnectWithoutCreatorInput[]
    upsert?: CourseUpsertWithWhereUniqueWithoutCreatorInput | CourseUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: CourseCreateManyCreatorInputEnvelope
    set?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    disconnect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    delete?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    update?: CourseUpdateWithWhereUniqueWithoutCreatorInput | CourseUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: CourseUpdateManyWithWhereWithoutCreatorInput | CourseUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: CourseScalarWhereInput | CourseScalarWhereInput[]
  }

  export type FeedbackParameterUncheckedUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<FeedbackParameterCreateWithoutCreatorInput, FeedbackParameterUncheckedCreateWithoutCreatorInput> | FeedbackParameterCreateWithoutCreatorInput[] | FeedbackParameterUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: FeedbackParameterCreateOrConnectWithoutCreatorInput | FeedbackParameterCreateOrConnectWithoutCreatorInput[]
    upsert?: FeedbackParameterUpsertWithWhereUniqueWithoutCreatorInput | FeedbackParameterUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: FeedbackParameterCreateManyCreatorInputEnvelope
    set?: FeedbackParameterWhereUniqueInput | FeedbackParameterWhereUniqueInput[]
    disconnect?: FeedbackParameterWhereUniqueInput | FeedbackParameterWhereUniqueInput[]
    delete?: FeedbackParameterWhereUniqueInput | FeedbackParameterWhereUniqueInput[]
    connect?: FeedbackParameterWhereUniqueInput | FeedbackParameterWhereUniqueInput[]
    update?: FeedbackParameterUpdateWithWhereUniqueWithoutCreatorInput | FeedbackParameterUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: FeedbackParameterUpdateManyWithWhereWithoutCreatorInput | FeedbackParameterUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: FeedbackParameterScalarWhereInput | FeedbackParameterScalarWhereInput[]
  }

  export type TeacherUncheckedUpdateManyWithoutAssignerNestedInput = {
    create?: XOR<TeacherCreateWithoutAssignerInput, TeacherUncheckedCreateWithoutAssignerInput> | TeacherCreateWithoutAssignerInput[] | TeacherUncheckedCreateWithoutAssignerInput[]
    connectOrCreate?: TeacherCreateOrConnectWithoutAssignerInput | TeacherCreateOrConnectWithoutAssignerInput[]
    upsert?: TeacherUpsertWithWhereUniqueWithoutAssignerInput | TeacherUpsertWithWhereUniqueWithoutAssignerInput[]
    createMany?: TeacherCreateManyAssignerInputEnvelope
    set?: TeacherWhereUniqueInput | TeacherWhereUniqueInput[]
    disconnect?: TeacherWhereUniqueInput | TeacherWhereUniqueInput[]
    delete?: TeacherWhereUniqueInput | TeacherWhereUniqueInput[]
    connect?: TeacherWhereUniqueInput | TeacherWhereUniqueInput[]
    update?: TeacherUpdateWithWhereUniqueWithoutAssignerInput | TeacherUpdateWithWhereUniqueWithoutAssignerInput[]
    updateMany?: TeacherUpdateManyWithWhereWithoutAssignerInput | TeacherUpdateManyWithWhereWithoutAssignerInput[]
    deleteMany?: TeacherScalarWhereInput | TeacherScalarWhereInput[]
  }

  export type StudentClassUncheckedUpdateManyWithoutStudentNestedInput = {
    create?: XOR<StudentClassCreateWithoutStudentInput, StudentClassUncheckedCreateWithoutStudentInput> | StudentClassCreateWithoutStudentInput[] | StudentClassUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: StudentClassCreateOrConnectWithoutStudentInput | StudentClassCreateOrConnectWithoutStudentInput[]
    upsert?: StudentClassUpsertWithWhereUniqueWithoutStudentInput | StudentClassUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: StudentClassCreateManyStudentInputEnvelope
    set?: StudentClassWhereUniqueInput | StudentClassWhereUniqueInput[]
    disconnect?: StudentClassWhereUniqueInput | StudentClassWhereUniqueInput[]
    delete?: StudentClassWhereUniqueInput | StudentClassWhereUniqueInput[]
    connect?: StudentClassWhereUniqueInput | StudentClassWhereUniqueInput[]
    update?: StudentClassUpdateWithWhereUniqueWithoutStudentInput | StudentClassUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: StudentClassUpdateManyWithWhereWithoutStudentInput | StudentClassUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: StudentClassScalarWhereInput | StudentClassScalarWhereInput[]
  }

  export type FeedbackUncheckedUpdateManyWithoutStudentNestedInput = {
    create?: XOR<FeedbackCreateWithoutStudentInput, FeedbackUncheckedCreateWithoutStudentInput> | FeedbackCreateWithoutStudentInput[] | FeedbackUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutStudentInput | FeedbackCreateOrConnectWithoutStudentInput[]
    upsert?: FeedbackUpsertWithWhereUniqueWithoutStudentInput | FeedbackUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: FeedbackCreateManyStudentInputEnvelope
    set?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    disconnect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    delete?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    update?: FeedbackUpdateWithWhereUniqueWithoutStudentInput | FeedbackUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: FeedbackUpdateManyWithWhereWithoutStudentInput | FeedbackUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutCreatedClassesInput = {
    create?: XOR<UserCreateWithoutCreatedClassesInput, UserUncheckedCreateWithoutCreatedClassesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedClassesInput
    connect?: UserWhereUniqueInput
  }

  export type StudentClassCreateNestedManyWithoutClassInput = {
    create?: XOR<StudentClassCreateWithoutClassInput, StudentClassUncheckedCreateWithoutClassInput> | StudentClassCreateWithoutClassInput[] | StudentClassUncheckedCreateWithoutClassInput[]
    connectOrCreate?: StudentClassCreateOrConnectWithoutClassInput | StudentClassCreateOrConnectWithoutClassInput[]
    createMany?: StudentClassCreateManyClassInputEnvelope
    connect?: StudentClassWhereUniqueInput | StudentClassWhereUniqueInput[]
  }

  export type TeacherCourseCreateNestedManyWithoutClassInput = {
    create?: XOR<TeacherCourseCreateWithoutClassInput, TeacherCourseUncheckedCreateWithoutClassInput> | TeacherCourseCreateWithoutClassInput[] | TeacherCourseUncheckedCreateWithoutClassInput[]
    connectOrCreate?: TeacherCourseCreateOrConnectWithoutClassInput | TeacherCourseCreateOrConnectWithoutClassInput[]
    createMany?: TeacherCourseCreateManyClassInputEnvelope
    connect?: TeacherCourseWhereUniqueInput | TeacherCourseWhereUniqueInput[]
  }

  export type StudentClassUncheckedCreateNestedManyWithoutClassInput = {
    create?: XOR<StudentClassCreateWithoutClassInput, StudentClassUncheckedCreateWithoutClassInput> | StudentClassCreateWithoutClassInput[] | StudentClassUncheckedCreateWithoutClassInput[]
    connectOrCreate?: StudentClassCreateOrConnectWithoutClassInput | StudentClassCreateOrConnectWithoutClassInput[]
    createMany?: StudentClassCreateManyClassInputEnvelope
    connect?: StudentClassWhereUniqueInput | StudentClassWhereUniqueInput[]
  }

  export type TeacherCourseUncheckedCreateNestedManyWithoutClassInput = {
    create?: XOR<TeacherCourseCreateWithoutClassInput, TeacherCourseUncheckedCreateWithoutClassInput> | TeacherCourseCreateWithoutClassInput[] | TeacherCourseUncheckedCreateWithoutClassInput[]
    connectOrCreate?: TeacherCourseCreateOrConnectWithoutClassInput | TeacherCourseCreateOrConnectWithoutClassInput[]
    createMany?: TeacherCourseCreateManyClassInputEnvelope
    connect?: TeacherCourseWhereUniqueInput | TeacherCourseWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutCreatedClassesNestedInput = {
    create?: XOR<UserCreateWithoutCreatedClassesInput, UserUncheckedCreateWithoutCreatedClassesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedClassesInput
    upsert?: UserUpsertWithoutCreatedClassesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedClassesInput, UserUpdateWithoutCreatedClassesInput>, UserUncheckedUpdateWithoutCreatedClassesInput>
  }

  export type StudentClassUpdateManyWithoutClassNestedInput = {
    create?: XOR<StudentClassCreateWithoutClassInput, StudentClassUncheckedCreateWithoutClassInput> | StudentClassCreateWithoutClassInput[] | StudentClassUncheckedCreateWithoutClassInput[]
    connectOrCreate?: StudentClassCreateOrConnectWithoutClassInput | StudentClassCreateOrConnectWithoutClassInput[]
    upsert?: StudentClassUpsertWithWhereUniqueWithoutClassInput | StudentClassUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: StudentClassCreateManyClassInputEnvelope
    set?: StudentClassWhereUniqueInput | StudentClassWhereUniqueInput[]
    disconnect?: StudentClassWhereUniqueInput | StudentClassWhereUniqueInput[]
    delete?: StudentClassWhereUniqueInput | StudentClassWhereUniqueInput[]
    connect?: StudentClassWhereUniqueInput | StudentClassWhereUniqueInput[]
    update?: StudentClassUpdateWithWhereUniqueWithoutClassInput | StudentClassUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: StudentClassUpdateManyWithWhereWithoutClassInput | StudentClassUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: StudentClassScalarWhereInput | StudentClassScalarWhereInput[]
  }

  export type TeacherCourseUpdateManyWithoutClassNestedInput = {
    create?: XOR<TeacherCourseCreateWithoutClassInput, TeacherCourseUncheckedCreateWithoutClassInput> | TeacherCourseCreateWithoutClassInput[] | TeacherCourseUncheckedCreateWithoutClassInput[]
    connectOrCreate?: TeacherCourseCreateOrConnectWithoutClassInput | TeacherCourseCreateOrConnectWithoutClassInput[]
    upsert?: TeacherCourseUpsertWithWhereUniqueWithoutClassInput | TeacherCourseUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: TeacherCourseCreateManyClassInputEnvelope
    set?: TeacherCourseWhereUniqueInput | TeacherCourseWhereUniqueInput[]
    disconnect?: TeacherCourseWhereUniqueInput | TeacherCourseWhereUniqueInput[]
    delete?: TeacherCourseWhereUniqueInput | TeacherCourseWhereUniqueInput[]
    connect?: TeacherCourseWhereUniqueInput | TeacherCourseWhereUniqueInput[]
    update?: TeacherCourseUpdateWithWhereUniqueWithoutClassInput | TeacherCourseUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: TeacherCourseUpdateManyWithWhereWithoutClassInput | TeacherCourseUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: TeacherCourseScalarWhereInput | TeacherCourseScalarWhereInput[]
  }

  export type StudentClassUncheckedUpdateManyWithoutClassNestedInput = {
    create?: XOR<StudentClassCreateWithoutClassInput, StudentClassUncheckedCreateWithoutClassInput> | StudentClassCreateWithoutClassInput[] | StudentClassUncheckedCreateWithoutClassInput[]
    connectOrCreate?: StudentClassCreateOrConnectWithoutClassInput | StudentClassCreateOrConnectWithoutClassInput[]
    upsert?: StudentClassUpsertWithWhereUniqueWithoutClassInput | StudentClassUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: StudentClassCreateManyClassInputEnvelope
    set?: StudentClassWhereUniqueInput | StudentClassWhereUniqueInput[]
    disconnect?: StudentClassWhereUniqueInput | StudentClassWhereUniqueInput[]
    delete?: StudentClassWhereUniqueInput | StudentClassWhereUniqueInput[]
    connect?: StudentClassWhereUniqueInput | StudentClassWhereUniqueInput[]
    update?: StudentClassUpdateWithWhereUniqueWithoutClassInput | StudentClassUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: StudentClassUpdateManyWithWhereWithoutClassInput | StudentClassUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: StudentClassScalarWhereInput | StudentClassScalarWhereInput[]
  }

  export type TeacherCourseUncheckedUpdateManyWithoutClassNestedInput = {
    create?: XOR<TeacherCourseCreateWithoutClassInput, TeacherCourseUncheckedCreateWithoutClassInput> | TeacherCourseCreateWithoutClassInput[] | TeacherCourseUncheckedCreateWithoutClassInput[]
    connectOrCreate?: TeacherCourseCreateOrConnectWithoutClassInput | TeacherCourseCreateOrConnectWithoutClassInput[]
    upsert?: TeacherCourseUpsertWithWhereUniqueWithoutClassInput | TeacherCourseUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: TeacherCourseCreateManyClassInputEnvelope
    set?: TeacherCourseWhereUniqueInput | TeacherCourseWhereUniqueInput[]
    disconnect?: TeacherCourseWhereUniqueInput | TeacherCourseWhereUniqueInput[]
    delete?: TeacherCourseWhereUniqueInput | TeacherCourseWhereUniqueInput[]
    connect?: TeacherCourseWhereUniqueInput | TeacherCourseWhereUniqueInput[]
    update?: TeacherCourseUpdateWithWhereUniqueWithoutClassInput | TeacherCourseUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: TeacherCourseUpdateManyWithWhereWithoutClassInput | TeacherCourseUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: TeacherCourseScalarWhereInput | TeacherCourseScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutStudentClassesInput = {
    create?: XOR<UserCreateWithoutStudentClassesInput, UserUncheckedCreateWithoutStudentClassesInput>
    connectOrCreate?: UserCreateOrConnectWithoutStudentClassesInput
    connect?: UserWhereUniqueInput
  }

  export type ClassCreateNestedOneWithoutStudentClassesInput = {
    create?: XOR<ClassCreateWithoutStudentClassesInput, ClassUncheckedCreateWithoutStudentClassesInput>
    connectOrCreate?: ClassCreateOrConnectWithoutStudentClassesInput
    connect?: ClassWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutStudentClassesNestedInput = {
    create?: XOR<UserCreateWithoutStudentClassesInput, UserUncheckedCreateWithoutStudentClassesInput>
    connectOrCreate?: UserCreateOrConnectWithoutStudentClassesInput
    upsert?: UserUpsertWithoutStudentClassesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutStudentClassesInput, UserUpdateWithoutStudentClassesInput>, UserUncheckedUpdateWithoutStudentClassesInput>
  }

  export type ClassUpdateOneRequiredWithoutStudentClassesNestedInput = {
    create?: XOR<ClassCreateWithoutStudentClassesInput, ClassUncheckedCreateWithoutStudentClassesInput>
    connectOrCreate?: ClassCreateOrConnectWithoutStudentClassesInput
    upsert?: ClassUpsertWithoutStudentClassesInput
    connect?: ClassWhereUniqueInput
    update?: XOR<XOR<ClassUpdateToOneWithWhereWithoutStudentClassesInput, ClassUpdateWithoutStudentClassesInput>, ClassUncheckedUpdateWithoutStudentClassesInput>
  }

  export type UserCreateNestedOneWithoutCreatedCoursesInput = {
    create?: XOR<UserCreateWithoutCreatedCoursesInput, UserUncheckedCreateWithoutCreatedCoursesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedCoursesInput
    connect?: UserWhereUniqueInput
  }

  export type TeacherCourseCreateNestedManyWithoutCourseInput = {
    create?: XOR<TeacherCourseCreateWithoutCourseInput, TeacherCourseUncheckedCreateWithoutCourseInput> | TeacherCourseCreateWithoutCourseInput[] | TeacherCourseUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: TeacherCourseCreateOrConnectWithoutCourseInput | TeacherCourseCreateOrConnectWithoutCourseInput[]
    createMany?: TeacherCourseCreateManyCourseInputEnvelope
    connect?: TeacherCourseWhereUniqueInput | TeacherCourseWhereUniqueInput[]
  }

  export type TeacherCourseUncheckedCreateNestedManyWithoutCourseInput = {
    create?: XOR<TeacherCourseCreateWithoutCourseInput, TeacherCourseUncheckedCreateWithoutCourseInput> | TeacherCourseCreateWithoutCourseInput[] | TeacherCourseUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: TeacherCourseCreateOrConnectWithoutCourseInput | TeacherCourseCreateOrConnectWithoutCourseInput[]
    createMany?: TeacherCourseCreateManyCourseInputEnvelope
    connect?: TeacherCourseWhereUniqueInput | TeacherCourseWhereUniqueInput[]
  }

  export type EnumCourseTypeFieldUpdateOperationsInput = {
    set?: $Enums.CourseType
  }

  export type UserUpdateOneRequiredWithoutCreatedCoursesNestedInput = {
    create?: XOR<UserCreateWithoutCreatedCoursesInput, UserUncheckedCreateWithoutCreatedCoursesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedCoursesInput
    upsert?: UserUpsertWithoutCreatedCoursesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedCoursesInput, UserUpdateWithoutCreatedCoursesInput>, UserUncheckedUpdateWithoutCreatedCoursesInput>
  }

  export type TeacherCourseUpdateManyWithoutCourseNestedInput = {
    create?: XOR<TeacherCourseCreateWithoutCourseInput, TeacherCourseUncheckedCreateWithoutCourseInput> | TeacherCourseCreateWithoutCourseInput[] | TeacherCourseUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: TeacherCourseCreateOrConnectWithoutCourseInput | TeacherCourseCreateOrConnectWithoutCourseInput[]
    upsert?: TeacherCourseUpsertWithWhereUniqueWithoutCourseInput | TeacherCourseUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: TeacherCourseCreateManyCourseInputEnvelope
    set?: TeacherCourseWhereUniqueInput | TeacherCourseWhereUniqueInput[]
    disconnect?: TeacherCourseWhereUniqueInput | TeacherCourseWhereUniqueInput[]
    delete?: TeacherCourseWhereUniqueInput | TeacherCourseWhereUniqueInput[]
    connect?: TeacherCourseWhereUniqueInput | TeacherCourseWhereUniqueInput[]
    update?: TeacherCourseUpdateWithWhereUniqueWithoutCourseInput | TeacherCourseUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: TeacherCourseUpdateManyWithWhereWithoutCourseInput | TeacherCourseUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: TeacherCourseScalarWhereInput | TeacherCourseScalarWhereInput[]
  }

  export type TeacherCourseUncheckedUpdateManyWithoutCourseNestedInput = {
    create?: XOR<TeacherCourseCreateWithoutCourseInput, TeacherCourseUncheckedCreateWithoutCourseInput> | TeacherCourseCreateWithoutCourseInput[] | TeacherCourseUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: TeacherCourseCreateOrConnectWithoutCourseInput | TeacherCourseCreateOrConnectWithoutCourseInput[]
    upsert?: TeacherCourseUpsertWithWhereUniqueWithoutCourseInput | TeacherCourseUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: TeacherCourseCreateManyCourseInputEnvelope
    set?: TeacherCourseWhereUniqueInput | TeacherCourseWhereUniqueInput[]
    disconnect?: TeacherCourseWhereUniqueInput | TeacherCourseWhereUniqueInput[]
    delete?: TeacherCourseWhereUniqueInput | TeacherCourseWhereUniqueInput[]
    connect?: TeacherCourseWhereUniqueInput | TeacherCourseWhereUniqueInput[]
    update?: TeacherCourseUpdateWithWhereUniqueWithoutCourseInput | TeacherCourseUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: TeacherCourseUpdateManyWithWhereWithoutCourseInput | TeacherCourseUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: TeacherCourseScalarWhereInput | TeacherCourseScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutAssignedTeachersInput = {
    create?: XOR<UserCreateWithoutAssignedTeachersInput, UserUncheckedCreateWithoutAssignedTeachersInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssignedTeachersInput
    connect?: UserWhereUniqueInput
  }

  export type TeacherCourseCreateNestedManyWithoutTeacherInput = {
    create?: XOR<TeacherCourseCreateWithoutTeacherInput, TeacherCourseUncheckedCreateWithoutTeacherInput> | TeacherCourseCreateWithoutTeacherInput[] | TeacherCourseUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: TeacherCourseCreateOrConnectWithoutTeacherInput | TeacherCourseCreateOrConnectWithoutTeacherInput[]
    createMany?: TeacherCourseCreateManyTeacherInputEnvelope
    connect?: TeacherCourseWhereUniqueInput | TeacherCourseWhereUniqueInput[]
  }

  export type TeacherCourseUncheckedCreateNestedManyWithoutTeacherInput = {
    create?: XOR<TeacherCourseCreateWithoutTeacherInput, TeacherCourseUncheckedCreateWithoutTeacherInput> | TeacherCourseCreateWithoutTeacherInput[] | TeacherCourseUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: TeacherCourseCreateOrConnectWithoutTeacherInput | TeacherCourseCreateOrConnectWithoutTeacherInput[]
    createMany?: TeacherCourseCreateManyTeacherInputEnvelope
    connect?: TeacherCourseWhereUniqueInput | TeacherCourseWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type UserUpdateOneRequiredWithoutAssignedTeachersNestedInput = {
    create?: XOR<UserCreateWithoutAssignedTeachersInput, UserUncheckedCreateWithoutAssignedTeachersInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssignedTeachersInput
    upsert?: UserUpsertWithoutAssignedTeachersInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAssignedTeachersInput, UserUpdateWithoutAssignedTeachersInput>, UserUncheckedUpdateWithoutAssignedTeachersInput>
  }

  export type TeacherCourseUpdateManyWithoutTeacherNestedInput = {
    create?: XOR<TeacherCourseCreateWithoutTeacherInput, TeacherCourseUncheckedCreateWithoutTeacherInput> | TeacherCourseCreateWithoutTeacherInput[] | TeacherCourseUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: TeacherCourseCreateOrConnectWithoutTeacherInput | TeacherCourseCreateOrConnectWithoutTeacherInput[]
    upsert?: TeacherCourseUpsertWithWhereUniqueWithoutTeacherInput | TeacherCourseUpsertWithWhereUniqueWithoutTeacherInput[]
    createMany?: TeacherCourseCreateManyTeacherInputEnvelope
    set?: TeacherCourseWhereUniqueInput | TeacherCourseWhereUniqueInput[]
    disconnect?: TeacherCourseWhereUniqueInput | TeacherCourseWhereUniqueInput[]
    delete?: TeacherCourseWhereUniqueInput | TeacherCourseWhereUniqueInput[]
    connect?: TeacherCourseWhereUniqueInput | TeacherCourseWhereUniqueInput[]
    update?: TeacherCourseUpdateWithWhereUniqueWithoutTeacherInput | TeacherCourseUpdateWithWhereUniqueWithoutTeacherInput[]
    updateMany?: TeacherCourseUpdateManyWithWhereWithoutTeacherInput | TeacherCourseUpdateManyWithWhereWithoutTeacherInput[]
    deleteMany?: TeacherCourseScalarWhereInput | TeacherCourseScalarWhereInput[]
  }

  export type TeacherCourseUncheckedUpdateManyWithoutTeacherNestedInput = {
    create?: XOR<TeacherCourseCreateWithoutTeacherInput, TeacherCourseUncheckedCreateWithoutTeacherInput> | TeacherCourseCreateWithoutTeacherInput[] | TeacherCourseUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: TeacherCourseCreateOrConnectWithoutTeacherInput | TeacherCourseCreateOrConnectWithoutTeacherInput[]
    upsert?: TeacherCourseUpsertWithWhereUniqueWithoutTeacherInput | TeacherCourseUpsertWithWhereUniqueWithoutTeacherInput[]
    createMany?: TeacherCourseCreateManyTeacherInputEnvelope
    set?: TeacherCourseWhereUniqueInput | TeacherCourseWhereUniqueInput[]
    disconnect?: TeacherCourseWhereUniqueInput | TeacherCourseWhereUniqueInput[]
    delete?: TeacherCourseWhereUniqueInput | TeacherCourseWhereUniqueInput[]
    connect?: TeacherCourseWhereUniqueInput | TeacherCourseWhereUniqueInput[]
    update?: TeacherCourseUpdateWithWhereUniqueWithoutTeacherInput | TeacherCourseUpdateWithWhereUniqueWithoutTeacherInput[]
    updateMany?: TeacherCourseUpdateManyWithWhereWithoutTeacherInput | TeacherCourseUpdateManyWithWhereWithoutTeacherInput[]
    deleteMany?: TeacherCourseScalarWhereInput | TeacherCourseScalarWhereInput[]
  }

  export type TeacherCreateNestedOneWithoutTeacherCoursesInput = {
    create?: XOR<TeacherCreateWithoutTeacherCoursesInput, TeacherUncheckedCreateWithoutTeacherCoursesInput>
    connectOrCreate?: TeacherCreateOrConnectWithoutTeacherCoursesInput
    connect?: TeacherWhereUniqueInput
  }

  export type CourseCreateNestedOneWithoutTeacherCoursesInput = {
    create?: XOR<CourseCreateWithoutTeacherCoursesInput, CourseUncheckedCreateWithoutTeacherCoursesInput>
    connectOrCreate?: CourseCreateOrConnectWithoutTeacherCoursesInput
    connect?: CourseWhereUniqueInput
  }

  export type ClassCreateNestedOneWithoutTeacherCoursesInput = {
    create?: XOR<ClassCreateWithoutTeacherCoursesInput, ClassUncheckedCreateWithoutTeacherCoursesInput>
    connectOrCreate?: ClassCreateOrConnectWithoutTeacherCoursesInput
    connect?: ClassWhereUniqueInput
  }

  export type FeedbackCreateNestedManyWithoutTeacherCourseInput = {
    create?: XOR<FeedbackCreateWithoutTeacherCourseInput, FeedbackUncheckedCreateWithoutTeacherCourseInput> | FeedbackCreateWithoutTeacherCourseInput[] | FeedbackUncheckedCreateWithoutTeacherCourseInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutTeacherCourseInput | FeedbackCreateOrConnectWithoutTeacherCourseInput[]
    createMany?: FeedbackCreateManyTeacherCourseInputEnvelope
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
  }

  export type FeedbackUncheckedCreateNestedManyWithoutTeacherCourseInput = {
    create?: XOR<FeedbackCreateWithoutTeacherCourseInput, FeedbackUncheckedCreateWithoutTeacherCourseInput> | FeedbackCreateWithoutTeacherCourseInput[] | FeedbackUncheckedCreateWithoutTeacherCourseInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutTeacherCourseInput | FeedbackCreateOrConnectWithoutTeacherCourseInput[]
    createMany?: FeedbackCreateManyTeacherCourseInputEnvelope
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
  }

  export type TeacherUpdateOneRequiredWithoutTeacherCoursesNestedInput = {
    create?: XOR<TeacherCreateWithoutTeacherCoursesInput, TeacherUncheckedCreateWithoutTeacherCoursesInput>
    connectOrCreate?: TeacherCreateOrConnectWithoutTeacherCoursesInput
    upsert?: TeacherUpsertWithoutTeacherCoursesInput
    connect?: TeacherWhereUniqueInput
    update?: XOR<XOR<TeacherUpdateToOneWithWhereWithoutTeacherCoursesInput, TeacherUpdateWithoutTeacherCoursesInput>, TeacherUncheckedUpdateWithoutTeacherCoursesInput>
  }

  export type CourseUpdateOneRequiredWithoutTeacherCoursesNestedInput = {
    create?: XOR<CourseCreateWithoutTeacherCoursesInput, CourseUncheckedCreateWithoutTeacherCoursesInput>
    connectOrCreate?: CourseCreateOrConnectWithoutTeacherCoursesInput
    upsert?: CourseUpsertWithoutTeacherCoursesInput
    connect?: CourseWhereUniqueInput
    update?: XOR<XOR<CourseUpdateToOneWithWhereWithoutTeacherCoursesInput, CourseUpdateWithoutTeacherCoursesInput>, CourseUncheckedUpdateWithoutTeacherCoursesInput>
  }

  export type ClassUpdateOneRequiredWithoutTeacherCoursesNestedInput = {
    create?: XOR<ClassCreateWithoutTeacherCoursesInput, ClassUncheckedCreateWithoutTeacherCoursesInput>
    connectOrCreate?: ClassCreateOrConnectWithoutTeacherCoursesInput
    upsert?: ClassUpsertWithoutTeacherCoursesInput
    connect?: ClassWhereUniqueInput
    update?: XOR<XOR<ClassUpdateToOneWithWhereWithoutTeacherCoursesInput, ClassUpdateWithoutTeacherCoursesInput>, ClassUncheckedUpdateWithoutTeacherCoursesInput>
  }

  export type FeedbackUpdateManyWithoutTeacherCourseNestedInput = {
    create?: XOR<FeedbackCreateWithoutTeacherCourseInput, FeedbackUncheckedCreateWithoutTeacherCourseInput> | FeedbackCreateWithoutTeacherCourseInput[] | FeedbackUncheckedCreateWithoutTeacherCourseInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutTeacherCourseInput | FeedbackCreateOrConnectWithoutTeacherCourseInput[]
    upsert?: FeedbackUpsertWithWhereUniqueWithoutTeacherCourseInput | FeedbackUpsertWithWhereUniqueWithoutTeacherCourseInput[]
    createMany?: FeedbackCreateManyTeacherCourseInputEnvelope
    set?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    disconnect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    delete?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    update?: FeedbackUpdateWithWhereUniqueWithoutTeacherCourseInput | FeedbackUpdateWithWhereUniqueWithoutTeacherCourseInput[]
    updateMany?: FeedbackUpdateManyWithWhereWithoutTeacherCourseInput | FeedbackUpdateManyWithWhereWithoutTeacherCourseInput[]
    deleteMany?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
  }

  export type FeedbackUncheckedUpdateManyWithoutTeacherCourseNestedInput = {
    create?: XOR<FeedbackCreateWithoutTeacherCourseInput, FeedbackUncheckedCreateWithoutTeacherCourseInput> | FeedbackCreateWithoutTeacherCourseInput[] | FeedbackUncheckedCreateWithoutTeacherCourseInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutTeacherCourseInput | FeedbackCreateOrConnectWithoutTeacherCourseInput[]
    upsert?: FeedbackUpsertWithWhereUniqueWithoutTeacherCourseInput | FeedbackUpsertWithWhereUniqueWithoutTeacherCourseInput[]
    createMany?: FeedbackCreateManyTeacherCourseInputEnvelope
    set?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    disconnect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    delete?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    update?: FeedbackUpdateWithWhereUniqueWithoutTeacherCourseInput | FeedbackUpdateWithWhereUniqueWithoutTeacherCourseInput[]
    updateMany?: FeedbackUpdateManyWithWhereWithoutTeacherCourseInput | FeedbackUpdateManyWithWhereWithoutTeacherCourseInput[]
    deleteMany?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutCreatedParametersInput = {
    create?: XOR<UserCreateWithoutCreatedParametersInput, UserUncheckedCreateWithoutCreatedParametersInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedParametersInput
    connect?: UserWhereUniqueInput
  }

  export type FeedbackCreateNestedManyWithoutParameterInput = {
    create?: XOR<FeedbackCreateWithoutParameterInput, FeedbackUncheckedCreateWithoutParameterInput> | FeedbackCreateWithoutParameterInput[] | FeedbackUncheckedCreateWithoutParameterInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutParameterInput | FeedbackCreateOrConnectWithoutParameterInput[]
    createMany?: FeedbackCreateManyParameterInputEnvelope
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
  }

  export type FeedbackUncheckedCreateNestedManyWithoutParameterInput = {
    create?: XOR<FeedbackCreateWithoutParameterInput, FeedbackUncheckedCreateWithoutParameterInput> | FeedbackCreateWithoutParameterInput[] | FeedbackUncheckedCreateWithoutParameterInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutParameterInput | FeedbackCreateOrConnectWithoutParameterInput[]
    createMany?: FeedbackCreateManyParameterInputEnvelope
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutCreatedParametersNestedInput = {
    create?: XOR<UserCreateWithoutCreatedParametersInput, UserUncheckedCreateWithoutCreatedParametersInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedParametersInput
    upsert?: UserUpsertWithoutCreatedParametersInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedParametersInput, UserUpdateWithoutCreatedParametersInput>, UserUncheckedUpdateWithoutCreatedParametersInput>
  }

  export type FeedbackUpdateManyWithoutParameterNestedInput = {
    create?: XOR<FeedbackCreateWithoutParameterInput, FeedbackUncheckedCreateWithoutParameterInput> | FeedbackCreateWithoutParameterInput[] | FeedbackUncheckedCreateWithoutParameterInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutParameterInput | FeedbackCreateOrConnectWithoutParameterInput[]
    upsert?: FeedbackUpsertWithWhereUniqueWithoutParameterInput | FeedbackUpsertWithWhereUniqueWithoutParameterInput[]
    createMany?: FeedbackCreateManyParameterInputEnvelope
    set?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    disconnect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    delete?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    update?: FeedbackUpdateWithWhereUniqueWithoutParameterInput | FeedbackUpdateWithWhereUniqueWithoutParameterInput[]
    updateMany?: FeedbackUpdateManyWithWhereWithoutParameterInput | FeedbackUpdateManyWithWhereWithoutParameterInput[]
    deleteMany?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
  }

  export type FeedbackUncheckedUpdateManyWithoutParameterNestedInput = {
    create?: XOR<FeedbackCreateWithoutParameterInput, FeedbackUncheckedCreateWithoutParameterInput> | FeedbackCreateWithoutParameterInput[] | FeedbackUncheckedCreateWithoutParameterInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutParameterInput | FeedbackCreateOrConnectWithoutParameterInput[]
    upsert?: FeedbackUpsertWithWhereUniqueWithoutParameterInput | FeedbackUpsertWithWhereUniqueWithoutParameterInput[]
    createMany?: FeedbackCreateManyParameterInputEnvelope
    set?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    disconnect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    delete?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    update?: FeedbackUpdateWithWhereUniqueWithoutParameterInput | FeedbackUpdateWithWhereUniqueWithoutParameterInput[]
    updateMany?: FeedbackUpdateManyWithWhereWithoutParameterInput | FeedbackUpdateManyWithWhereWithoutParameterInput[]
    deleteMany?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutFeedbacksInput = {
    create?: XOR<UserCreateWithoutFeedbacksInput, UserUncheckedCreateWithoutFeedbacksInput>
    connectOrCreate?: UserCreateOrConnectWithoutFeedbacksInput
    connect?: UserWhereUniqueInput
  }

  export type TeacherCourseCreateNestedOneWithoutFeedbacksInput = {
    create?: XOR<TeacherCourseCreateWithoutFeedbacksInput, TeacherCourseUncheckedCreateWithoutFeedbacksInput>
    connectOrCreate?: TeacherCourseCreateOrConnectWithoutFeedbacksInput
    connect?: TeacherCourseWhereUniqueInput
  }

  export type FeedbackParameterCreateNestedOneWithoutFeedbacksInput = {
    create?: XOR<FeedbackParameterCreateWithoutFeedbacksInput, FeedbackParameterUncheckedCreateWithoutFeedbacksInput>
    connectOrCreate?: FeedbackParameterCreateOrConnectWithoutFeedbacksInput
    connect?: FeedbackParameterWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutFeedbacksNestedInput = {
    create?: XOR<UserCreateWithoutFeedbacksInput, UserUncheckedCreateWithoutFeedbacksInput>
    connectOrCreate?: UserCreateOrConnectWithoutFeedbacksInput
    upsert?: UserUpsertWithoutFeedbacksInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFeedbacksInput, UserUpdateWithoutFeedbacksInput>, UserUncheckedUpdateWithoutFeedbacksInput>
  }

  export type TeacherCourseUpdateOneRequiredWithoutFeedbacksNestedInput = {
    create?: XOR<TeacherCourseCreateWithoutFeedbacksInput, TeacherCourseUncheckedCreateWithoutFeedbacksInput>
    connectOrCreate?: TeacherCourseCreateOrConnectWithoutFeedbacksInput
    upsert?: TeacherCourseUpsertWithoutFeedbacksInput
    connect?: TeacherCourseWhereUniqueInput
    update?: XOR<XOR<TeacherCourseUpdateToOneWithWhereWithoutFeedbacksInput, TeacherCourseUpdateWithoutFeedbacksInput>, TeacherCourseUncheckedUpdateWithoutFeedbacksInput>
  }

  export type FeedbackParameterUpdateOneRequiredWithoutFeedbacksNestedInput = {
    create?: XOR<FeedbackParameterCreateWithoutFeedbacksInput, FeedbackParameterUncheckedCreateWithoutFeedbacksInput>
    connectOrCreate?: FeedbackParameterCreateOrConnectWithoutFeedbacksInput
    upsert?: FeedbackParameterUpsertWithoutFeedbacksInput
    connect?: FeedbackParameterWhereUniqueInput
    update?: XOR<XOR<FeedbackParameterUpdateToOneWithWhereWithoutFeedbacksInput, FeedbackParameterUpdateWithoutFeedbacksInput>, FeedbackParameterUncheckedUpdateWithoutFeedbacksInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumCourseTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.CourseType | EnumCourseTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CourseType[] | ListEnumCourseTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CourseType[] | ListEnumCourseTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCourseTypeFilter<$PrismaModel> | $Enums.CourseType
  }

  export type NestedEnumCourseTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CourseType | EnumCourseTypeFieldRefInput<$PrismaModel>
    in?: $Enums.CourseType[] | ListEnumCourseTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.CourseType[] | ListEnumCourseTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumCourseTypeWithAggregatesFilter<$PrismaModel> | $Enums.CourseType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCourseTypeFilter<$PrismaModel>
    _max?: NestedEnumCourseTypeFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type ClassCreateWithoutCreatorInput = {
    id?: string
    className: string
    accessCode: string
    studentClasses?: StudentClassCreateNestedManyWithoutClassInput
    teacherCourses?: TeacherCourseCreateNestedManyWithoutClassInput
  }

  export type ClassUncheckedCreateWithoutCreatorInput = {
    id?: string
    className: string
    accessCode: string
    studentClasses?: StudentClassUncheckedCreateNestedManyWithoutClassInput
    teacherCourses?: TeacherCourseUncheckedCreateNestedManyWithoutClassInput
  }

  export type ClassCreateOrConnectWithoutCreatorInput = {
    where: ClassWhereUniqueInput
    create: XOR<ClassCreateWithoutCreatorInput, ClassUncheckedCreateWithoutCreatorInput>
  }

  export type ClassCreateManyCreatorInputEnvelope = {
    data: ClassCreateManyCreatorInput | ClassCreateManyCreatorInput[]
    skipDuplicates?: boolean
  }

  export type CourseCreateWithoutCreatorInput = {
    id?: string
    courseName: string
    courseCode: string
    courseType: $Enums.CourseType
    teacherCourses?: TeacherCourseCreateNestedManyWithoutCourseInput
  }

  export type CourseUncheckedCreateWithoutCreatorInput = {
    id?: string
    courseName: string
    courseCode: string
    courseType: $Enums.CourseType
    teacherCourses?: TeacherCourseUncheckedCreateNestedManyWithoutCourseInput
  }

  export type CourseCreateOrConnectWithoutCreatorInput = {
    where: CourseWhereUniqueInput
    create: XOR<CourseCreateWithoutCreatorInput, CourseUncheckedCreateWithoutCreatorInput>
  }

  export type CourseCreateManyCreatorInputEnvelope = {
    data: CourseCreateManyCreatorInput | CourseCreateManyCreatorInput[]
    skipDuplicates?: boolean
  }

  export type FeedbackParameterCreateWithoutCreatorInput = {
    id?: string
    parameterName: string
    parameterType: $Enums.CourseType
    feedbacks?: FeedbackCreateNestedManyWithoutParameterInput
  }

  export type FeedbackParameterUncheckedCreateWithoutCreatorInput = {
    id?: string
    parameterName: string
    parameterType: $Enums.CourseType
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutParameterInput
  }

  export type FeedbackParameterCreateOrConnectWithoutCreatorInput = {
    where: FeedbackParameterWhereUniqueInput
    create: XOR<FeedbackParameterCreateWithoutCreatorInput, FeedbackParameterUncheckedCreateWithoutCreatorInput>
  }

  export type FeedbackParameterCreateManyCreatorInputEnvelope = {
    data: FeedbackParameterCreateManyCreatorInput | FeedbackParameterCreateManyCreatorInput[]
    skipDuplicates?: boolean
  }

  export type TeacherCreateWithoutAssignerInput = {
    id?: string
    name: string
    email?: string | null
    teacherCourses?: TeacherCourseCreateNestedManyWithoutTeacherInput
  }

  export type TeacherUncheckedCreateWithoutAssignerInput = {
    id?: string
    name: string
    email?: string | null
    teacherCourses?: TeacherCourseUncheckedCreateNestedManyWithoutTeacherInput
  }

  export type TeacherCreateOrConnectWithoutAssignerInput = {
    where: TeacherWhereUniqueInput
    create: XOR<TeacherCreateWithoutAssignerInput, TeacherUncheckedCreateWithoutAssignerInput>
  }

  export type TeacherCreateManyAssignerInputEnvelope = {
    data: TeacherCreateManyAssignerInput | TeacherCreateManyAssignerInput[]
    skipDuplicates?: boolean
  }

  export type StudentClassCreateWithoutStudentInput = {
    id?: string
    class: ClassCreateNestedOneWithoutStudentClassesInput
  }

  export type StudentClassUncheckedCreateWithoutStudentInput = {
    id?: string
    classId: string
  }

  export type StudentClassCreateOrConnectWithoutStudentInput = {
    where: StudentClassWhereUniqueInput
    create: XOR<StudentClassCreateWithoutStudentInput, StudentClassUncheckedCreateWithoutStudentInput>
  }

  export type StudentClassCreateManyStudentInputEnvelope = {
    data: StudentClassCreateManyStudentInput | StudentClassCreateManyStudentInput[]
    skipDuplicates?: boolean
  }

  export type FeedbackCreateWithoutStudentInput = {
    id?: string
    rating: number
    comment?: string | null
    createdAt?: Date | string
    teacherCourse: TeacherCourseCreateNestedOneWithoutFeedbacksInput
    parameter: FeedbackParameterCreateNestedOneWithoutFeedbacksInput
  }

  export type FeedbackUncheckedCreateWithoutStudentInput = {
    id?: string
    teacherCourseId: string
    parameterId: string
    rating: number
    comment?: string | null
    createdAt?: Date | string
  }

  export type FeedbackCreateOrConnectWithoutStudentInput = {
    where: FeedbackWhereUniqueInput
    create: XOR<FeedbackCreateWithoutStudentInput, FeedbackUncheckedCreateWithoutStudentInput>
  }

  export type FeedbackCreateManyStudentInputEnvelope = {
    data: FeedbackCreateManyStudentInput | FeedbackCreateManyStudentInput[]
    skipDuplicates?: boolean
  }

  export type ClassUpsertWithWhereUniqueWithoutCreatorInput = {
    where: ClassWhereUniqueInput
    update: XOR<ClassUpdateWithoutCreatorInput, ClassUncheckedUpdateWithoutCreatorInput>
    create: XOR<ClassCreateWithoutCreatorInput, ClassUncheckedCreateWithoutCreatorInput>
  }

  export type ClassUpdateWithWhereUniqueWithoutCreatorInput = {
    where: ClassWhereUniqueInput
    data: XOR<ClassUpdateWithoutCreatorInput, ClassUncheckedUpdateWithoutCreatorInput>
  }

  export type ClassUpdateManyWithWhereWithoutCreatorInput = {
    where: ClassScalarWhereInput
    data: XOR<ClassUpdateManyMutationInput, ClassUncheckedUpdateManyWithoutCreatorInput>
  }

  export type ClassScalarWhereInput = {
    AND?: ClassScalarWhereInput | ClassScalarWhereInput[]
    OR?: ClassScalarWhereInput[]
    NOT?: ClassScalarWhereInput | ClassScalarWhereInput[]
    id?: StringFilter<"Class"> | string
    className?: StringFilter<"Class"> | string
    accessCode?: StringFilter<"Class"> | string
    createdBy?: StringFilter<"Class"> | string
  }

  export type CourseUpsertWithWhereUniqueWithoutCreatorInput = {
    where: CourseWhereUniqueInput
    update: XOR<CourseUpdateWithoutCreatorInput, CourseUncheckedUpdateWithoutCreatorInput>
    create: XOR<CourseCreateWithoutCreatorInput, CourseUncheckedCreateWithoutCreatorInput>
  }

  export type CourseUpdateWithWhereUniqueWithoutCreatorInput = {
    where: CourseWhereUniqueInput
    data: XOR<CourseUpdateWithoutCreatorInput, CourseUncheckedUpdateWithoutCreatorInput>
  }

  export type CourseUpdateManyWithWhereWithoutCreatorInput = {
    where: CourseScalarWhereInput
    data: XOR<CourseUpdateManyMutationInput, CourseUncheckedUpdateManyWithoutCreatorInput>
  }

  export type CourseScalarWhereInput = {
    AND?: CourseScalarWhereInput | CourseScalarWhereInput[]
    OR?: CourseScalarWhereInput[]
    NOT?: CourseScalarWhereInput | CourseScalarWhereInput[]
    id?: StringFilter<"Course"> | string
    courseName?: StringFilter<"Course"> | string
    courseCode?: StringFilter<"Course"> | string
    courseType?: EnumCourseTypeFilter<"Course"> | $Enums.CourseType
    createdBy?: StringFilter<"Course"> | string
  }

  export type FeedbackParameterUpsertWithWhereUniqueWithoutCreatorInput = {
    where: FeedbackParameterWhereUniqueInput
    update: XOR<FeedbackParameterUpdateWithoutCreatorInput, FeedbackParameterUncheckedUpdateWithoutCreatorInput>
    create: XOR<FeedbackParameterCreateWithoutCreatorInput, FeedbackParameterUncheckedCreateWithoutCreatorInput>
  }

  export type FeedbackParameterUpdateWithWhereUniqueWithoutCreatorInput = {
    where: FeedbackParameterWhereUniqueInput
    data: XOR<FeedbackParameterUpdateWithoutCreatorInput, FeedbackParameterUncheckedUpdateWithoutCreatorInput>
  }

  export type FeedbackParameterUpdateManyWithWhereWithoutCreatorInput = {
    where: FeedbackParameterScalarWhereInput
    data: XOR<FeedbackParameterUpdateManyMutationInput, FeedbackParameterUncheckedUpdateManyWithoutCreatorInput>
  }

  export type FeedbackParameterScalarWhereInput = {
    AND?: FeedbackParameterScalarWhereInput | FeedbackParameterScalarWhereInput[]
    OR?: FeedbackParameterScalarWhereInput[]
    NOT?: FeedbackParameterScalarWhereInput | FeedbackParameterScalarWhereInput[]
    id?: StringFilter<"FeedbackParameter"> | string
    parameterName?: StringFilter<"FeedbackParameter"> | string
    parameterType?: EnumCourseTypeFilter<"FeedbackParameter"> | $Enums.CourseType
    createdBy?: StringFilter<"FeedbackParameter"> | string
  }

  export type TeacherUpsertWithWhereUniqueWithoutAssignerInput = {
    where: TeacherWhereUniqueInput
    update: XOR<TeacherUpdateWithoutAssignerInput, TeacherUncheckedUpdateWithoutAssignerInput>
    create: XOR<TeacherCreateWithoutAssignerInput, TeacherUncheckedCreateWithoutAssignerInput>
  }

  export type TeacherUpdateWithWhereUniqueWithoutAssignerInput = {
    where: TeacherWhereUniqueInput
    data: XOR<TeacherUpdateWithoutAssignerInput, TeacherUncheckedUpdateWithoutAssignerInput>
  }

  export type TeacherUpdateManyWithWhereWithoutAssignerInput = {
    where: TeacherScalarWhereInput
    data: XOR<TeacherUpdateManyMutationInput, TeacherUncheckedUpdateManyWithoutAssignerInput>
  }

  export type TeacherScalarWhereInput = {
    AND?: TeacherScalarWhereInput | TeacherScalarWhereInput[]
    OR?: TeacherScalarWhereInput[]
    NOT?: TeacherScalarWhereInput | TeacherScalarWhereInput[]
    id?: StringFilter<"Teacher"> | string
    name?: StringFilter<"Teacher"> | string
    email?: StringNullableFilter<"Teacher"> | string | null
    assignedBy?: StringFilter<"Teacher"> | string
  }

  export type StudentClassUpsertWithWhereUniqueWithoutStudentInput = {
    where: StudentClassWhereUniqueInput
    update: XOR<StudentClassUpdateWithoutStudentInput, StudentClassUncheckedUpdateWithoutStudentInput>
    create: XOR<StudentClassCreateWithoutStudentInput, StudentClassUncheckedCreateWithoutStudentInput>
  }

  export type StudentClassUpdateWithWhereUniqueWithoutStudentInput = {
    where: StudentClassWhereUniqueInput
    data: XOR<StudentClassUpdateWithoutStudentInput, StudentClassUncheckedUpdateWithoutStudentInput>
  }

  export type StudentClassUpdateManyWithWhereWithoutStudentInput = {
    where: StudentClassScalarWhereInput
    data: XOR<StudentClassUpdateManyMutationInput, StudentClassUncheckedUpdateManyWithoutStudentInput>
  }

  export type StudentClassScalarWhereInput = {
    AND?: StudentClassScalarWhereInput | StudentClassScalarWhereInput[]
    OR?: StudentClassScalarWhereInput[]
    NOT?: StudentClassScalarWhereInput | StudentClassScalarWhereInput[]
    id?: StringFilter<"StudentClass"> | string
    studentId?: StringFilter<"StudentClass"> | string
    classId?: StringFilter<"StudentClass"> | string
  }

  export type FeedbackUpsertWithWhereUniqueWithoutStudentInput = {
    where: FeedbackWhereUniqueInput
    update: XOR<FeedbackUpdateWithoutStudentInput, FeedbackUncheckedUpdateWithoutStudentInput>
    create: XOR<FeedbackCreateWithoutStudentInput, FeedbackUncheckedCreateWithoutStudentInput>
  }

  export type FeedbackUpdateWithWhereUniqueWithoutStudentInput = {
    where: FeedbackWhereUniqueInput
    data: XOR<FeedbackUpdateWithoutStudentInput, FeedbackUncheckedUpdateWithoutStudentInput>
  }

  export type FeedbackUpdateManyWithWhereWithoutStudentInput = {
    where: FeedbackScalarWhereInput
    data: XOR<FeedbackUpdateManyMutationInput, FeedbackUncheckedUpdateManyWithoutStudentInput>
  }

  export type FeedbackScalarWhereInput = {
    AND?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
    OR?: FeedbackScalarWhereInput[]
    NOT?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
    id?: StringFilter<"Feedback"> | string
    studentId?: StringFilter<"Feedback"> | string
    teacherCourseId?: StringFilter<"Feedback"> | string
    parameterId?: StringFilter<"Feedback"> | string
    rating?: IntFilter<"Feedback"> | number
    comment?: StringNullableFilter<"Feedback"> | string | null
    createdAt?: DateTimeFilter<"Feedback"> | Date | string
  }

  export type UserCreateWithoutCreatedClassesInput = {
    id?: string
    name: string
    email: string
    password: string
    role: $Enums.Role
    createdAt?: Date | string
    createdCourses?: CourseCreateNestedManyWithoutCreatorInput
    createdParameters?: FeedbackParameterCreateNestedManyWithoutCreatorInput
    assignedTeachers?: TeacherCreateNestedManyWithoutAssignerInput
    studentClasses?: StudentClassCreateNestedManyWithoutStudentInput
    feedbacks?: FeedbackCreateNestedManyWithoutStudentInput
  }

  export type UserUncheckedCreateWithoutCreatedClassesInput = {
    id?: string
    name: string
    email: string
    password: string
    role: $Enums.Role
    createdAt?: Date | string
    createdCourses?: CourseUncheckedCreateNestedManyWithoutCreatorInput
    createdParameters?: FeedbackParameterUncheckedCreateNestedManyWithoutCreatorInput
    assignedTeachers?: TeacherUncheckedCreateNestedManyWithoutAssignerInput
    studentClasses?: StudentClassUncheckedCreateNestedManyWithoutStudentInput
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutStudentInput
  }

  export type UserCreateOrConnectWithoutCreatedClassesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedClassesInput, UserUncheckedCreateWithoutCreatedClassesInput>
  }

  export type StudentClassCreateWithoutClassInput = {
    id?: string
    student: UserCreateNestedOneWithoutStudentClassesInput
  }

  export type StudentClassUncheckedCreateWithoutClassInput = {
    id?: string
    studentId: string
  }

  export type StudentClassCreateOrConnectWithoutClassInput = {
    where: StudentClassWhereUniqueInput
    create: XOR<StudentClassCreateWithoutClassInput, StudentClassUncheckedCreateWithoutClassInput>
  }

  export type StudentClassCreateManyClassInputEnvelope = {
    data: StudentClassCreateManyClassInput | StudentClassCreateManyClassInput[]
    skipDuplicates?: boolean
  }

  export type TeacherCourseCreateWithoutClassInput = {
    id?: string
    teacher: TeacherCreateNestedOneWithoutTeacherCoursesInput
    course: CourseCreateNestedOneWithoutTeacherCoursesInput
    feedbacks?: FeedbackCreateNestedManyWithoutTeacherCourseInput
  }

  export type TeacherCourseUncheckedCreateWithoutClassInput = {
    id?: string
    teacherId: string
    courseId: string
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutTeacherCourseInput
  }

  export type TeacherCourseCreateOrConnectWithoutClassInput = {
    where: TeacherCourseWhereUniqueInput
    create: XOR<TeacherCourseCreateWithoutClassInput, TeacherCourseUncheckedCreateWithoutClassInput>
  }

  export type TeacherCourseCreateManyClassInputEnvelope = {
    data: TeacherCourseCreateManyClassInput | TeacherCourseCreateManyClassInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutCreatedClassesInput = {
    update: XOR<UserUpdateWithoutCreatedClassesInput, UserUncheckedUpdateWithoutCreatedClassesInput>
    create: XOR<UserCreateWithoutCreatedClassesInput, UserUncheckedCreateWithoutCreatedClassesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedClassesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedClassesInput, UserUncheckedUpdateWithoutCreatedClassesInput>
  }

  export type UserUpdateWithoutCreatedClassesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdCourses?: CourseUpdateManyWithoutCreatorNestedInput
    createdParameters?: FeedbackParameterUpdateManyWithoutCreatorNestedInput
    assignedTeachers?: TeacherUpdateManyWithoutAssignerNestedInput
    studentClasses?: StudentClassUpdateManyWithoutStudentNestedInput
    feedbacks?: FeedbackUpdateManyWithoutStudentNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedClassesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdCourses?: CourseUncheckedUpdateManyWithoutCreatorNestedInput
    createdParameters?: FeedbackParameterUncheckedUpdateManyWithoutCreatorNestedInput
    assignedTeachers?: TeacherUncheckedUpdateManyWithoutAssignerNestedInput
    studentClasses?: StudentClassUncheckedUpdateManyWithoutStudentNestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type StudentClassUpsertWithWhereUniqueWithoutClassInput = {
    where: StudentClassWhereUniqueInput
    update: XOR<StudentClassUpdateWithoutClassInput, StudentClassUncheckedUpdateWithoutClassInput>
    create: XOR<StudentClassCreateWithoutClassInput, StudentClassUncheckedCreateWithoutClassInput>
  }

  export type StudentClassUpdateWithWhereUniqueWithoutClassInput = {
    where: StudentClassWhereUniqueInput
    data: XOR<StudentClassUpdateWithoutClassInput, StudentClassUncheckedUpdateWithoutClassInput>
  }

  export type StudentClassUpdateManyWithWhereWithoutClassInput = {
    where: StudentClassScalarWhereInput
    data: XOR<StudentClassUpdateManyMutationInput, StudentClassUncheckedUpdateManyWithoutClassInput>
  }

  export type TeacherCourseUpsertWithWhereUniqueWithoutClassInput = {
    where: TeacherCourseWhereUniqueInput
    update: XOR<TeacherCourseUpdateWithoutClassInput, TeacherCourseUncheckedUpdateWithoutClassInput>
    create: XOR<TeacherCourseCreateWithoutClassInput, TeacherCourseUncheckedCreateWithoutClassInput>
  }

  export type TeacherCourseUpdateWithWhereUniqueWithoutClassInput = {
    where: TeacherCourseWhereUniqueInput
    data: XOR<TeacherCourseUpdateWithoutClassInput, TeacherCourseUncheckedUpdateWithoutClassInput>
  }

  export type TeacherCourseUpdateManyWithWhereWithoutClassInput = {
    where: TeacherCourseScalarWhereInput
    data: XOR<TeacherCourseUpdateManyMutationInput, TeacherCourseUncheckedUpdateManyWithoutClassInput>
  }

  export type TeacherCourseScalarWhereInput = {
    AND?: TeacherCourseScalarWhereInput | TeacherCourseScalarWhereInput[]
    OR?: TeacherCourseScalarWhereInput[]
    NOT?: TeacherCourseScalarWhereInput | TeacherCourseScalarWhereInput[]
    id?: StringFilter<"TeacherCourse"> | string
    teacherId?: StringFilter<"TeacherCourse"> | string
    courseId?: StringFilter<"TeacherCourse"> | string
    classId?: StringFilter<"TeacherCourse"> | string
  }

  export type UserCreateWithoutStudentClassesInput = {
    id?: string
    name: string
    email: string
    password: string
    role: $Enums.Role
    createdAt?: Date | string
    createdClasses?: ClassCreateNestedManyWithoutCreatorInput
    createdCourses?: CourseCreateNestedManyWithoutCreatorInput
    createdParameters?: FeedbackParameterCreateNestedManyWithoutCreatorInput
    assignedTeachers?: TeacherCreateNestedManyWithoutAssignerInput
    feedbacks?: FeedbackCreateNestedManyWithoutStudentInput
  }

  export type UserUncheckedCreateWithoutStudentClassesInput = {
    id?: string
    name: string
    email: string
    password: string
    role: $Enums.Role
    createdAt?: Date | string
    createdClasses?: ClassUncheckedCreateNestedManyWithoutCreatorInput
    createdCourses?: CourseUncheckedCreateNestedManyWithoutCreatorInput
    createdParameters?: FeedbackParameterUncheckedCreateNestedManyWithoutCreatorInput
    assignedTeachers?: TeacherUncheckedCreateNestedManyWithoutAssignerInput
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutStudentInput
  }

  export type UserCreateOrConnectWithoutStudentClassesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutStudentClassesInput, UserUncheckedCreateWithoutStudentClassesInput>
  }

  export type ClassCreateWithoutStudentClassesInput = {
    id?: string
    className: string
    accessCode: string
    creator: UserCreateNestedOneWithoutCreatedClassesInput
    teacherCourses?: TeacherCourseCreateNestedManyWithoutClassInput
  }

  export type ClassUncheckedCreateWithoutStudentClassesInput = {
    id?: string
    className: string
    accessCode: string
    createdBy: string
    teacherCourses?: TeacherCourseUncheckedCreateNestedManyWithoutClassInput
  }

  export type ClassCreateOrConnectWithoutStudentClassesInput = {
    where: ClassWhereUniqueInput
    create: XOR<ClassCreateWithoutStudentClassesInput, ClassUncheckedCreateWithoutStudentClassesInput>
  }

  export type UserUpsertWithoutStudentClassesInput = {
    update: XOR<UserUpdateWithoutStudentClassesInput, UserUncheckedUpdateWithoutStudentClassesInput>
    create: XOR<UserCreateWithoutStudentClassesInput, UserUncheckedCreateWithoutStudentClassesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutStudentClassesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutStudentClassesInput, UserUncheckedUpdateWithoutStudentClassesInput>
  }

  export type UserUpdateWithoutStudentClassesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdClasses?: ClassUpdateManyWithoutCreatorNestedInput
    createdCourses?: CourseUpdateManyWithoutCreatorNestedInput
    createdParameters?: FeedbackParameterUpdateManyWithoutCreatorNestedInput
    assignedTeachers?: TeacherUpdateManyWithoutAssignerNestedInput
    feedbacks?: FeedbackUpdateManyWithoutStudentNestedInput
  }

  export type UserUncheckedUpdateWithoutStudentClassesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdClasses?: ClassUncheckedUpdateManyWithoutCreatorNestedInput
    createdCourses?: CourseUncheckedUpdateManyWithoutCreatorNestedInput
    createdParameters?: FeedbackParameterUncheckedUpdateManyWithoutCreatorNestedInput
    assignedTeachers?: TeacherUncheckedUpdateManyWithoutAssignerNestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type ClassUpsertWithoutStudentClassesInput = {
    update: XOR<ClassUpdateWithoutStudentClassesInput, ClassUncheckedUpdateWithoutStudentClassesInput>
    create: XOR<ClassCreateWithoutStudentClassesInput, ClassUncheckedCreateWithoutStudentClassesInput>
    where?: ClassWhereInput
  }

  export type ClassUpdateToOneWithWhereWithoutStudentClassesInput = {
    where?: ClassWhereInput
    data: XOR<ClassUpdateWithoutStudentClassesInput, ClassUncheckedUpdateWithoutStudentClassesInput>
  }

  export type ClassUpdateWithoutStudentClassesInput = {
    id?: StringFieldUpdateOperationsInput | string
    className?: StringFieldUpdateOperationsInput | string
    accessCode?: StringFieldUpdateOperationsInput | string
    creator?: UserUpdateOneRequiredWithoutCreatedClassesNestedInput
    teacherCourses?: TeacherCourseUpdateManyWithoutClassNestedInput
  }

  export type ClassUncheckedUpdateWithoutStudentClassesInput = {
    id?: StringFieldUpdateOperationsInput | string
    className?: StringFieldUpdateOperationsInput | string
    accessCode?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    teacherCourses?: TeacherCourseUncheckedUpdateManyWithoutClassNestedInput
  }

  export type UserCreateWithoutCreatedCoursesInput = {
    id?: string
    name: string
    email: string
    password: string
    role: $Enums.Role
    createdAt?: Date | string
    createdClasses?: ClassCreateNestedManyWithoutCreatorInput
    createdParameters?: FeedbackParameterCreateNestedManyWithoutCreatorInput
    assignedTeachers?: TeacherCreateNestedManyWithoutAssignerInput
    studentClasses?: StudentClassCreateNestedManyWithoutStudentInput
    feedbacks?: FeedbackCreateNestedManyWithoutStudentInput
  }

  export type UserUncheckedCreateWithoutCreatedCoursesInput = {
    id?: string
    name: string
    email: string
    password: string
    role: $Enums.Role
    createdAt?: Date | string
    createdClasses?: ClassUncheckedCreateNestedManyWithoutCreatorInput
    createdParameters?: FeedbackParameterUncheckedCreateNestedManyWithoutCreatorInput
    assignedTeachers?: TeacherUncheckedCreateNestedManyWithoutAssignerInput
    studentClasses?: StudentClassUncheckedCreateNestedManyWithoutStudentInput
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutStudentInput
  }

  export type UserCreateOrConnectWithoutCreatedCoursesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedCoursesInput, UserUncheckedCreateWithoutCreatedCoursesInput>
  }

  export type TeacherCourseCreateWithoutCourseInput = {
    id?: string
    teacher: TeacherCreateNestedOneWithoutTeacherCoursesInput
    class: ClassCreateNestedOneWithoutTeacherCoursesInput
    feedbacks?: FeedbackCreateNestedManyWithoutTeacherCourseInput
  }

  export type TeacherCourseUncheckedCreateWithoutCourseInput = {
    id?: string
    teacherId: string
    classId: string
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutTeacherCourseInput
  }

  export type TeacherCourseCreateOrConnectWithoutCourseInput = {
    where: TeacherCourseWhereUniqueInput
    create: XOR<TeacherCourseCreateWithoutCourseInput, TeacherCourseUncheckedCreateWithoutCourseInput>
  }

  export type TeacherCourseCreateManyCourseInputEnvelope = {
    data: TeacherCourseCreateManyCourseInput | TeacherCourseCreateManyCourseInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutCreatedCoursesInput = {
    update: XOR<UserUpdateWithoutCreatedCoursesInput, UserUncheckedUpdateWithoutCreatedCoursesInput>
    create: XOR<UserCreateWithoutCreatedCoursesInput, UserUncheckedCreateWithoutCreatedCoursesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedCoursesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedCoursesInput, UserUncheckedUpdateWithoutCreatedCoursesInput>
  }

  export type UserUpdateWithoutCreatedCoursesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdClasses?: ClassUpdateManyWithoutCreatorNestedInput
    createdParameters?: FeedbackParameterUpdateManyWithoutCreatorNestedInput
    assignedTeachers?: TeacherUpdateManyWithoutAssignerNestedInput
    studentClasses?: StudentClassUpdateManyWithoutStudentNestedInput
    feedbacks?: FeedbackUpdateManyWithoutStudentNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedCoursesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdClasses?: ClassUncheckedUpdateManyWithoutCreatorNestedInput
    createdParameters?: FeedbackParameterUncheckedUpdateManyWithoutCreatorNestedInput
    assignedTeachers?: TeacherUncheckedUpdateManyWithoutAssignerNestedInput
    studentClasses?: StudentClassUncheckedUpdateManyWithoutStudentNestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type TeacherCourseUpsertWithWhereUniqueWithoutCourseInput = {
    where: TeacherCourseWhereUniqueInput
    update: XOR<TeacherCourseUpdateWithoutCourseInput, TeacherCourseUncheckedUpdateWithoutCourseInput>
    create: XOR<TeacherCourseCreateWithoutCourseInput, TeacherCourseUncheckedCreateWithoutCourseInput>
  }

  export type TeacherCourseUpdateWithWhereUniqueWithoutCourseInput = {
    where: TeacherCourseWhereUniqueInput
    data: XOR<TeacherCourseUpdateWithoutCourseInput, TeacherCourseUncheckedUpdateWithoutCourseInput>
  }

  export type TeacherCourseUpdateManyWithWhereWithoutCourseInput = {
    where: TeacherCourseScalarWhereInput
    data: XOR<TeacherCourseUpdateManyMutationInput, TeacherCourseUncheckedUpdateManyWithoutCourseInput>
  }

  export type UserCreateWithoutAssignedTeachersInput = {
    id?: string
    name: string
    email: string
    password: string
    role: $Enums.Role
    createdAt?: Date | string
    createdClasses?: ClassCreateNestedManyWithoutCreatorInput
    createdCourses?: CourseCreateNestedManyWithoutCreatorInput
    createdParameters?: FeedbackParameterCreateNestedManyWithoutCreatorInput
    studentClasses?: StudentClassCreateNestedManyWithoutStudentInput
    feedbacks?: FeedbackCreateNestedManyWithoutStudentInput
  }

  export type UserUncheckedCreateWithoutAssignedTeachersInput = {
    id?: string
    name: string
    email: string
    password: string
    role: $Enums.Role
    createdAt?: Date | string
    createdClasses?: ClassUncheckedCreateNestedManyWithoutCreatorInput
    createdCourses?: CourseUncheckedCreateNestedManyWithoutCreatorInput
    createdParameters?: FeedbackParameterUncheckedCreateNestedManyWithoutCreatorInput
    studentClasses?: StudentClassUncheckedCreateNestedManyWithoutStudentInput
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutStudentInput
  }

  export type UserCreateOrConnectWithoutAssignedTeachersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAssignedTeachersInput, UserUncheckedCreateWithoutAssignedTeachersInput>
  }

  export type TeacherCourseCreateWithoutTeacherInput = {
    id?: string
    course: CourseCreateNestedOneWithoutTeacherCoursesInput
    class: ClassCreateNestedOneWithoutTeacherCoursesInput
    feedbacks?: FeedbackCreateNestedManyWithoutTeacherCourseInput
  }

  export type TeacherCourseUncheckedCreateWithoutTeacherInput = {
    id?: string
    courseId: string
    classId: string
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutTeacherCourseInput
  }

  export type TeacherCourseCreateOrConnectWithoutTeacherInput = {
    where: TeacherCourseWhereUniqueInput
    create: XOR<TeacherCourseCreateWithoutTeacherInput, TeacherCourseUncheckedCreateWithoutTeacherInput>
  }

  export type TeacherCourseCreateManyTeacherInputEnvelope = {
    data: TeacherCourseCreateManyTeacherInput | TeacherCourseCreateManyTeacherInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutAssignedTeachersInput = {
    update: XOR<UserUpdateWithoutAssignedTeachersInput, UserUncheckedUpdateWithoutAssignedTeachersInput>
    create: XOR<UserCreateWithoutAssignedTeachersInput, UserUncheckedCreateWithoutAssignedTeachersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAssignedTeachersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAssignedTeachersInput, UserUncheckedUpdateWithoutAssignedTeachersInput>
  }

  export type UserUpdateWithoutAssignedTeachersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdClasses?: ClassUpdateManyWithoutCreatorNestedInput
    createdCourses?: CourseUpdateManyWithoutCreatorNestedInput
    createdParameters?: FeedbackParameterUpdateManyWithoutCreatorNestedInput
    studentClasses?: StudentClassUpdateManyWithoutStudentNestedInput
    feedbacks?: FeedbackUpdateManyWithoutStudentNestedInput
  }

  export type UserUncheckedUpdateWithoutAssignedTeachersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdClasses?: ClassUncheckedUpdateManyWithoutCreatorNestedInput
    createdCourses?: CourseUncheckedUpdateManyWithoutCreatorNestedInput
    createdParameters?: FeedbackParameterUncheckedUpdateManyWithoutCreatorNestedInput
    studentClasses?: StudentClassUncheckedUpdateManyWithoutStudentNestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type TeacherCourseUpsertWithWhereUniqueWithoutTeacherInput = {
    where: TeacherCourseWhereUniqueInput
    update: XOR<TeacherCourseUpdateWithoutTeacherInput, TeacherCourseUncheckedUpdateWithoutTeacherInput>
    create: XOR<TeacherCourseCreateWithoutTeacherInput, TeacherCourseUncheckedCreateWithoutTeacherInput>
  }

  export type TeacherCourseUpdateWithWhereUniqueWithoutTeacherInput = {
    where: TeacherCourseWhereUniqueInput
    data: XOR<TeacherCourseUpdateWithoutTeacherInput, TeacherCourseUncheckedUpdateWithoutTeacherInput>
  }

  export type TeacherCourseUpdateManyWithWhereWithoutTeacherInput = {
    where: TeacherCourseScalarWhereInput
    data: XOR<TeacherCourseUpdateManyMutationInput, TeacherCourseUncheckedUpdateManyWithoutTeacherInput>
  }

  export type TeacherCreateWithoutTeacherCoursesInput = {
    id?: string
    name: string
    email?: string | null
    assigner: UserCreateNestedOneWithoutAssignedTeachersInput
  }

  export type TeacherUncheckedCreateWithoutTeacherCoursesInput = {
    id?: string
    name: string
    email?: string | null
    assignedBy: string
  }

  export type TeacherCreateOrConnectWithoutTeacherCoursesInput = {
    where: TeacherWhereUniqueInput
    create: XOR<TeacherCreateWithoutTeacherCoursesInput, TeacherUncheckedCreateWithoutTeacherCoursesInput>
  }

  export type CourseCreateWithoutTeacherCoursesInput = {
    id?: string
    courseName: string
    courseCode: string
    courseType: $Enums.CourseType
    creator: UserCreateNestedOneWithoutCreatedCoursesInput
  }

  export type CourseUncheckedCreateWithoutTeacherCoursesInput = {
    id?: string
    courseName: string
    courseCode: string
    courseType: $Enums.CourseType
    createdBy: string
  }

  export type CourseCreateOrConnectWithoutTeacherCoursesInput = {
    where: CourseWhereUniqueInput
    create: XOR<CourseCreateWithoutTeacherCoursesInput, CourseUncheckedCreateWithoutTeacherCoursesInput>
  }

  export type ClassCreateWithoutTeacherCoursesInput = {
    id?: string
    className: string
    accessCode: string
    creator: UserCreateNestedOneWithoutCreatedClassesInput
    studentClasses?: StudentClassCreateNestedManyWithoutClassInput
  }

  export type ClassUncheckedCreateWithoutTeacherCoursesInput = {
    id?: string
    className: string
    accessCode: string
    createdBy: string
    studentClasses?: StudentClassUncheckedCreateNestedManyWithoutClassInput
  }

  export type ClassCreateOrConnectWithoutTeacherCoursesInput = {
    where: ClassWhereUniqueInput
    create: XOR<ClassCreateWithoutTeacherCoursesInput, ClassUncheckedCreateWithoutTeacherCoursesInput>
  }

  export type FeedbackCreateWithoutTeacherCourseInput = {
    id?: string
    rating: number
    comment?: string | null
    createdAt?: Date | string
    student: UserCreateNestedOneWithoutFeedbacksInput
    parameter: FeedbackParameterCreateNestedOneWithoutFeedbacksInput
  }

  export type FeedbackUncheckedCreateWithoutTeacherCourseInput = {
    id?: string
    studentId: string
    parameterId: string
    rating: number
    comment?: string | null
    createdAt?: Date | string
  }

  export type FeedbackCreateOrConnectWithoutTeacherCourseInput = {
    where: FeedbackWhereUniqueInput
    create: XOR<FeedbackCreateWithoutTeacherCourseInput, FeedbackUncheckedCreateWithoutTeacherCourseInput>
  }

  export type FeedbackCreateManyTeacherCourseInputEnvelope = {
    data: FeedbackCreateManyTeacherCourseInput | FeedbackCreateManyTeacherCourseInput[]
    skipDuplicates?: boolean
  }

  export type TeacherUpsertWithoutTeacherCoursesInput = {
    update: XOR<TeacherUpdateWithoutTeacherCoursesInput, TeacherUncheckedUpdateWithoutTeacherCoursesInput>
    create: XOR<TeacherCreateWithoutTeacherCoursesInput, TeacherUncheckedCreateWithoutTeacherCoursesInput>
    where?: TeacherWhereInput
  }

  export type TeacherUpdateToOneWithWhereWithoutTeacherCoursesInput = {
    where?: TeacherWhereInput
    data: XOR<TeacherUpdateWithoutTeacherCoursesInput, TeacherUncheckedUpdateWithoutTeacherCoursesInput>
  }

  export type TeacherUpdateWithoutTeacherCoursesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    assigner?: UserUpdateOneRequiredWithoutAssignedTeachersNestedInput
  }

  export type TeacherUncheckedUpdateWithoutTeacherCoursesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    assignedBy?: StringFieldUpdateOperationsInput | string
  }

  export type CourseUpsertWithoutTeacherCoursesInput = {
    update: XOR<CourseUpdateWithoutTeacherCoursesInput, CourseUncheckedUpdateWithoutTeacherCoursesInput>
    create: XOR<CourseCreateWithoutTeacherCoursesInput, CourseUncheckedCreateWithoutTeacherCoursesInput>
    where?: CourseWhereInput
  }

  export type CourseUpdateToOneWithWhereWithoutTeacherCoursesInput = {
    where?: CourseWhereInput
    data: XOR<CourseUpdateWithoutTeacherCoursesInput, CourseUncheckedUpdateWithoutTeacherCoursesInput>
  }

  export type CourseUpdateWithoutTeacherCoursesInput = {
    id?: StringFieldUpdateOperationsInput | string
    courseName?: StringFieldUpdateOperationsInput | string
    courseCode?: StringFieldUpdateOperationsInput | string
    courseType?: EnumCourseTypeFieldUpdateOperationsInput | $Enums.CourseType
    creator?: UserUpdateOneRequiredWithoutCreatedCoursesNestedInput
  }

  export type CourseUncheckedUpdateWithoutTeacherCoursesInput = {
    id?: StringFieldUpdateOperationsInput | string
    courseName?: StringFieldUpdateOperationsInput | string
    courseCode?: StringFieldUpdateOperationsInput | string
    courseType?: EnumCourseTypeFieldUpdateOperationsInput | $Enums.CourseType
    createdBy?: StringFieldUpdateOperationsInput | string
  }

  export type ClassUpsertWithoutTeacherCoursesInput = {
    update: XOR<ClassUpdateWithoutTeacherCoursesInput, ClassUncheckedUpdateWithoutTeacherCoursesInput>
    create: XOR<ClassCreateWithoutTeacherCoursesInput, ClassUncheckedCreateWithoutTeacherCoursesInput>
    where?: ClassWhereInput
  }

  export type ClassUpdateToOneWithWhereWithoutTeacherCoursesInput = {
    where?: ClassWhereInput
    data: XOR<ClassUpdateWithoutTeacherCoursesInput, ClassUncheckedUpdateWithoutTeacherCoursesInput>
  }

  export type ClassUpdateWithoutTeacherCoursesInput = {
    id?: StringFieldUpdateOperationsInput | string
    className?: StringFieldUpdateOperationsInput | string
    accessCode?: StringFieldUpdateOperationsInput | string
    creator?: UserUpdateOneRequiredWithoutCreatedClassesNestedInput
    studentClasses?: StudentClassUpdateManyWithoutClassNestedInput
  }

  export type ClassUncheckedUpdateWithoutTeacherCoursesInput = {
    id?: StringFieldUpdateOperationsInput | string
    className?: StringFieldUpdateOperationsInput | string
    accessCode?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    studentClasses?: StudentClassUncheckedUpdateManyWithoutClassNestedInput
  }

  export type FeedbackUpsertWithWhereUniqueWithoutTeacherCourseInput = {
    where: FeedbackWhereUniqueInput
    update: XOR<FeedbackUpdateWithoutTeacherCourseInput, FeedbackUncheckedUpdateWithoutTeacherCourseInput>
    create: XOR<FeedbackCreateWithoutTeacherCourseInput, FeedbackUncheckedCreateWithoutTeacherCourseInput>
  }

  export type FeedbackUpdateWithWhereUniqueWithoutTeacherCourseInput = {
    where: FeedbackWhereUniqueInput
    data: XOR<FeedbackUpdateWithoutTeacherCourseInput, FeedbackUncheckedUpdateWithoutTeacherCourseInput>
  }

  export type FeedbackUpdateManyWithWhereWithoutTeacherCourseInput = {
    where: FeedbackScalarWhereInput
    data: XOR<FeedbackUpdateManyMutationInput, FeedbackUncheckedUpdateManyWithoutTeacherCourseInput>
  }

  export type UserCreateWithoutCreatedParametersInput = {
    id?: string
    name: string
    email: string
    password: string
    role: $Enums.Role
    createdAt?: Date | string
    createdClasses?: ClassCreateNestedManyWithoutCreatorInput
    createdCourses?: CourseCreateNestedManyWithoutCreatorInput
    assignedTeachers?: TeacherCreateNestedManyWithoutAssignerInput
    studentClasses?: StudentClassCreateNestedManyWithoutStudentInput
    feedbacks?: FeedbackCreateNestedManyWithoutStudentInput
  }

  export type UserUncheckedCreateWithoutCreatedParametersInput = {
    id?: string
    name: string
    email: string
    password: string
    role: $Enums.Role
    createdAt?: Date | string
    createdClasses?: ClassUncheckedCreateNestedManyWithoutCreatorInput
    createdCourses?: CourseUncheckedCreateNestedManyWithoutCreatorInput
    assignedTeachers?: TeacherUncheckedCreateNestedManyWithoutAssignerInput
    studentClasses?: StudentClassUncheckedCreateNestedManyWithoutStudentInput
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutStudentInput
  }

  export type UserCreateOrConnectWithoutCreatedParametersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedParametersInput, UserUncheckedCreateWithoutCreatedParametersInput>
  }

  export type FeedbackCreateWithoutParameterInput = {
    id?: string
    rating: number
    comment?: string | null
    createdAt?: Date | string
    student: UserCreateNestedOneWithoutFeedbacksInput
    teacherCourse: TeacherCourseCreateNestedOneWithoutFeedbacksInput
  }

  export type FeedbackUncheckedCreateWithoutParameterInput = {
    id?: string
    studentId: string
    teacherCourseId: string
    rating: number
    comment?: string | null
    createdAt?: Date | string
  }

  export type FeedbackCreateOrConnectWithoutParameterInput = {
    where: FeedbackWhereUniqueInput
    create: XOR<FeedbackCreateWithoutParameterInput, FeedbackUncheckedCreateWithoutParameterInput>
  }

  export type FeedbackCreateManyParameterInputEnvelope = {
    data: FeedbackCreateManyParameterInput | FeedbackCreateManyParameterInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutCreatedParametersInput = {
    update: XOR<UserUpdateWithoutCreatedParametersInput, UserUncheckedUpdateWithoutCreatedParametersInput>
    create: XOR<UserCreateWithoutCreatedParametersInput, UserUncheckedCreateWithoutCreatedParametersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedParametersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedParametersInput, UserUncheckedUpdateWithoutCreatedParametersInput>
  }

  export type UserUpdateWithoutCreatedParametersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdClasses?: ClassUpdateManyWithoutCreatorNestedInput
    createdCourses?: CourseUpdateManyWithoutCreatorNestedInput
    assignedTeachers?: TeacherUpdateManyWithoutAssignerNestedInput
    studentClasses?: StudentClassUpdateManyWithoutStudentNestedInput
    feedbacks?: FeedbackUpdateManyWithoutStudentNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedParametersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdClasses?: ClassUncheckedUpdateManyWithoutCreatorNestedInput
    createdCourses?: CourseUncheckedUpdateManyWithoutCreatorNestedInput
    assignedTeachers?: TeacherUncheckedUpdateManyWithoutAssignerNestedInput
    studentClasses?: StudentClassUncheckedUpdateManyWithoutStudentNestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type FeedbackUpsertWithWhereUniqueWithoutParameterInput = {
    where: FeedbackWhereUniqueInput
    update: XOR<FeedbackUpdateWithoutParameterInput, FeedbackUncheckedUpdateWithoutParameterInput>
    create: XOR<FeedbackCreateWithoutParameterInput, FeedbackUncheckedCreateWithoutParameterInput>
  }

  export type FeedbackUpdateWithWhereUniqueWithoutParameterInput = {
    where: FeedbackWhereUniqueInput
    data: XOR<FeedbackUpdateWithoutParameterInput, FeedbackUncheckedUpdateWithoutParameterInput>
  }

  export type FeedbackUpdateManyWithWhereWithoutParameterInput = {
    where: FeedbackScalarWhereInput
    data: XOR<FeedbackUpdateManyMutationInput, FeedbackUncheckedUpdateManyWithoutParameterInput>
  }

  export type UserCreateWithoutFeedbacksInput = {
    id?: string
    name: string
    email: string
    password: string
    role: $Enums.Role
    createdAt?: Date | string
    createdClasses?: ClassCreateNestedManyWithoutCreatorInput
    createdCourses?: CourseCreateNestedManyWithoutCreatorInput
    createdParameters?: FeedbackParameterCreateNestedManyWithoutCreatorInput
    assignedTeachers?: TeacherCreateNestedManyWithoutAssignerInput
    studentClasses?: StudentClassCreateNestedManyWithoutStudentInput
  }

  export type UserUncheckedCreateWithoutFeedbacksInput = {
    id?: string
    name: string
    email: string
    password: string
    role: $Enums.Role
    createdAt?: Date | string
    createdClasses?: ClassUncheckedCreateNestedManyWithoutCreatorInput
    createdCourses?: CourseUncheckedCreateNestedManyWithoutCreatorInput
    createdParameters?: FeedbackParameterUncheckedCreateNestedManyWithoutCreatorInput
    assignedTeachers?: TeacherUncheckedCreateNestedManyWithoutAssignerInput
    studentClasses?: StudentClassUncheckedCreateNestedManyWithoutStudentInput
  }

  export type UserCreateOrConnectWithoutFeedbacksInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFeedbacksInput, UserUncheckedCreateWithoutFeedbacksInput>
  }

  export type TeacherCourseCreateWithoutFeedbacksInput = {
    id?: string
    teacher: TeacherCreateNestedOneWithoutTeacherCoursesInput
    course: CourseCreateNestedOneWithoutTeacherCoursesInput
    class: ClassCreateNestedOneWithoutTeacherCoursesInput
  }

  export type TeacherCourseUncheckedCreateWithoutFeedbacksInput = {
    id?: string
    teacherId: string
    courseId: string
    classId: string
  }

  export type TeacherCourseCreateOrConnectWithoutFeedbacksInput = {
    where: TeacherCourseWhereUniqueInput
    create: XOR<TeacherCourseCreateWithoutFeedbacksInput, TeacherCourseUncheckedCreateWithoutFeedbacksInput>
  }

  export type FeedbackParameterCreateWithoutFeedbacksInput = {
    id?: string
    parameterName: string
    parameterType: $Enums.CourseType
    creator: UserCreateNestedOneWithoutCreatedParametersInput
  }

  export type FeedbackParameterUncheckedCreateWithoutFeedbacksInput = {
    id?: string
    parameterName: string
    parameterType: $Enums.CourseType
    createdBy: string
  }

  export type FeedbackParameterCreateOrConnectWithoutFeedbacksInput = {
    where: FeedbackParameterWhereUniqueInput
    create: XOR<FeedbackParameterCreateWithoutFeedbacksInput, FeedbackParameterUncheckedCreateWithoutFeedbacksInput>
  }

  export type UserUpsertWithoutFeedbacksInput = {
    update: XOR<UserUpdateWithoutFeedbacksInput, UserUncheckedUpdateWithoutFeedbacksInput>
    create: XOR<UserCreateWithoutFeedbacksInput, UserUncheckedCreateWithoutFeedbacksInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFeedbacksInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFeedbacksInput, UserUncheckedUpdateWithoutFeedbacksInput>
  }

  export type UserUpdateWithoutFeedbacksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdClasses?: ClassUpdateManyWithoutCreatorNestedInput
    createdCourses?: CourseUpdateManyWithoutCreatorNestedInput
    createdParameters?: FeedbackParameterUpdateManyWithoutCreatorNestedInput
    assignedTeachers?: TeacherUpdateManyWithoutAssignerNestedInput
    studentClasses?: StudentClassUpdateManyWithoutStudentNestedInput
  }

  export type UserUncheckedUpdateWithoutFeedbacksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdClasses?: ClassUncheckedUpdateManyWithoutCreatorNestedInput
    createdCourses?: CourseUncheckedUpdateManyWithoutCreatorNestedInput
    createdParameters?: FeedbackParameterUncheckedUpdateManyWithoutCreatorNestedInput
    assignedTeachers?: TeacherUncheckedUpdateManyWithoutAssignerNestedInput
    studentClasses?: StudentClassUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type TeacherCourseUpsertWithoutFeedbacksInput = {
    update: XOR<TeacherCourseUpdateWithoutFeedbacksInput, TeacherCourseUncheckedUpdateWithoutFeedbacksInput>
    create: XOR<TeacherCourseCreateWithoutFeedbacksInput, TeacherCourseUncheckedCreateWithoutFeedbacksInput>
    where?: TeacherCourseWhereInput
  }

  export type TeacherCourseUpdateToOneWithWhereWithoutFeedbacksInput = {
    where?: TeacherCourseWhereInput
    data: XOR<TeacherCourseUpdateWithoutFeedbacksInput, TeacherCourseUncheckedUpdateWithoutFeedbacksInput>
  }

  export type TeacherCourseUpdateWithoutFeedbacksInput = {
    id?: StringFieldUpdateOperationsInput | string
    teacher?: TeacherUpdateOneRequiredWithoutTeacherCoursesNestedInput
    course?: CourseUpdateOneRequiredWithoutTeacherCoursesNestedInput
    class?: ClassUpdateOneRequiredWithoutTeacherCoursesNestedInput
  }

  export type TeacherCourseUncheckedUpdateWithoutFeedbacksInput = {
    id?: StringFieldUpdateOperationsInput | string
    teacherId?: StringFieldUpdateOperationsInput | string
    courseId?: StringFieldUpdateOperationsInput | string
    classId?: StringFieldUpdateOperationsInput | string
  }

  export type FeedbackParameterUpsertWithoutFeedbacksInput = {
    update: XOR<FeedbackParameterUpdateWithoutFeedbacksInput, FeedbackParameterUncheckedUpdateWithoutFeedbacksInput>
    create: XOR<FeedbackParameterCreateWithoutFeedbacksInput, FeedbackParameterUncheckedCreateWithoutFeedbacksInput>
    where?: FeedbackParameterWhereInput
  }

  export type FeedbackParameterUpdateToOneWithWhereWithoutFeedbacksInput = {
    where?: FeedbackParameterWhereInput
    data: XOR<FeedbackParameterUpdateWithoutFeedbacksInput, FeedbackParameterUncheckedUpdateWithoutFeedbacksInput>
  }

  export type FeedbackParameterUpdateWithoutFeedbacksInput = {
    id?: StringFieldUpdateOperationsInput | string
    parameterName?: StringFieldUpdateOperationsInput | string
    parameterType?: EnumCourseTypeFieldUpdateOperationsInput | $Enums.CourseType
    creator?: UserUpdateOneRequiredWithoutCreatedParametersNestedInput
  }

  export type FeedbackParameterUncheckedUpdateWithoutFeedbacksInput = {
    id?: StringFieldUpdateOperationsInput | string
    parameterName?: StringFieldUpdateOperationsInput | string
    parameterType?: EnumCourseTypeFieldUpdateOperationsInput | $Enums.CourseType
    createdBy?: StringFieldUpdateOperationsInput | string
  }

  export type ClassCreateManyCreatorInput = {
    id?: string
    className: string
    accessCode: string
  }

  export type CourseCreateManyCreatorInput = {
    id?: string
    courseName: string
    courseCode: string
    courseType: $Enums.CourseType
  }

  export type FeedbackParameterCreateManyCreatorInput = {
    id?: string
    parameterName: string
    parameterType: $Enums.CourseType
  }

  export type TeacherCreateManyAssignerInput = {
    id?: string
    name: string
    email?: string | null
  }

  export type StudentClassCreateManyStudentInput = {
    id?: string
    classId: string
  }

  export type FeedbackCreateManyStudentInput = {
    id?: string
    teacherCourseId: string
    parameterId: string
    rating: number
    comment?: string | null
    createdAt?: Date | string
  }

  export type ClassUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    className?: StringFieldUpdateOperationsInput | string
    accessCode?: StringFieldUpdateOperationsInput | string
    studentClasses?: StudentClassUpdateManyWithoutClassNestedInput
    teacherCourses?: TeacherCourseUpdateManyWithoutClassNestedInput
  }

  export type ClassUncheckedUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    className?: StringFieldUpdateOperationsInput | string
    accessCode?: StringFieldUpdateOperationsInput | string
    studentClasses?: StudentClassUncheckedUpdateManyWithoutClassNestedInput
    teacherCourses?: TeacherCourseUncheckedUpdateManyWithoutClassNestedInput
  }

  export type ClassUncheckedUpdateManyWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    className?: StringFieldUpdateOperationsInput | string
    accessCode?: StringFieldUpdateOperationsInput | string
  }

  export type CourseUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    courseName?: StringFieldUpdateOperationsInput | string
    courseCode?: StringFieldUpdateOperationsInput | string
    courseType?: EnumCourseTypeFieldUpdateOperationsInput | $Enums.CourseType
    teacherCourses?: TeacherCourseUpdateManyWithoutCourseNestedInput
  }

  export type CourseUncheckedUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    courseName?: StringFieldUpdateOperationsInput | string
    courseCode?: StringFieldUpdateOperationsInput | string
    courseType?: EnumCourseTypeFieldUpdateOperationsInput | $Enums.CourseType
    teacherCourses?: TeacherCourseUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type CourseUncheckedUpdateManyWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    courseName?: StringFieldUpdateOperationsInput | string
    courseCode?: StringFieldUpdateOperationsInput | string
    courseType?: EnumCourseTypeFieldUpdateOperationsInput | $Enums.CourseType
  }

  export type FeedbackParameterUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    parameterName?: StringFieldUpdateOperationsInput | string
    parameterType?: EnumCourseTypeFieldUpdateOperationsInput | $Enums.CourseType
    feedbacks?: FeedbackUpdateManyWithoutParameterNestedInput
  }

  export type FeedbackParameterUncheckedUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    parameterName?: StringFieldUpdateOperationsInput | string
    parameterType?: EnumCourseTypeFieldUpdateOperationsInput | $Enums.CourseType
    feedbacks?: FeedbackUncheckedUpdateManyWithoutParameterNestedInput
  }

  export type FeedbackParameterUncheckedUpdateManyWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    parameterName?: StringFieldUpdateOperationsInput | string
    parameterType?: EnumCourseTypeFieldUpdateOperationsInput | $Enums.CourseType
  }

  export type TeacherUpdateWithoutAssignerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    teacherCourses?: TeacherCourseUpdateManyWithoutTeacherNestedInput
  }

  export type TeacherUncheckedUpdateWithoutAssignerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    teacherCourses?: TeacherCourseUncheckedUpdateManyWithoutTeacherNestedInput
  }

  export type TeacherUncheckedUpdateManyWithoutAssignerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StudentClassUpdateWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    class?: ClassUpdateOneRequiredWithoutStudentClassesNestedInput
  }

  export type StudentClassUncheckedUpdateWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    classId?: StringFieldUpdateOperationsInput | string
  }

  export type StudentClassUncheckedUpdateManyWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    classId?: StringFieldUpdateOperationsInput | string
  }

  export type FeedbackUpdateWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teacherCourse?: TeacherCourseUpdateOneRequiredWithoutFeedbacksNestedInput
    parameter?: FeedbackParameterUpdateOneRequiredWithoutFeedbacksNestedInput
  }

  export type FeedbackUncheckedUpdateWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    teacherCourseId?: StringFieldUpdateOperationsInput | string
    parameterId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedbackUncheckedUpdateManyWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    teacherCourseId?: StringFieldUpdateOperationsInput | string
    parameterId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudentClassCreateManyClassInput = {
    id?: string
    studentId: string
  }

  export type TeacherCourseCreateManyClassInput = {
    id?: string
    teacherId: string
    courseId: string
  }

  export type StudentClassUpdateWithoutClassInput = {
    id?: StringFieldUpdateOperationsInput | string
    student?: UserUpdateOneRequiredWithoutStudentClassesNestedInput
  }

  export type StudentClassUncheckedUpdateWithoutClassInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
  }

  export type StudentClassUncheckedUpdateManyWithoutClassInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
  }

  export type TeacherCourseUpdateWithoutClassInput = {
    id?: StringFieldUpdateOperationsInput | string
    teacher?: TeacherUpdateOneRequiredWithoutTeacherCoursesNestedInput
    course?: CourseUpdateOneRequiredWithoutTeacherCoursesNestedInput
    feedbacks?: FeedbackUpdateManyWithoutTeacherCourseNestedInput
  }

  export type TeacherCourseUncheckedUpdateWithoutClassInput = {
    id?: StringFieldUpdateOperationsInput | string
    teacherId?: StringFieldUpdateOperationsInput | string
    courseId?: StringFieldUpdateOperationsInput | string
    feedbacks?: FeedbackUncheckedUpdateManyWithoutTeacherCourseNestedInput
  }

  export type TeacherCourseUncheckedUpdateManyWithoutClassInput = {
    id?: StringFieldUpdateOperationsInput | string
    teacherId?: StringFieldUpdateOperationsInput | string
    courseId?: StringFieldUpdateOperationsInput | string
  }

  export type TeacherCourseCreateManyCourseInput = {
    id?: string
    teacherId: string
    classId: string
  }

  export type TeacherCourseUpdateWithoutCourseInput = {
    id?: StringFieldUpdateOperationsInput | string
    teacher?: TeacherUpdateOneRequiredWithoutTeacherCoursesNestedInput
    class?: ClassUpdateOneRequiredWithoutTeacherCoursesNestedInput
    feedbacks?: FeedbackUpdateManyWithoutTeacherCourseNestedInput
  }

  export type TeacherCourseUncheckedUpdateWithoutCourseInput = {
    id?: StringFieldUpdateOperationsInput | string
    teacherId?: StringFieldUpdateOperationsInput | string
    classId?: StringFieldUpdateOperationsInput | string
    feedbacks?: FeedbackUncheckedUpdateManyWithoutTeacherCourseNestedInput
  }

  export type TeacherCourseUncheckedUpdateManyWithoutCourseInput = {
    id?: StringFieldUpdateOperationsInput | string
    teacherId?: StringFieldUpdateOperationsInput | string
    classId?: StringFieldUpdateOperationsInput | string
  }

  export type TeacherCourseCreateManyTeacherInput = {
    id?: string
    courseId: string
    classId: string
  }

  export type TeacherCourseUpdateWithoutTeacherInput = {
    id?: StringFieldUpdateOperationsInput | string
    course?: CourseUpdateOneRequiredWithoutTeacherCoursesNestedInput
    class?: ClassUpdateOneRequiredWithoutTeacherCoursesNestedInput
    feedbacks?: FeedbackUpdateManyWithoutTeacherCourseNestedInput
  }

  export type TeacherCourseUncheckedUpdateWithoutTeacherInput = {
    id?: StringFieldUpdateOperationsInput | string
    courseId?: StringFieldUpdateOperationsInput | string
    classId?: StringFieldUpdateOperationsInput | string
    feedbacks?: FeedbackUncheckedUpdateManyWithoutTeacherCourseNestedInput
  }

  export type TeacherCourseUncheckedUpdateManyWithoutTeacherInput = {
    id?: StringFieldUpdateOperationsInput | string
    courseId?: StringFieldUpdateOperationsInput | string
    classId?: StringFieldUpdateOperationsInput | string
  }

  export type FeedbackCreateManyTeacherCourseInput = {
    id?: string
    studentId: string
    parameterId: string
    rating: number
    comment?: string | null
    createdAt?: Date | string
  }

  export type FeedbackUpdateWithoutTeacherCourseInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    student?: UserUpdateOneRequiredWithoutFeedbacksNestedInput
    parameter?: FeedbackParameterUpdateOneRequiredWithoutFeedbacksNestedInput
  }

  export type FeedbackUncheckedUpdateWithoutTeacherCourseInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    parameterId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedbackUncheckedUpdateManyWithoutTeacherCourseInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    parameterId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedbackCreateManyParameterInput = {
    id?: string
    studentId: string
    teacherCourseId: string
    rating: number
    comment?: string | null
    createdAt?: Date | string
  }

  export type FeedbackUpdateWithoutParameterInput = {
    id?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    student?: UserUpdateOneRequiredWithoutFeedbacksNestedInput
    teacherCourse?: TeacherCourseUpdateOneRequiredWithoutFeedbacksNestedInput
  }

  export type FeedbackUncheckedUpdateWithoutParameterInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    teacherCourseId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedbackUncheckedUpdateManyWithoutParameterInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    teacherCourseId?: StringFieldUpdateOperationsInput | string
    rating?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}