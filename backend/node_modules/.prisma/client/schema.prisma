generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  admin
  student
}

enum CourseType {
  Lecture
  Tutorial
  Lab
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      Role
  createdAt DateTime @default(now())

  // Relations
  createdClasses    Class[]             @relation("CreatedClasses")
  createdCourses    Course[]            @relation("CreatedCourses")
  createdParameters FeedbackParameter[] @relation("CreatedParameters")
  assignedTeachers  Teacher[]           @relation("AssignedTeachers")
  studentClasses    StudentClass[]
  feedbacks         Feedback[]
}

model Class {
  id         String @id @default(uuid())
  className  String
  accessCode String @unique
  createdBy  String
  creator    User   @relation("CreatedClasses", fields: [createdBy], references: [id])

  studentClasses StudentClass[]
  teacherCourses TeacherCourse[]
}

model StudentClass {
  id        String @id @default(uuid())
  studentId String
  classId   String

  student User  @relation(fields: [studentId], references: [id])
  class   Class @relation(fields: [classId], references: [id])
}

model Course {
  id         String     @id @default(uuid())
  courseName String     @unique
  courseCode String
  courseType CourseType
  createdBy  String
  creator    User       @relation("CreatedCourses", fields: [createdBy], references: [id])

  teacherCourses TeacherCourse[]
}

model Teacher {
  id         String  @id @default(uuid())
  name       String
  email      String?
  assignedBy String
  assigner   User    @relation("AssignedTeachers", fields: [assignedBy], references: [id])

  teacherCourses TeacherCourse[]
}

model TeacherCourse {
  id        String @id @default(uuid())
  teacherId String
  courseId  String
  classId   String

  teacher   Teacher    @relation(fields: [teacherId], references: [id])
  course    Course     @relation(fields: [courseId], references: [id])
  class     Class      @relation(fields: [classId], references: [id])
  feedbacks Feedback[]
}

model FeedbackParameter {
  id            String     @id @default(uuid())
  parameterName String
  parameterType CourseType
  createdBy     String
  creator       User       @relation("CreatedParameters", fields: [createdBy], references: [id])

  feedbacks Feedback[]
}

model Feedback {
  id              String   @id @default(uuid())
  studentId       String
  teacherCourseId String
  parameterId     String
  rating          Int
  comment         String?
  createdAt       DateTime @default(now())

  student       User              @relation(fields: [studentId], references: [id])
  teacherCourse TeacherCourse     @relation(fields: [teacherCourseId], references: [id])
  parameter     FeedbackParameter @relation(fields: [parameterId], references: [id])
}
